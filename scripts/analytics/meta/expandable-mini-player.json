{
  "animation_name": "Expandable Mini Player",
  "animation_slug": "expandable-mini-player",
  "description": "A Spotify-like expandable mini music player that transitions from a compact mini-player bar at the bottom of the screen to a full-screen player view. Features smooth gesture-based interactions, interpolated animations for size, position, and color, and seamless integration with React Navigation bottom tabs.",
  "main_features": [
    "Mini player expands to full-screen on tap",
    "Pan gesture to collapse back to mini player",
    "Smooth interpolated animations for size, position, color, and border radius",
    "Dynamic background color transition (card to background)",
    "Animated border radius and border styling",
    "Pull-down knob indicator that fades in when expanded",
    "Scale feedback on tap interaction",
    "Content scaling (image, title, subtitle) during transition",
    "Background screen transforms with parallax effect",
    "Integration with React Navigation bottom tabs",
    "Progress-based threshold for snap points"
  ],
  "file_structure": {
    "index.ts": "Main export wrapper",
    "src/navigation/index.tsx": "Navigation wrapper with React Navigation bottom tabs",
    "src/components/navigation/": {
      "bottom-tab-bar/": {
        "index.tsx": "Main TabBar component container",
        "tab-item.tsx": "Individual tab item with animated opacity",
        "shared-progress.ts": "Global shared value for player expansion state",
        "constants.ts": "TabBarHeight constant",
        "expanded-sheet/": {
          "index.tsx": "Main expandable sheet with gesture handling",
          "sheet-content.tsx": "Music player content (image, title, subtitle)",
          "constants.ts": "MiniPlayerHeight constant"
        }
      },
      "screen/index.tsx": "Screen component with parallax scaling effect",
      "index.ts": "Navigation component exports"
    },
    "src/components/icons/": {
      "index.ts": "Icon exports",
      "index.tsx": "Icon component exports using Ionicons"
    },
    "src/constants/": {
      "palette.ts": "Color palette constants",
      "tabs.ts": "Tab navigation configuration"
    },
    "src/animations/easings.ts": "Custom easing functions (Bezier curves)"
  },
  "core_technologies": {
    "animations": "react-native-reanimated",
    "gestures": "react-native-gesture-handler",
    "navigation": "@react-navigation/bottom-tabs",
    "interactions": "pressto",
    "safe_area": "react-native-safe-area-context",
    "icons": "@expo/vector-icons"
  },
  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "components": [
        "Animated.View",
        "Animated.Text"
      ],
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle"
      ],
      "utilities": [
        "interpolate",
        "interpolateColor",
        "withTiming",
        "makeMutable"
      ],
      "usage": "Core animation engine for all transitions and gestures",
      "critical_feature": "makeMutable for global shared value, interpolate for smooth transitions"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": [
        "GestureDetector",
        "Gesture"
      ],
      "gestures": [
        "Tap",
        "Pan",
        "Simultaneous"
      ],
      "usage": "Tap to expand, pan to collapse with gesture-based progress control"
    },
    "@react-navigation/bottom-tabs": {
      "version": "^7.4.0",
      "usage": "Bottom tab navigation with custom tab bar renderer",
      "components": [
        "createBottomTabNavigator"
      ],
      "types": [
        "BottomTabBarProps"
      ]
    },
    "@react-navigation/native": {
      "version": "^7.1.8",
      "hooks": [
        "useNavigation"
      ],
      "usage": "Navigation hook for tab switching"
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "hooks": [
        "useSafeAreaInsets"
      ],
      "usage": "Safe area handling for notch and status bar"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "components": [
        "PressableScale"
      ],
      "usage": "Tab items with scale press animation"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "components": [
        "Ionicons"
      ],
      "usage": "Icon rendering with Ionicons",
      "types": [
        "IconProps (Omit<ComponentProps<typeof Ionicons>, 'name'>)"
      ]
    }
  },
  "animation_techniques": {
    "sheet_expansion": {
      "pattern": "Progress-based interpolation",
      "progress_range": "[0, 1] where 0 = mini player, 1 = full screen",
      "threshold": 0.8,
      "animations": [
        "height: interpolate(progress, [0, 1], [MiniPlayerHeight (64), windowHeight])",
        "bottom: interpolate(progress, [0, 1], [TabBarHeight (84), 0])",
        "left/right: interpolate(progress, [0, 1], [16, 0])",
        "backgroundColor: interpolateColor(progress, [0, 1], [card, background])",
        "borderColor: interpolateColor(progress, [0, 0.9, 1], [semi-transparent, semi-transparent, transparent])",
        "borderRadius: interpolate(progress, [0, 0.9, 1], [16, 48, 0])",
        "borderWidth: interpolate(progress, [0, 0.9, 1], [hairline, hairline, 0])",
        "shadowOpacity: interpolate(progress, [0, 1], [0.2, 0.5])"
      ],
      "easing": "EasingsUtils.inOut (Bezier 0.25, 0.1, 0.25, 1)",
      "duration": {
        "expand": "450ms",
        "collapse": "350ms"
      }
    },
    "tap_feedback": {
      "pattern": "Scale animation on tap",
      "implementation": "transform: [{ scale: withTiming(isTapped ? 0.98 : 1) }]",
      "trigger": "onBegin sets isTapped to true, onFinalize resets to false",
      "easing": "EasingsUtils.inOut",
      "condition": "Only when progress < threshold (0.8)"
    },
    "knob_indicator": {
      "pattern": "Opacity fade based on expansion",
      "implementation": "opacity: interpolate(progress, [0, progressThreshold/2, 1], [0, 0, 1])",
      "effect": "Knob hidden when mini, fades in only when expanded",
      "positioning": "top: safeTop + 8"
    },
    "content_scaling": {
      "image_size": {
        "from": "44px (ImageHeight)",
        "to": "132px (ExpandedImageHeight = ImageHeight * 3)",
        "border_radius": "interpolate(progress, [0, 1], [8, 24])"
      },
      "title_font": {
        "from": "14px",
        "to": "28px"
      },
      "subtitle_font": {
        "from": "12px",
        "to": "24px"
      },
      "layout_positioning": {
        "marginTop": "interpolate(progress, [0, 1], [BaseOffset, BaseOffset + 120])",
        "marginLeft": "interpolate(progress, [0, 1], [BaseOffset, 24])",
        "labels_left": "interpolate(progress, [0, 1], [ImageHeight + 10, 0])",
        "labels_top": "interpolate(progress, [0, 1], [5, ExpandedImageHeight + 24])"
      }
    },
    "tab_item_opacity": {
      "pattern": "Animated opacity based on active state",
      "active_opacity": "0.8 * opacity",
      "inactive_opacity": "0.2 * opacity",
      "easing": "EasingsUtils.inOut",
      "trigger": "Navigation state change"
    },
    "screen_parallax": {
      "pattern": "Background screen transforms during expansion",
      "animations": [
        "borderRadius: interpolate(progress, [0, 1], [0, 48])",
        "translateY: interpolate(progress, [0, 1], [0, 64])",
        "scale: interpolate(progress, [0, 1], [1, 0.95])"
      ],
      "effect": "Screen content scales down and moves up as player expands"
    }
  },
  "gesture_handling": {
    "tap_gesture": {
      "trigger": "Tap on mini player",
      "behavior": "Expands to full screen (progress â†’ 1)",
      "duration": "450ms",
      "condition": "Only triggers if progress < threshold (0.8)",
      "feedback": "Scale animation (0.98x) on tap begin"
    },
    "pan_gesture": {
      "trigger": "Pan/drag on expanded sheet",
      "behavior": "Follows finger movement to collapse",
      "implementation": "progress = interpolate(translationY, [0, windowHeight], [1, 0])",
      "enabled_when": "progress > 0 (panEnabled shared value)",
      "snap_behavior": {
        "threshold": 0.8,
        "above_threshold": "Snaps to 1 (full screen)",
        "below_threshold": "Snaps to 0 (mini player)"
      },
      "duration": "350ms"
    },
    "simultaneous_gestures": {
      "pattern": "Gesture.Simultaneous(tapGesture, panGesture)",
      "benefit": "Both gestures can be detected independently",
      "coordination": "Tap only works when collapsed, pan only when expanded"
    }
  },
  "reanimated_patterns": {
    "global_shared_value": {
      "name": "ExpandedSheetMutableProgress",
      "creation": "makeMutable(0)",
      "type": "Mutable shared value",
      "scope": "Global (shared across components)",
      "usage": [
        "ExpandedSheet: Controls expansion animation",
        "SheetContent: Animates content scaling",
        "Screen: Animates background parallax effect"
      ],
      "benefit": "Avoids prop drilling, synchronized state across components",
      "note": "Kind of a Global Shared Value (per author comment)"
    },
    "animated_styles": {
      "rSheetStyle": "Main sheet container animations",
      "rKnobStyle": "Pull-down knob fade animation",
      "rImageStyle": "Music artwork scaling and border radius",
      "rContentStyle": "Content container positioning",
      "rTitleStyle": "Title font size animation",
      "rSubtitleStyle": "Subtitle font size animation",
      "rLabelsContainerStyle": "Labels positioning relative to image",
      "rScreenStyle": "Background screen parallax effect",
      "rStyle (TabItem)": "Tab item opacity animation"
    },
    "interpolations": {
      "linear": "interpolate for numeric values (size, position, opacity)",
      "color": "interpolateColor for backgroundColor and borderColor",
      "multi_point": "3-point interpolation for borderRadius and borderColor (0, 0.9, 1)"
    },
    "timing_animations": {
      "expand": "withTiming(1, { duration: 450, easing: inOut })",
      "collapse": "withTiming(0, { duration: 350, easing: inOut })",
      "snap": "withTiming(progress > 0.8 ? 1 : 0, { duration: 350 })",
      "tap_scale": "withTiming(isTapped ? 0.98 : 1, { easing: inOut })",
      "tab_opacity": "withTiming(isActive ? 0.8 : 0.2, { easing: inOut })"
    }
  },
  "performance_optimizations": {
    "mutable_shared_value": {
      "benefit": "makeMutable allows direct value updates without re-renders",
      "usage": "ExpandedSheetMutableProgress shared across components"
    },
    "useCallback_optimization": {
      "tabBar": "Wrapped in useCallback to prevent unnecessary re-renders",
      "onPress": "Tab navigation callback memoized"
    },
    "gesture_conditionals": {
      "benefit": "Early returns in gesture handlers when conditions not met",
      "examples": [
        "Tap gesture returns early if progress >= threshold",
        "Pan gesture returns early if progress === 0"
      ]
    },
    "static_constants": {
      "benefit": "Height values defined as constants, not recalculated",
      "examples": [
        "TabBarHeight",
        "MiniPlayerHeight",
        "ImageHeight"
      ]
    },
    "vector_icons": {
      "benefit": "Vector icons from @expo/vector-icons provide consistent styling and performance",
      "usage": "All navigation icons use Ionicons"
    },
    "borderCurve_continuous": {
      "property": "borderCurve: 'continuous'",
      "benefit": "iOS native continuous corner radius for smoother appearance",
      "fallback": "Gracefully degrades on Android"
    }
  },
  "react_patterns": {
    "useCallback": {
      "tabBar": "Memoizes tab bar renderer function",
      "onPress": "Memoizes tab navigation handler",
      "dependencies": "Empty array for tabBar, [screen, navigation] for onPress"
    },
    "useSharedValue": {
      "isTapped": "Local shared value for tap feedback",
      "panEnabled": "Local shared value to control pan gesture enablement"
    },
    "useWindowDimensions": {
      "usage": "Gets screen height for full-screen expansion calculations",
      "reactive": "Updates on screen rotation"
    },
    "useSafeAreaInsets": {
      "usage": "Gets safe area insets for notch/status bar",
      "applied_to": [
        "Knob positioning",
        "Screen padding"
      ]
    },
    "custom_tab_bar": {
      "pattern": "Custom tabBar renderer via React Navigation",
      "prop": "tabBar={tabBar}",
      "benefit": "Full control over tab bar appearance and behavior"
    },
    "component_composition": {
      "TabBar": "Container for tabs and expanded sheet",
      "ExpandedSheet": "Expandable player UI",
      "SheetContent": "Player content display",
      "TabItem": "Individual tab items",
      "Screen": "Background screen with parallax"
    }
  },
  "navigation_integration": {
    "pattern": "React Navigation with custom bottom tabs",
    "navigator": "createBottomTabNavigator",
    "custom_renderer": true,
    "tab_screens": [
      "home",
      "search",
      "edit",
      "settings"
    ],
    "screen_options": {
      "headerShown": false
    },
    "tab_bar_props": {
      "activeIndex": "props.state.index",
      "usage": "Determines which tab icon is highlighted"
    },
    "z_index_strategy": {
      "expanded_sheet": "zIndex: 1000",
      "benefit": "Sheet overlays entire UI including tabs when expanded"
    }
  },
  "ui_ux_design": {
    "color_palette": {
      "background": "#0D0D0D (very dark gray)",
      "card": "#222222 (dark gray)",
      "icons": "#FFFFFF (white)",
      "text": "#FFFFFF (white)",
      "border": "rgba(255, 255, 255, 0.1) (10% white)"
    },
    "sizing": {
      "TabBarHeight": "84px",
      "MiniPlayerHeight": "64px",
      "ImageHeight": "44px (mini) â†’ 132px (expanded)",
      "KnobSize": "48px Ã— 4px",
      "TabItemSize": "flex: 1 (equal distribution)"
    },
    "spacing": {
      "mini_player_horizontal": "16px from edges",
      "mini_player_bottom": "TabBarHeight (84px)",
      "expanded_player": "Full screen (0px from all edges)",
      "content_margins": "BaseOffset: (MiniPlayerHeight - ImageHeight) / 2 = 10px",
      "knob_top": "safeTop + 8px"
    },
    "border_styling": {
      "mini_player_radius": "16px",
      "mid_transition_radius": "48px (at 0.9 progress)",
      "expanded_radius": "0px",
      "border_width": "StyleSheet.hairlineWidth â†’ 0",
      "border_curve": "continuous (iOS)",
      "border_color": "10% white â†’ transparent"
    },
    "shadows": {
      "color": "Palette.card (#222222)",
      "offset": "{ width: 0, height: 4 }",
      "radius": "16px",
      "opacity": "0.2 (mini) â†’ 0.5 (expanded)"
    },
    "interaction_feedback": {
      "tap": "0.98x scale on press",
      "pan": "Follows finger in real-time",
      "snap": "Smooth spring animation to end position",
      "tab_switch": "Opacity fade between active/inactive"
    },
    "visual_hierarchy": {
      "z_index_1000": "Expanded sheet (overlays everything)",
      "z_index_default": "Tab bar and content",
      "layering": "Sheet above tabs above screen content"
    }
  },
  "constants_and_configuration": {
    "BaseTabs": {
      "type": "const array",
      "structure": [
        "{ name: 'home', icon: 'home' }",
        "{ name: 'search', icon: 'search' }",
        "{ name: 'edit', icon: 'edit' }",
        "{ name: 'settings', icon: 'settings' }"
      ],
      "readonly": true
    },
    "progression_threshold": {
      "value": 0.8,
      "usage": [
        "Snap point decision",
        "Tap gesture disable point",
        "Knob fade threshold"
      ]
    },
    "sample_content": {
      "title": "Happiness does not wait",
      "subtitle": "Ã“lafur Arnalds",
      "imageUrl": "https://i3.ytimg.com/vi/BgO08T3E4LE/maxresdefault.jpg"
    },
    "easings": {
      "inOut": "Easing.bezier(0.25, 0.1, 0.25, 1)",
      "reference": "https://www.easing.dev/in-out-base"
    }
  },
  "mathematical_algorithms": {
    "progress_from_pan": {
      "formula": "interpolate(translationY, [0, windowHeight], [1, 0])",
      "description": "Converts vertical drag distance to 0-1 progress value",
      "inverted": true,
      "note": "Dragging down (positive Y) decreases progress"
    },
    "snap_threshold_logic": {
      "condition": "progress > 0.8",
      "true_result": "withTiming(1) - snap to expanded",
      "false_result": "withTiming(0) - snap to collapsed"
    },
    "multi_point_interpolation": {
      "usage": "borderRadius and borderColor",
      "points": [
        0,
        0.9,
        1
      ],
      "benefit": "Allows different curves for different parts of animation"
    },
    "base_offset_calculation": {
      "formula": "(MiniPlayerHeight - ImageHeight) / 2",
      "result": "(64 - 44) / 2 = 10px",
      "purpose": "Centers image vertically in mini player"
    },
    "icon_capitalization": {
      "algorithm": "str.charAt(0).toUpperCase() + str.slice(1)",
      "purpose": "Converts 'home' â†’ 'Home' for icon component lookup",
      "pattern": "Dynamic icon loading via string keys"
    }
  },
  "code_quality": {
    "typescript": "Full TypeScript with explicit types",
    "type_definitions": [
      "TabBarProps",
      "TabItemProps",
      "SheetContentProps",
      "ScreenProps",
      "BottomTabBarProps",
      "IconProps"
    ],
    "imports": {
      "organized": true,
      "react_native_first": true,
      "third_party_libs": true,
      "local_imports_last": true
    },
    "component_organization": {
      "separation": "Clear separation between UI, logic, and constants",
      "structure": "Feature-based folder structure",
      "colocated_styles": "StyleSheet.create at bottom of each file"
    },
    "naming_conventions": {
      "components": "PascalCase",
      "functions": "camelCase",
      "constants": "PascalCase or SCREAMING_SNAKE_CASE",
      "animated_styles": "rPrefix (r for 'reanimated')"
    },
    "documentation": {
      "inline_comments": "Minimal but clear",
      "author_notes": "Comments on limitations and design decisions",
      "type_annotations": "Comprehensive TypeScript typing"
    },
    "best_practices": [
      "useCallback for function memoization",
      "Separated constants from components",
      "Reusable component structure",
      "Type-safe icon loading",
      "Global shared value pattern",
      "Conditional gesture handling"
    ]
  },
  "strengths": [
    "Smooth, fluid animations with natural feel",
    "Excellent gesture handling with tap and pan",
    "Smart snap threshold prevents accidental states",
    "Global shared value elegantly coordinates multi-component animation",
    "Interpolations create seamless transitions",
    "Scale feedback provides tactile feel",
    "Well-organized file structure",
    "Integration with React Navigation is clean",
    "Parallax effect on background adds depth",
    "Responsive to safe area insets"
  ],
  "areas_for_improvement": [
    "No animation for tab bar hiding (could fade out when expanded)",
    "Tab items don't respond to player expansion state",
    "Music controls not implemented (play/pause, progress bar)",
    "No playlist or queue functionality",
    "Image loading state not handled",
    "No accessibility labels or screen reader support",
    "Hard-coded music content (title, subtitle, image)",
    "Icon loading pattern could use svg-transformer (per author note)",
    "No error boundaries for component failures",
    "Limited documentation in code comments"
  ],
  "known_limitations": {
    "static_content": {
      "issue": "Music content is hard-coded in component",
      "location": "expanded-sheet/index.tsx:136-138",
      "impact": "Not suitable for real music player without data props"
    },
    "icon_implementation": {
      "solution": "Uses @expo/vector-icons Ionicons for consistent icon rendering",
      "location": "components/icons/index.tsx",
      "benefit": "No need for svg-transformer or custom SVG files"
    },
    "no_music_controls": {
      "issue": "Visual only, no play/pause or seek functionality",
      "impact": "Not a fully functional music player"
    },
    "tab_bar_visibility": {
      "issue": "Tab bar remains visible under expanded sheet",
      "impact": "Minor visual clutter (z-index solves overlay issue)"
    },
    "accessibility": {
      "issue": "No accessibility labels or screen reader support",
      "impact": "Not usable by screen reader users"
    },
    "android_border_curve": {
      "issue": "borderCurve: 'continuous' only works on iOS",
      "fallback": "Falls back to standard border radius on Android"
    }
  },
  "potential_improvements": {
    "features": [
      "Add play/pause button and functionality",
      "Add seek bar with progress",
      "Add next/previous track controls",
      "Add playlist/queue view",
      "Add album artwork loading states",
      "Add music waveform visualization",
      "Add shuffle and repeat controls",
      "Add volume slider",
      "Add lyrics view",
      "Add sharing functionality"
    ],
    "animations": [
      "Animate tab bar fade-out when expanding",
      "Add spring-based physics for more bounce",
      "Add blur effect behind expanded sheet",
      "Add haptic feedback on snap points",
      "Add rotation animation for play button",
      "Add progress indicator animation",
      "Stagger icon fade animations"
    ],
    "ux_enhancements": [
      "Swipe down gesture on knob for easier collapse",
      "Double-tap to play/pause",
      "Horizontal swipe for next/previous track",
      "Long-press for additional options",
      "Keyboard shortcuts for desktop",
      "Custom easing curves per element"
    ],
    "accessibility": [
      "Add accessibility labels",
      "Support screen readers",
      "Respect reduced motion preference",
      "Add keyboard navigation",
      "Ensure proper focus management",
      "Add announcements for state changes"
    ],
    "code_quality": [
      "Extract magic numbers to constants",
      "Add prop types for music data",
      "Add error boundaries",
      "Add loading states",
      "Icons now use @expo/vector-icons (completed)",
      "Add unit tests for calculations",
      "Add integration tests for gestures"
    ],
    "performance": [
      "Lazy load album artwork",
      "Optimize image caching",
      "Add performance monitoring",
      "Profile gesture handler performance"
    ]
  },
  "key_insights": {
    "global_state_pattern": "makeMutable creates a global shared value that elegantly coordinates animations across multiple components without prop drilling",
    "gesture_coordination": "Simultaneous gestures allow tap and pan to coexist with conditional logic determining which is active",
    "interpolation_power": "Single progress value (0-1) drives all animations through interpolation, creating unified motion",
    "threshold_ux": "0.8 threshold creates natural snap behavior that feels intentional, not arbitrary",
    "multi_point_interpolation": "3-point interpolation for borderRadius and borderColor enables different animation curves for different phases",
    "z_index_layering": "High z-index on sheet ensures it overlays all content without complex layout changes",
    "safe_area_awareness": "Using safe area insets ensures design works on all devices with notches",
    "react_navigation_flexibility": "Custom tab bar renderer provides full control while leveraging navigation state management",
    "continuous_border_curve": "iOS-specific borderCurve creates premium feel on Apple devices",
    "scale_feedback": "Subtle scale animation (0.98x) provides tactile feedback without being distracting"
  },
  "learning_opportunities": {
    "for_beginners": [
      "Basic Reanimated animations with interpolate",
      "Gesture handling with tap and pan",
      "React Navigation bottom tabs",
      "Safe area insets usage",
      "Component composition patterns"
    ],
    "for_intermediate": [
      "Global shared values with makeMutable",
      "Simultaneous gesture handling",
      "Multi-point interpolation techniques",
      "interpolateColor for smooth color transitions",
      "Custom navigation bar renderers",
      "useAnimatedStyle optimization",
      "Threshold-based snap animations"
    ],
    "for_advanced": [
      "Coordinating animations across multiple components with shared state",
      "Building production-ready gesture-based UIs",
      "Performance optimization with conditional gestures",
      "Creating Spotify-like complex transitions",
      "Z-index layering strategies for overlays",
      "Platform-specific styling (borderCurve)"
    ]
  },
  "use_cases": {
    "primary": [
      "Music player applications",
      "Podcast player UIs",
      "Audio streaming apps",
      "Video player overlays",
      "Media playback controls"
    ],
    "secondary": [
      "Expandable widgets",
      "Bottom sheet implementations",
      "Card expansion interactions",
      "Navigation overlays",
      "Floating action panels"
    ],
    "real_world_examples": [
      "Spotify's Now Playing screen",
      "Apple Music player",
      "YouTube Music player",
      "SoundCloud player",
      "Pocket Casts player"
    ],
    "reusable_patterns": [
      "makeMutable global state pattern",
      "Progress-based multi-component animation",
      "Threshold-based snap logic",
      "Gesture-controlled expansion",
      "Parallax background effects"
    ]
  },
  "platform_considerations": {
    "ios": {
      "features": [
        "All features fully supported",
        "borderCurve: continuous for premium corners"
      ],
      "performance": "Excellent",
      "safe_area": "Properly handles notch and Dynamic Island"
    },
    "android": {
      "features": [
        "All core features supported",
        "borderCurve falls back to standard radius"
      ],
      "performance": "Excellent",
      "safe_area": "Properly handles various screen configurations"
    },
    "web": {
      "compatibility": "Should work with react-native-web",
      "gestures": "Requires pointer events support",
      "performance": "Good with modern browsers"
    }
  },
  "inspiration": {
    "primary_reference": "Spotify mobile app",
    "similar_patterns": [
      "Apple Music Now Playing",
      "YouTube Music player",
      "Instagram Reels bottom sheet",
      "Twitter Spaces player",
      "Discord voice channel widget"
    ]
  },
  "testing_considerations": {
    "gesture_tests": [
      "Tap expands to full screen",
      "Pan gesture collapses player",
      "Snap to expanded when progress > 0.8",
      "Snap to collapsed when progress < 0.8",
      "Tap disabled when expanded",
      "Pan disabled when collapsed"
    ],
    "animation_tests": [
      "Progress interpolates from 0 to 1",
      "All style properties transition smoothly",
      "Colors interpolate correctly",
      "Border radius transitions through 3 points",
      "Shadow opacity changes",
      "Content scales proportionally"
    ],
    "navigation_tests": [
      "Tab switching works correctly",
      "Active tab highlighted",
      "Navigation state preserved during expansion",
      "Custom tab bar renders"
    ],
    "edge_cases": [
      "Rapid tap/pan interactions",
      "Mid-animation gesture interruption",
      "Screen rotation during expansion",
      "Safe area changes (orientation)",
      "Zero-height image handling",
      "Very long title text"
    ]
  },
  "bundle_size_impact": {
    "component_size": "Medium (~350 lines total)",
    "dependencies": [
      "Reanimated (likely already in project)",
      "Gesture Handler (likely already in project)",
      "React Navigation (likely already in project)",
      "SVG (for icons)"
    ],
    "runtime_overhead": "Low - efficient animations on UI thread",
    "estimated_size": "~5-8KB (excluding dependencies)"
  },
  "tags": [
    "music-player",
    "expandable-sheet",
    "gestures",
    "reanimated",
    "bottom-tabs",
    "react-navigation",
    "interpolation",
    "tap-gesture",
    "pan-gesture",
    "spotify-like",
    "mini-player",
    "full-screen-transition",
    "parallax",
    "global-shared-value",
    "snap-animation",
    "progress-based-animation"
  ],
  "content_hash": "4c53f5d467e4c5023677605d2bbe3a661a9a5d62a14a56e018d1e4188bb9e44e",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.338Z",
  "last_validated": "2025-10-12T09:19:28.338Z"
}
