{
  "animation_name": "Bezier Curve Outline",
  "animation_slug": "bezier-curve-outline",
  "description": "An interactive visualization demonstrating cubic Bezier curve animation with path-following mechanics. Features a draggable chess-themed square that animates along a customizable Bezier curve path, with interactive control points and smooth blur effects. Includes an outline mode toggle to visualize and manipulate the underlying curve geometry.",
  "main_features": [
    "Interactive cubic Bezier curve with draggable control points",
    "Path-following animation along custom curves",
    "Outline mode for curve visualization and editing",
    "Chess-themed animated square with chessboard pattern",
    "Dynamic blur effects during animation and interactions",
    "Smooth spring animations for mode transitions",
    "Real-time path geometry calculations",
    "Animated square scaling during path traversal",
    "SVG path generation and conversion",
    "Touch-based control point manipulation"
  ],
  "file_structure": {
    "index.tsx": "Main export wrapper",
    "src/index.tsx": "Main app component orchestrating animation state",
    "src/components/": {
      "animated-square/": {
        "index.tsx": "Animated chess square component with blur and icon",
        "chessboard-layout.tsx": "8x8 chessboard pattern renderer"
      },
      "animated-blur-view/": {
        "index.tsx": "Animated wrapper for expo-blur BlurView"
      },
      "bezier-outline.tsx": "Interactive Bezier curve editor with control points",
      "constants.ts": "Initial control point positions"
    },
    "src/hooks/": {
      "useSharedControlPoint.tsx": "Hook for managing control point shared values",
      "useAnimateThroughPath/": {
        "index.tsx": "Hook for animating along a path",
        "utils/geometry.ts": "PathGeometry class for path measurements"
      }
    },
    "src/global-animation-state.ts": "Shared mutable state (unused)",
    "assets/pawn.svg": "Chess pawn icon"
  },
  "core_technologies": {
    "rendering": "@shopify/react-native-skia",
    "animations": "react-native-reanimated",
    "gestures": "react-native-skia-gesture",
    "threading": "react-native-worklets",
    "ui_effects": [
      "expo-blur",
      "expo-image"
    ],
    "interactions": "pressto"
  },
  "packages_and_versions": {
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "usage": "Bezier curve rendering, path visualization, control points",
      "components": [
        "Canvas",
        "Path",
        "Circle",
        "Group"
      ],
      "utilities": [
        "Skia",
        "ContourMeasureIter"
      ],
      "types": [
        "SkPath",
        "SkContourMeasure"
      ],
      "critical_features": [
        "Path.Make() for path creation",
        "Path.MakeFromSVGString() for path conversion",
        "cubicTo() for Bezier curves",
        "ContourMeasureIter for path measurements",
        "toSVGString() for path serialization"
      ],
      "performance_reason": "GPU-accelerated path rendering and real-time curve updates"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "usage": "Animation state, path calculations, style interpolations",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedStyle",
        "useAnimatedReaction",
        "withSpring",
        "withTiming",
        "cancelAnimation",
        "makeMutable"
      ],
      "utilities": [
        "interpolate",
        "interpolateColor",
        "Easing"
      ],
      "critical_feature": "useDerivedValue for real-time path recalculation"
    },
    "react-native-skia-gesture": {
      "version": "0.4.5-beta.1",
      "usage": "Draggable control points on Skia canvas",
      "components": [
        "Touchable.Canvas",
        "Touchable.Circle"
      ],
      "events": [
        "onStart",
        "onActive"
      ],
      "critical_feature": "Touch interaction directly on Skia elements"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "imports": [
        "scheduleOnRN"
      ],
      "usage": "Bridge UI thread path calculations to JS thread for state updates"
    },
    "expo-blur": {
      "version": "~15.0.7",
      "usage": [
        "Animation blur effect",
        "Button press blur effect"
      ],
      "components": [
        "BlurView"
      ],
      "wrapped_as": "AnimatedBlurView (Animated.createAnimatedComponent)"
    },
    "expo-image": {
      "version": "~3.0.8",
      "usage": "Display SVG pawn icon",
      "components": [
        "Image"
      ],
      "supports": "SVG rendering"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "usage": "Outline Mode button and animated square pressable",
      "components": [
        "PressableScale"
      ],
      "animation": "Automatic scale animation on press"
    }
  },
  "bezier_curve_mathematics": {
    "curve_type": "Cubic Bezier curve",
    "equation": "B(t) = (1-t)³P₀ + 3(1-t)²tP₁ + 3(1-t)t²P₂ + t³P₃, where t ∈ [0,1]",
    "control_points": {
      "P0": "first (start point)",
      "P1": "second (first control point)",
      "P2": "third (second control point)",
      "P3": "fourth (end point)"
    },
    "skia_implementation": {
      "method": "path.cubicTo(x1, y1, x2, y2, x3, y3)",
      "parameters": {
        "x1_y1": "First control point (P1)",
        "x2_y2": "Second control point (P2)",
        "x3_y3": "End point (P3)",
        "start": "Set via moveTo() before cubicTo()"
      }
    },
    "visualization_lines": {
      "line_1": "Start point (P0) to first control point (P1)",
      "line_2": "Second control point (P2) to end point (P3)",
      "purpose": "Shows control point influence on curve shape"
    },
    "path_geometry": {
      "contour_measurement": "SkContourMeasureIter calculates path length",
      "point_sampling": "getPosTan(length) gets position at distance",
      "total_length": "contour.length() returns total curve length",
      "interpolation_strategy": "Sample every 1px along path for smooth animation"
    }
  },
  "animation_techniques": {
    "path_following_animation": {
      "pattern": "Interpolate along pre-sampled path points",
      "implementation": {
        "step_1": "Sample path at every pixel (PathGeometry)",
        "step_2": "Store points array in SharedValue",
        "step_3": "Animate progress from 0 to 1",
        "step_4": "Interpolate between points based on progress",
        "step_5": "Update cx/cy coordinates via useDerivedValue"
      },
      "timing": {
        "duration": 1000,
        "easing": "Easing.bezier(0.455, 0.03, 0.515, 0.955)",
        "name": "easeInOutQuad-like custom Bezier"
      }
    },
    "square_scaling": {
      "pattern": "Interpolate size based on animation progress",
      "input_range": "[0, 1]",
      "output_range": "[64, 180]",
      "effect": "Square grows from 64px to 180px during animation"
    },
    "outline_mode_transition": {
      "pattern": "Spring animation between two states",
      "trigger": "outlineMode.value toggle",
      "derived": "outlineModeProgress via withSpring",
      "effects": [
        "Opacity fade (main content: 1-progress, outline: progress)",
        "PointerEvents switch (ensures proper interaction)",
        "Text color interpolation (#202020 → white)"
      ]
    },
    "blur_animations": {
      "button_blur": {
        "trigger": "PressableScale onPressIn/onPressOut",
        "values": "0 → 65 on press, 65 → 0 on release",
        "animation": "withSpring",
        "tint": "systemUltraThinMaterialLight",
        "coverage": "Full screen (StyleSheet.absoluteFillObject)"
      },
      "square_blur": {
        "trigger": "Animation progress",
        "interpolation": "progress [0, 0.7, 1] → intensity [0, 40, 0]",
        "effect": "Blur peaks at 70% through animation, fades out by end",
        "location": "Applied to square content"
      }
    }
  },
  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "outlineMode",
        "type": "SharedValue<boolean>",
        "purpose": "Toggle between normal and outline mode"
      },
      {
        "name": "blurIntensity",
        "type": "SharedValue<number>",
        "purpose": "Control button press blur effect"
      },
      {
        "name": "skiaPath",
        "type": "SharedValue<SkPath>",
        "purpose": "Store current Bezier curve path"
      },
      {
        "name": "progress",
        "type": "SharedValue<number>",
        "purpose": "Animation progress along path (0 to 1)"
      },
      {
        "name": "points",
        "type": "SharedValue<Point[]>",
        "purpose": "Sampled points along path for interpolation"
      },
      {
        "name": "controlPoint",
        "type": "SharedValue<{x: number, y: number}>",
        "count": 4,
        "purpose": "Each control point's position"
      }
    ],
    "derived_values": [
      {
        "name": "outlineModeProgress",
        "calculation": "withSpring(outlineMode.value ? 1 : 0)",
        "purpose": "Smooth transition value for mode changes"
      },
      {
        "name": "animatedBlurIntensity",
        "calculation": "withSpring(blurIntensity.value)",
        "purpose": "Smooth blur intensity transitions"
      },
      {
        "name": "squareSize",
        "calculation": "interpolate(progress.value, [0, 1], [64, 180])",
        "purpose": "Square dimensions based on animation progress"
      },
      {
        "name": "cx, cy",
        "calculation": "interpolate(progress, inputRange, points.x/y)",
        "purpose": "Current position along path"
      },
      {
        "name": "bezierPath",
        "calculation": "Constructs SkPath from control points",
        "purpose": "Main Bezier curve path",
        "updates": "Calls onPathUpdate callback"
      },
      {
        "name": "bezierPathVisualization",
        "calculation": "Two lines connecting control points",
        "purpose": "Visual guides for control point influence"
      }
    ],
    "useAnimatedReaction": {
      "watches": "pathReference.value",
      "triggers": "When path changes (control points moved)",
      "action": "Recalculates path points via scheduleOnRN",
      "thread_bridge": "UI thread path calculation → JS thread state update"
    },
    "worklet_functions": [
      "getPathPoints",
      "withCustomTiming",
      "onPathUpdate callback",
      "onUpdate (control point drag)",
      "PathGeometry methods"
    ]
  },
  "component_architecture": {
    "app_component": {
      "file": "src/index.tsx",
      "responsibilities": [
        "Orchestrate animation state",
        "Manage outline mode toggle",
        "Handle blur effects",
        "Coordinate path and square animations",
        "Layer management (z-index)"
      ],
      "state": {
        "outlineMode": "Toggle outline editor",
        "blurIntensity": "Screen blur for button press",
        "skiaPath": "Current Bezier path",
        "progress": "Animation progress (from hook)",
        "cx_cy": "Current position (from hook)"
      }
    },
    "bezier_outline": {
      "file": "src/components/bezier-outline.tsx",
      "responsibilities": [
        "Render Bezier curve",
        "Render control points",
        "Handle control point dragging",
        "Update path on changes",
        "Visualize control point influence"
      ],
      "props": {
        "onPathUpdate": {
          "type": "(path: SkPath) => void",
          "worklet": true,
          "purpose": "Callback when path changes"
        }
      },
      "control_points": 4,
      "visual_elements": [
        "Main Bezier curve (white, 40% opacity)",
        "Visualization lines (white, 10% opacity)",
        "Control point circles (filled, with stroke)",
        "Start/end points (12px radius)",
        "Control points (10px radius)"
      ]
    },
    "animated_square": {
      "file": "src/components/animated-square/index.tsx",
      "responsibilities": [
        "Render chess-themed square",
        "Display pawn icon",
        "Apply blur during animation",
        "Handle press interactions",
        "Animated size changes"
      ],
      "props": {
        "progress": "SharedValue<number>",
        "width": "SharedValue<number>",
        "height": "SharedValue<number>",
        "onPress": "() => void"
      },
      "layers": [
        "PressableScale container",
        "Chessboard pattern (8x8)",
        "AnimatedBlurView (z-index: 100)",
        "Pawn icon overlay"
      ],
      "styling": {
        "background_color": "#a5a5a5",
        "border_radius": 20,
        "border_curve": "continuous",
        "shadow": {
          "color": "#000",
          "offset": "{ width: 0, height: 2 }",
          "opacity": 0.2,
          "radius": 10
        }
      }
    },
    "chessboard_layout": {
      "file": "src/components/animated-square/chessboard-layout.tsx",
      "responsibilities": [
        "Render 8x8 alternating squares"
      ],
      "props": {
        "blackColor": "#AD8969",
        "whiteColor": "#ECD9B9"
      },
      "pattern": "(rowIndex + colIndex) % 2 === 0 ? white : black",
      "size": "8 rows × 8 columns = 64 squares"
    },
    "animated_blur_view": {
      "file": "src/components/animated-blur-view/index.tsx",
      "implementation": "Animated.createAnimatedComponent(BlurView)",
      "purpose": "Enable animated intensity prop on BlurView"
    }
  },
  "custom_hooks": {
    "useAnimateThroughPath": {
      "file": "src/hooks/useAnimateThroughPath/index.tsx",
      "purpose": "Animate an object along a Skia path",
      "props": {
        "pathReference": "SharedValue<SkPath>"
      },
      "returns": {
        "progress": "SharedValue<number> (0 to 1)",
        "startAnimation": "() => void",
        "reverseAnimation": "() => void",
        "cx": "SharedValue<number> (x coordinate)",
        "cy": "SharedValue<number> (y coordinate)"
      },
      "algorithm": {
        "step_1": "Sample path at every pixel using PathGeometry",
        "step_2": "Store points array",
        "step_3": "Create interpolation input range [0, 0.01, 0.02, ..., 1]",
        "step_4": "Create output range [point[0].x, point[1].x, ..., point[n].x]",
        "step_5": "Interpolate progress through points for cx/cy"
      },
      "path_recalculation": {
        "trigger": "pathReference changes (control points moved)",
        "reaction": "useAnimatedReaction → scheduleOnRN → assignPathPoints",
        "ensures": "Path updates reflected in animation"
      }
    },
    "useSharedControlPoint": {
      "file": "src/hooks/useSharedControlPoint.tsx",
      "purpose": "Manage a single control point with separate x/y derived values",
      "props": {
        "initialPoint": "Point (x, y)"
      },
      "returns": {
        "controlPoint": "SharedValue<Point>",
        "cx": "SharedValue<number> (derived from controlPoint.x)",
        "cy": "SharedValue<number> (derived from controlPoint.y)"
      },
      "pattern": "Decompose point object into separate x/y derived values",
      "benefit": "Enables independent x/y subscriptions"
    }
  },
  "path_geometry_class": {
    "file": "src/hooks/useAnimateThroughPath/utils/geometry.ts",
    "purpose": "Measure and sample points along a Skia path",
    "constructor": {
      "parameters": [
        "path: SkPath",
        "resScale: number = 1"
      ],
      "initialization": [
        "Create ContourMeasureIter from path",
        "Get first contour",
        "Calculate total length",
        "Store contour reference"
      ]
    },
    "methods": {
      "getTotalLength": {
        "returns": "number",
        "description": "Total length of path in pixels"
      },
      "getPointAtLength": {
        "parameters": [
          "length: number"
        ],
        "returns": "Point (x, y)",
        "description": "Get position at specific distance along path",
        "implementation": "contour.getPosTan(length)[0]"
      }
    },
    "private_properties": {
      "totalLength": "Cached path length",
      "contour": "SkContourMeasure instance"
    },
    "worklet_compatible": true
  },
  "interaction_patterns": {
    "outline_mode_toggle": {
      "trigger": "Press 'Outline Mode' button",
      "action": "outlineMode.value = !outlineMode.value",
      "effects": [
        "Fade out main content (opacity: 1 → 0)",
        "Fade in outline editor (opacity: 0 → 1)",
        "Switch pointer events",
        "Change button text color (#202020 → white)",
        "Background blur during press"
      ],
      "duration": "Spring animation (default spring config)"
    },
    "control_point_dragging": {
      "component": "Touchable.Circle",
      "events": [
        "onStart",
        "onActive"
      ],
      "action": "controlPoint.value = { x: event.x, y: event.y }",
      "worklet": true,
      "updates": [
        "Control point position",
        "Bezier path recalculation",
        "Path visualization lines",
        "Animation path points (if in outline mode)"
      ],
      "visual_feedback": "Circle moves with finger"
    },
    "animation_trigger": {
      "trigger": "Press animated square",
      "logic": "if (progress.value === 0) startAnimation() else reverseAnimation()",
      "forward": "Animates from start to end (progress: 0 → 1)",
      "reverse": "Animates from end to start (progress: 1 → 0)",
      "cancels_previous": "cancelAnimation(progress) before starting"
    },
    "button_press_blur": {
      "component": "PressableScale",
      "onPressIn": "blurIntensity.value = 65",
      "onPressOut": "blurIntensity.value = 0",
      "visual_effect": "Full-screen blur overlay appears while pressed"
    }
  },
  "visual_design": {
    "color_scheme": {
      "main_background": "#efefef (light gray)",
      "outline_background": "#111111 (near black)",
      "button_text_normal": "#202020 (dark gray)",
      "button_text_outline": "white",
      "bezier_curve": "rgba(255, 255, 255, 0.4)",
      "visualization_lines": "rgba(255, 255, 255, 0.1)",
      "control_points_stroke": "rgba(255, 255, 255, 0.4/0.2)",
      "control_points_fill": "#202020",
      "chessboard_black": "#AD8969 (tan)",
      "chessboard_white": "#ECD9B9 (light tan)",
      "square_background": "#a5a5a5 (gray)"
    },
    "layout": {
      "main_container": "flex: 1",
      "blur_overlay": "absolute fill, z-index: 100",
      "outline_editor": "absolute fill, toggleable",
      "main_content": "absolute fill, toggleable",
      "animated_square": "absolute positioned by cx/cy",
      "button": "absolute, bottom: 48px, centered, z-index: 2000"
    },
    "control_point_styling": {
      "start_end_points": {
        "radius": 12,
        "color": "rgba(255, 255, 255, 0.4)",
        "fill": "#202020"
      },
      "control_points": {
        "radius": 10,
        "color": "rgba(255, 255, 255, 0.2)",
        "fill": "#202020"
      },
      "stroke_width": 2
    },
    "square_styling": {
      "size_range": "64px to 180px",
      "border_radius": 20,
      "border_curve": "continuous",
      "shadow_elevation": 5,
      "icon_size": "48px × 48px",
      "icon": "Chess pawn (SVG)"
    },
    "typography": {
      "button_text": {
        "font_size": 14,
        "text_align": "center",
        "color": "animated (#202020 ↔ white)"
      }
    }
  },
  "performance_optimizations": {
    "skia_rendering": {
      "benefit": "GPU-accelerated path and control point rendering",
      "technique": "Direct Skia Canvas rendering, no React component overhead",
      "fps": "Smooth 60fps path updates and control point dragging"
    },
    "useDerivedValue_efficiency": {
      "bezier_path": "Recalculates only when control points change",
      "cx_cy": "Recalculates only when progress or points change",
      "square_size": "Recalculates only when progress changes"
    },
    "path_sampling_strategy": {
      "sample_rate": "Every 1 pixel",
      "benefit": "Smooth animation without over-sampling",
      "tradeoff": "Long paths = more points, but still performant"
    },
    "worklet_path_calculations": {
      "benefit": "Path geometry calculations run on UI thread",
      "functions": [
        "getPathPoints",
        "PathGeometry methods"
      ],
      "avoids": "Bridge crossing for intensive calculations"
    },
    "scheduled_updates": {
      "pattern": "scheduleOnRN for path point updates",
      "reason": "Path calculations on UI thread, state updates on JS thread",
      "benefit": "Proper thread coordination"
    },
    "animation_cancellation": {
      "implementation": "cancelAnimation(progress) before new animation",
      "benefit": "Prevents animation conflicts and ensures smooth transitions"
    }
  },
  "mathematical_insights": {
    "cubic_bezier_properties": {
      "control_points": 4,
      "degrees_of_freedom": 8,
      "curve_order": 3,
      "smoothness": "C² continuous (twice differentiable)",
      "tangent_start": "Direction from P0 to P1",
      "tangent_end": "Direction from P2 to P3"
    },
    "path_length_calculation": {
      "method": "ContourMeasureIter",
      "accuracy": "Exact measurement from Skia",
      "unit": "Pixels",
      "usage": "Determines number of sample points"
    },
    "interpolation_strategy": {
      "type": "Linear interpolation between sampled points",
      "input": "progress (0 to 1)",
      "input_range": "[0, 1/n, 2/n, ..., 1] where n = number of points",
      "output_range": "[point[0], point[1], ..., point[n]]",
      "dimension": "Separate interpolation for x and y",
      "benefit": "Constant-velocity animation along path"
    },
    "coordinate_transformation": {
      "square_position": "cx - squareSize/2, cy - squareSize/2",
      "reason": "Center square on path point (convert center point to top-left)"
    }
  },
  "initial_configuration": {
    "control_points": {
      "first": {
        "x": 140,
        "y": "height - 200",
        "description": "Start point (bottom-left)"
      },
      "second": {
        "x": "width - 100",
        "y": "height - 300",
        "description": "First control point (bottom-right)"
      },
      "third": {
        "x": "width - 100",
        "y": 300,
        "description": "Second control point (top-right)"
      },
      "fourth": {
        "x": 200,
        "y": 200,
        "description": "End point (top-left)"
      }
    },
    "initial_curve_shape": "S-curve from bottom-left to top-left",
    "square_size": {
      "start": 64,
      "end": 180
    },
    "animation_timing": {
      "duration": 1000,
      "easing": "bezier(0.455, 0.03, 0.515, 0.955)"
    },
    "blur_intensity": {
      "button_press": 65,
      "square_animation_peak": 40
    }
  },
  "use_cases": {
    "primary": [
      "Bezier curve visualization and education",
      "Path animation demonstrations",
      "Interactive curve editors",
      "Animation timing function visualizers"
    ],
    "educational": [
      "Teaching cubic Bezier curves",
      "Demonstrating control point influence",
      "Path-following animation techniques",
      "Skia path geometry APIs"
    ],
    "reusable_components": {
      "useAnimateThroughPath": [
        "Animate any element along custom paths",
        "Path-based navigation animations",
        "SVG animation playback",
        "Motion graphics"
      ],
      "PathGeometry": [
        "Path measurements",
        "Point sampling along paths",
        "Path analysis tools"
      ],
      "AnimatedBlurView": [
        "Any blur effect needing animation",
        "Focus/defocus transitions",
        "Depth-of-field effects"
      ],
      "ChessboardLayout": [
        "Chessboard patterns",
        "Grid backgrounds",
        "Alternating tile patterns"
      ]
    },
    "inspiration_for": [
      "SVG path editors",
      "Vector graphics tools",
      "Animation curve editors",
      "Interactive data visualizations"
    ]
  },
  "known_limitations": {
    "global_animation_state": {
      "issue": "SharedBezierPathSvgString in global-animation-state.ts is unused",
      "file": "src/global-animation-state.ts",
      "impact": "Dead code, can be removed"
    },
    "path_complexity": {
      "issue": "Only single cubic Bezier segment supported",
      "limitation": "Cannot create complex paths with multiple segments",
      "workaround": "Would need to extend to support path with multiple cubicTo() calls"
    },
    "control_point_constraints": {
      "issue": "No bounds checking on control point dragging",
      "impact": "Control points can be dragged off-screen",
      "enhancement": "Could add boundary clamping"
    },
    "path_recalculation_cost": {
      "issue": "Path points recalculated on every control point change",
      "impact": "Can be expensive for very long paths",
      "performance": "Generally fine, but worth noting"
    },
    "blur_platform_support": {
      "ios": "Full support for all blur effects",
      "android": "Limited blur support (depends on Android version)",
      "web": "No blur support"
    },
    "svg_icon_dependency": {
      "issue": "Hardcoded pawn.svg asset",
      "flexibility": "Not configurable without code change",
      "enhancement": "Could make icon prop-configurable"
    }
  },
  "potential_improvements": {
    "path_editing": [
      "Multi-segment Bezier paths",
      "Add/remove control points dynamically",
      "Quadratic Bezier option",
      "Path smoothing algorithms",
      "Snap-to-grid for control points"
    ],
    "animation_enhancements": [
      "Variable speed along path (ease in/out)",
      "Loop animation option",
      "Reverse animation on swipe",
      "Multiple objects on path simultaneously",
      "Custom easing function editor"
    ],
    "visualization": [
      "Show tangent vectors",
      "Display curve metrics (length, curvature)",
      "Animation path preview",
      "Onion skinning effect",
      "Control point coordinate display"
    ],
    "interaction": [
      "Pinch to zoom canvas",
      "Pan canvas with two fingers",
      "Undo/redo for control point moves",
      "Save/load curve presets",
      "Export as SVG or animation"
    ],
    "performance": [
      "Debounce path recalculation",
      "Adaptive sampling (more points on sharp curves)",
      "Path caching",
      "Lazy path point calculation"
    ]
  },
  "code_quality": {
    "typescript": "Full TypeScript with explicit types",
    "type_definitions": [
      "BezierOutlineProps",
      "AnimatedSquareProps",
      "ChessboardLayoutProps",
      "UseAnimateThroughPathProps",
      "Point",
      "SkPath",
      "SkContourMeasure"
    ],
    "separation_of_concerns": {
      "presentation": "Components focus on rendering",
      "logic": "Hooks encapsulate complex logic",
      "utilities": "PathGeometry class for geometry calculations",
      "constants": "Centralized configuration"
    },
    "worklet_annotations": {
      "usage": "Consistent 'worklet' directives",
      "locations": [
        "getPathPoints function",
        "withCustomTiming function",
        "onPathUpdate callback",
        "onUpdate (control point drag)"
      ]
    },
    "naming_conventions": {
      "components": "PascalCase",
      "hooks": "camelCase with 'use' prefix",
      "constants": "PascalCase (InitialPoints)",
      "animated_styles": "r prefix (rSquareStyle, rMainContentStyle)"
    },
    "file_organization": {
      "structure": "Clear separation of components, hooks, and utilities",
      "co_location": "Related files grouped in directories",
      "barrel_exports": "Clean index.tsx exports"
    }
  },
  "key_insights": {
    "path_following_pattern": "Pre-sample path points for smooth interpolation-based animation",
    "skia_gesture_integration": "react-native-skia-gesture enables touch on Canvas elements",
    "bezier_curve_flexibility": "Four control points provide precise curve shape control",
    "dual_mode_design": "Normal and outline modes provide both usage and editing views",
    "thread_coordination": "Worklets + scheduleOnRN for optimal performance",
    "svg_path_conversion": "toSVGString() enables path serialization and reconstruction",
    "blur_as_feedback": "Blur effects communicate state transitions and focus",
    "spring_transitions": "Spring animations create organic mode switching"
  },
  "learning_opportunities": {
    "for_beginners": [
      "Bezier curve basics",
      "Skia path rendering",
      "Touch interactions in React Native",
      "SharedValue state management",
      "Component composition"
    ],
    "for_intermediate": [
      "Path geometry and measurements",
      "Path-following animation techniques",
      "Skia gesture handlers",
      "useDerivedValue optimization",
      "Thread coordination with scheduleOnRN",
      "Interpolation strategies"
    ],
    "for_advanced": [
      "Custom animation hooks",
      "PathGeometry class design",
      "Performance optimization with path sampling",
      "Complex state coordination across components",
      "Worklet function design",
      "Real-time path calculations"
    ]
  },
  "testing_considerations": {
    "unit_tests": [
      "PathGeometry.getTotalLength() accuracy",
      "PathGeometry.getPointAtLength() returns correct positions",
      "getPathPoints samples correct number of points",
      "useSharedControlPoint returns correct derived values",
      "Control point initial positions"
    ],
    "integration_tests": [
      "Control point dragging updates path",
      "Animation follows path correctly",
      "Mode toggle transitions smoothly",
      "Button press triggers blur",
      "Square press starts/reverses animation"
    ],
    "visual_tests": [
      "Bezier curve renders correctly",
      "Control points draggable",
      "Visualization lines accurate",
      "Square follows path smoothly",
      "Blur effects visible",
      "Chessboard pattern correct"
    ],
    "edge_cases": [
      "Control points overlapping",
      "Control points off-screen",
      "Very short paths (< 2px)",
      "Very long paths (> 1000px)",
      "Rapid mode toggling",
      "Animation interruption",
      "Path changes during animation"
    ],
    "performance_tests": [
      "Path recalculation time",
      "FPS during animation",
      "FPS during control point dragging",
      "Memory usage with long paths"
    ]
  },
  "related_concepts": {
    "mathematical": [
      "Parametric curves",
      "Spline interpolation",
      "Path integrals",
      "Tangent vectors",
      "Curve continuity (C0, C1, C2)"
    ],
    "graphics": [
      "Vector graphics",
      "SVG paths",
      "Curve subdivision",
      "Path stroking",
      "Affine transformations"
    ],
    "animation": [
      "Timing functions",
      "Easing curves",
      "Path morphing",
      "Motion paths",
      "Keyframe animation"
    ],
    "applications": [
      "Vector design tools (Figma, Sketch)",
      "Animation software (After Effects)",
      "CSS animation curves",
      "Game path following",
      "Robot motion planning"
    ]
  },
  "comparison_to_similar_patterns": {
    "vs_linear_interpolation": {
      "bezier": "Smooth curves with control over shape",
      "linear": "Straight lines only",
      "use_bezier_when": "Natural, organic motion needed"
    },
    "vs_keyframe_animation": {
      "bezier_path": "Continuous path-based motion",
      "keyframes": "Discrete position keyframes",
      "benefit": "Bezier ensures smooth path without manual positioning"
    },
    "vs_physics_simulation": {
      "bezier": "Deterministic, reproducible path",
      "physics": "Dynamic, responsive to forces",
      "use_bezier_when": "Precise control over motion needed"
    },
    "vs_lottie": {
      "this_animation": "Interactive, customizable, runtime-editable",
      "lottie": "Pre-rendered, fixed animation",
      "benefit": "Real-time curve editing and custom paths"
    }
  },
  "accessibility_considerations": {
    "current_state": "No accessibility features implemented",
    "recommendations": [
      "Reduced motion support (disable blur effects)",
      "Keyboard navigation for control points",
      "Screen reader descriptions",
      "High contrast mode support",
      "Haptic feedback on control point snap"
    ],
    "interaction_challenges": {
      "control_point_dragging": "Difficult for users with motor impairments",
      "small_touch_targets": "Control points could be larger",
      "visual_only_feedback": "No audio or haptic feedback"
    }
  },
  "bundle_size_impact": {
    "code_size": "Medium (~400 lines total)",
    "dependencies": [
      "Skia (likely already in project)",
      "Reanimated (likely already in project)",
      "react-native-skia-gesture (specialized)",
      "expo-blur (common)",
      "pressto (common)"
    ],
    "new_dependencies": [
      "react-native-skia-gesture"
    ],
    "estimated_size": "~15-20KB (mostly PathGeometry logic)"
  },
  "platform_considerations": {
    "ios": {
      "features": "Full support for all features",
      "blur": "Excellent blur support",
      "performance": "Smooth 60fps"
    },
    "android": {
      "features": "Full support except blur limitations",
      "blur": "Limited or no blur on older devices",
      "performance": "Smooth 60fps on modern devices",
      "skia": "Excellent Skia support"
    },
    "web": {
      "features": "Most features work",
      "blur": "No blur support",
      "skia": "Skia Web works",
      "gestures": "Touch and mouse supported",
      "note": "Not officially tested for this animation"
    }
  },
  "tags": [
    "bezier-curve",
    "path-animation",
    "skia",
    "reanimated",
    "interactive",
    "gesture",
    "path-following",
    "curve-editor",
    "mathematical",
    "visualization",
    "blur-effects",
    "chess-theme",
    "control-points",
    "cubic-bezier",
    "path-geometry",
    "educational",
    "graphics"
  ],
  "content_hash": "acba0abdc15d4f2119d188cae522f499d2d59a28d228003f6ec090b619909557",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.287Z",
  "last_validated": "2025-10-12T09:19:28.288Z"
}
