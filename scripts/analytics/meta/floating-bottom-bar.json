{
  "animation_name": "Floating Bottom Bar",
  "animation_slug": "floating-bottom-bar",
  "description": "A modern floating bottom tab bar navigation component featuring a Skia-rendered animated light shader that follows tab selection with smooth timing animations. The tab bar integrates seamlessly with React Navigation's bottom tabs and includes dynamic opacity animations on icons. The shader light effect creates a spotlight-like gradient that transitions horizontally across tabs using a custom trapezoid path with rounded edges and a linear gradient from white to transparent.",
  "main_features": [
    "Floating black pill-shaped tab bar with rounded corners",
    "Animated shader light spotlight following active tab",
    "Custom Skia shader with trapezoid path and linear gradient",
    "Smooth horizontal translation of light indicator with timing animation",
    "Icon opacity animations (active 100%, inactive 50%)",
    "Integration with React Navigation bottom tabs",
    "Safe area insets support for notched devices",
    "Dynamic tab width calculations based on screen size",
    "Five-tab navigation (Home, Bookmark, Add, Profile, Settings)",
    "Icon-based navigation using Expo vector icons",
    "GPU-accelerated Skia rendering for light effect",
    "Responsive sizing (95% of screen width)"
  ],
  "file_structure": {
    "index.tsx": "Main demo app with bottom tab navigator and five screens",
    "components/bottom-tab-bar/index.tsx": "Core tab bar with Skia shader light and tab items",
    "components/bottom-tab-bar/shader-light/index.tsx": "Skia Canvas component rendering animated trapezoid light gradient",
    "components/bottom-tab-bar/animated-opacity-view/index.tsx": "Wrapper component for icon opacity animations based on focus state",
    "constants/screens.ts": "Screen names configuration object"
  },
  "core_technologies": {
    "rendering": "@shopify/react-native-skia",
    "animations": "react-native-reanimated",
    "navigation": "@react-navigation/bottom-tabs",
    "layout": "react-native-safe-area-context",
    "icons": "@expo/vector-icons"
  },
  "packages_and_versions": {
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "usage": "Custom shader light rendering with path and gradient",
      "components": [
        "Canvas",
        "Path",
        "RoundedRect",
        "LinearGradient"
      ],
      "utilities": [
        "Skia"
      ],
      "methods": [
        "Skia.Path.Make()",
        "moveTo()",
        "lineTo()",
        "close()"
      ],
      "critical_feature": "Path API for creating custom trapezoid shape with linear gradient",
      "performance_reason": "GPU-accelerated gradient rendering for smooth light animation"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "usage": "Smooth animations for light position and icon opacity",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedStyle",
        "withTiming"
      ],
      "components": [
        "Animated.View"
      ],
      "critical_feature": "useDerivedValue for reactive light position calculation and opacity state"
    },
    "@react-navigation/bottom-tabs": {
      "version": "^7.4.0",
      "components": [
        "createBottomTabNavigator"
      ],
      "types": [
        "BottomTabBarProps"
      ],
      "usage": "Bottom tab navigation structure with custom tab bar renderer"
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "hooks": [
        "useSafeAreaInsets"
      ],
      "usage": "Dynamic bottom positioning for notched devices (iPhone home indicator)",
      "position_calculation": "bottom: bottom (safe area inset)"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "components": [
        "Feather",
        "Ionicons",
        "Octicons"
      ],
      "icons_used": [
        "home (Octicons)",
        "bookmark (Feather)",
        "add-circle-outline (Ionicons)",
        "person (Octicons)",
        "settings-sharp (Ionicons)"
      ],
      "usage": "Tab bar icons with 24px size, white color"
    }
  },
  "animation_techniques": {
    "shader_light_translation": {
      "pattern": "Horizontal translation based on selected tab index",
      "shared_value": "selectedAnimatedIndex = useDerivedValue(() => withTiming(currentIndex))",
      "animation": "withTiming (default duration ~300ms)",
      "calculation": "translateX = selectedAnimatedIndex.value * singleTabWidth",
      "singleTabWidth": "(tabBarWidth - 0.1 * tabBarWidth) / 5",
      "effect": "Light spotlight smoothly slides to newly selected tab",
      "key_insight": "Single tab width accounts for 5% horizontal padding on each side"
    },
    "trapezoid_path_construction": {
      "pattern": "Custom Skia Path for spotlight shape",
      "shape": "Trapezoid (narrower at top, wider at bottom)",
      "path_steps": [
        "1. moveTo(internalCanvasHorizontalPadding * 3, 0) - top left",
        "2. lineTo(width - internalCanvasHorizontalPadding * 3, 0) - top right",
        "3. lineTo(width, height) - bottom right",
        "4. lineTo(0, height) - bottom left",
        "5. close() - complete path"
      ],
      "padding": "internalCanvasHorizontalPadding = 5px",
      "dimensions": {
        "top_width": "width - 30px (15px inset on each side)",
        "bottom_width": "full width",
        "height": "65px (tab bar height)"
      },
      "visual_effect": "Creates expanding light beam effect from narrow top to wide bottom"
    },
    "linear_gradient_shader": {
      "component": "LinearGradient",
      "start": "{ x: 0, y: 0 } (top)",
      "end": "{ x: 0, y: height } (bottom)",
      "colors": "['white', 'transparent']",
      "opacity": "0.5 (50% opacity on Path)",
      "effect": "White fades to transparent from top to bottom, creating soft spotlight",
      "purpose": "Highlights active tab without overwhelming the design"
    },
    "rounded_indicator_bar": {
      "component": "RoundedRect",
      "dimensions": {
        "x": "internalCanvasHorizontalPadding (5px)",
        "y": "0",
        "width": "canvasWidth - 10px",
        "height": "7px"
      },
      "color": "white",
      "borderRadius": "20px (r prop)",
      "effect": "Small rounded bar at top of light spotlight",
      "purpose": "Provides clear indicator of active tab position"
    },
    "icon_opacity_animation": {
      "pattern": "Opacity interpolation based on focus state",
      "component": "AnimatedOpacityView",
      "active_opacity": "withTiming(1)",
      "inactive_opacity": "withTiming(0.5)",
      "timing": "Default timing (likely ~300ms)",
      "effect": "Active tab icon at full opacity, inactive at 50%",
      "smooth_transition": "withTiming provides fade effect on tab change"
    },
    "focus_state_tracking": {
      "pattern": "useDerivedValue checks if activeIndex matches item index",
      "calculation": "isFocused = activeIndex.value === index",
      "reactive": "Automatically updates when activeIndex changes",
      "scope": "Each AnimatedOpacityView has its own derived focus state",
      "benefit": "Individual icon opacity animations without re-renders"
    }
  },
  "skia_patterns": {
    "canvas_rendering": {
      "component": "Canvas",
      "dimensions": {
        "width": "singleTabWidth (calculated from screen width)",
        "height": "65px"
      },
      "children": [
        "Path - Trapezoid shape with gradient",
        "RoundedRect - Top indicator bar"
      ],
      "positioning": "Absolute positioned with animated translateX",
      "z_index": "10 (above tab items)"
    },
    "path_with_gradient": {
      "pattern": "Path component with LinearGradient child",
      "path_prop": "Custom Skia path (trapezoid)",
      "color": "white",
      "opacity": "0.5",
      "gradient_application": "LinearGradient as child applies to entire path",
      "effect": "Gradient colors override base color, creating fade effect"
    },
    "useMemo_for_path": {
      "pattern": "useMemo to create Skia path once",
      "dependencies": [
        "height",
        "width"
      ],
      "benefit": "Path only recreated when dimensions change",
      "optimization": "Prevents path allocation on every render",
      "critical": "Skia paths are expensive to create"
    }
  },
  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "focusedIndex",
        "scope": "BottomTabBar (implicit via state.index)",
        "type": "number",
        "initial": "state.index (from React Navigation)",
        "updates": "Automatically via navigation state changes"
      }
    ],
    "derived_values": [
      {
        "name": "selectedAnimatedIndex",
        "calculation": "withTiming(currentIndex)",
        "dependencies": [
          "currentIndex"
        ],
        "type": "SharedValue<number>",
        "purpose": "Smooth animated tab index for light position",
        "timing": "Default timing configuration"
      },
      {
        "name": "isFocused",
        "scope": "AnimatedOpacityView",
        "calculation": "activeIndex.value === index",
        "dependencies": [
          "activeIndex",
          "index"
        ],
        "type": "boolean",
        "purpose": "Per-icon focus state for opacity calculation"
      }
    ],
    "animated_styles": [
      {
        "name": "rShaderLightStyle",
        "scope": "BottomTabBar",
        "properties": [
          "transform: [{ translateX }]"
        ],
        "calculation": "translateX = selectedAnimatedIndex.value * singleTabWidth",
        "dependencies": [
          "singleTabWidth"
        ],
        "usage": "Animates shader light horizontal position"
      },
      {
        "name": "rStyle",
        "scope": "AnimatedOpacityView",
        "properties": [
          "opacity"
        ],
        "calculation": "withTiming(activeIndex.value === index ? 1 : 0.5)",
        "dependencies": [
          "index"
        ],
        "usage": "Fades icons based on focus state"
      }
    ],
    "useCallback_optimization": {
      "getIconByScreenName": {
        "dependencies": "[]",
        "purpose": "Map screen name to icon component",
        "memoization": "Prevents icon recreation on every render",
        "returns": "JSX.Element (Expo vector icon)"
      }
    }
  },
  "navigation_patterns": {
    "bottom_tab_navigator": {
      "library": "@react-navigation/bottom-tabs",
      "creation": "createBottomTabNavigator()",
      "screens": [
        "Home",
        "Bookmark",
        "Add",
        "Profile",
        "Settings"
      ],
      "custom_tab_bar": {
        "prop": "tabBar",
        "value": "useCallback((props: BottomTabBarProps) => <BottomTabBar {...props} />)",
        "purpose": "Replace default tab bar with custom implementation"
      }
    },
    "screen_configuration": {
      "pattern": "ScreenNames object with const assertion",
      "definition": "{ Home: 'Home', Bookmark: 'Bookmark', Add: 'Add', Profile: 'Profile', Settings: 'Settings' } as const",
      "type_safety": "TypeScript const assertion for literal types",
      "usage": "Object.values(ScreenNames) for iteration in tab bar mapping"
    },
    "navigation_triggering": {
      "pattern": "onTouchEnd callback on each tab item",
      "implementation": "onTouchEnd={() => { navigation.navigate(screenName); }}",
      "component": "AnimatedOpacityView (wraps icon)",
      "benefit": "Simple touch handling without gesture library"
    },
    "state_synchronization": {
      "navigation_state": "state.index from BottomTabBarProps",
      "animation_state": "selectedAnimatedIndex SharedValue",
      "flow": "state.index → useDerivedValue(withTiming) → light position animation",
      "benefit": "Navigation state automatically drives shader light animation"
    }
  },
  "component_architecture": {
    "FloatingBottomBar": {
      "type": "Main exported component",
      "structure": "BottomTab.Navigator with custom tabBar",
      "screens": [
        "Home - Empty View",
        "Bookmark - Empty View",
        "Add - Empty View",
        "Profile - Empty View",
        "Settings - Empty View"
      ],
      "tab_bar_callback": "useCallback((props) => <BottomTabBar {...props} />, [])",
      "responsibility": "Demo app setup and navigation configuration"
    },
    "BottomTabBar": {
      "type": "Functional component",
      "props": "BottomTabBarProps (state, navigation)",
      "structure": [
        "Animated.View (container with safe area positioning)",
        "Animated.View (shader light container with translateX animation)",
        "ShaderLight (Skia Canvas)",
        "AnimatedOpacityView components (mapped from ScreenNames)"
      ],
      "calculations": {
        "currentIndex": "state.index",
        "selectedAnimatedIndex": "useDerivedValue(() => withTiming(currentIndex))",
        "tabBarWidth": "screenWidth * 0.95",
        "singleTabWidth": "(tabBarWidth - 0.1 * tabBarWidth) / 5"
      },
      "styling": {
        "backgroundColor": "#000000 (black)",
        "borderRadius": "20px",
        "height": "65px",
        "paddingHorizontal": "5% (of tabBarWidth)",
        "position": "absolute",
        "bottom": "bottom (safe area inset)"
      }
    },
    "ShaderLight": {
      "type": "Memoized functional component (implicit)",
      "props": {
        "width": "number - Canvas width (singleTabWidth)",
        "height": "number - Canvas height (65px)"
      },
      "structure": [
        "Canvas",
        "Path with LinearGradient (trapezoid shape)",
        "RoundedRect (top indicator bar)"
      ],
      "constants": {
        "internalCanvasHorizontalPadding": "5px"
      },
      "responsibility": "Render animated light spotlight using Skia"
    },
    "AnimatedOpacityView": {
      "type": "Functional component",
      "props": {
        "activeIndex": "SharedValue<number> - Currently active tab index",
        "index": "number - This item's index",
        "style": "ViewProps['style']",
        "...viewProps": "Spread ViewProps"
      },
      "structure": "Animated.View with opacity animation and children passthrough",
      "responsibility": "Wrap icon with opacity animation based on focus state"
    }
  },
  "visual_design": {
    "color_scheme": {
      "tab_bar_background": "#000000 (black)",
      "shader_light": "white to transparent gradient (50% opacity)",
      "indicator_bar": "white (solid)",
      "icon_color": "white",
      "icon_opacity_active": "100%",
      "icon_opacity_inactive": "50%"
    },
    "dimensions": {
      "tab_bar": {
        "width": "95% of screen width",
        "height": "65px",
        "borderRadius": "20px (pill shape)",
        "paddingHorizontal": "5% of tabBarWidth",
        "bottom_offset": "bottom safe area inset"
      },
      "shader_light": {
        "width": "singleTabWidth",
        "height": "65px",
        "trapezoid_top_inset": "15px each side (3 * 5px padding)",
        "indicator_bar_height": "7px"
      },
      "icons": {
        "size": "24px",
        "color": "white",
        "spacing": "Equal distribution across 5 tabs"
      }
    },
    "positioning": {
      "tab_bar": "position: absolute, bottom: bottom (safe area), alignSelf: center",
      "shader_light": "position: absolute, left: 0.05 * tabBarWidth, zIndex: 10",
      "icons": "flexDirection: row with flex: 1 for equal spacing",
      "layering": "Shader light above icons (z-index 10 vs default)"
    },
    "layout": {
      "tab_distribution": "flexDirection: row, equal flex: 1 for each tab",
      "tab_item_layout": "alignItems: center, justifyContent: center",
      "responsive": "Tab bar width and light position scale with screen size"
    }
  },
  "responsive_calculations": {
    "screen_width_dependency": {
      "hook": "useWindowDimensions()",
      "usage": "screenWidth for tab bar and light calculations",
      "reactive": "Updates on orientation change or window resize"
    },
    "tab_bar_width": {
      "formula": "screenWidth * 0.95",
      "purpose": "Floating effect with margins on each side",
      "margin_percentage": "2.5% on each side"
    },
    "single_tab_width": {
      "formula": "(tabBarWidth - 0.1 * tabBarWidth) / 5",
      "breakdown": {
        "tabBarWidth": "95% of screen width",
        "0.1 * tabBarWidth": "Total horizontal padding (5% each side)",
        "divide_by": "5 tabs",
        "example": "On 375px screen: (356.25 - 35.625) / 5 = 64.125px per tab"
      },
      "purpose": "Calculate width for each tab and shader light canvas"
    },
    "shader_light_position": {
      "formula": "translateX = selectedAnimatedIndex.value * singleTabWidth",
      "start_position": "left: 0.05 * tabBarWidth (accounts for padding)",
      "example": "Tab 0 = 0px, Tab 1 = 64.125px, Tab 2 = 128.25px, etc.",
      "smooth_animation": "withTiming interpolates between positions"
    }
  },
  "performance_optimizations": {
    "useDerivedValue_for_animation": {
      "pattern": "useDerivedValue wraps withTiming for reactive animation",
      "benefit": "Animation runs entirely on UI thread, no JS thread blocking",
      "critical": "Smooth 60fps light translation without bridge crossing"
    },
    "useMemo_for_path": {
      "component": "ShaderLight path construction",
      "dependencies": [
        "height",
        "width"
      ],
      "benefit": "Path only recreated when dimensions change",
      "prevents": "Expensive Skia path allocation on every render"
    },
    "useCallback_for_icon_mapping": {
      "function": "getIconByScreenName",
      "dependencies": "[]",
      "benefit": "Stable function reference prevents child re-renders",
      "memoization": "Icon components not recreated on every render"
    },
    "skia_gpu_rendering": {
      "pattern": "ShaderLight uses Skia Canvas",
      "benefit": "GPU-accelerated gradient rendering",
      "vs_views": "More efficient than View-based gradient implementations",
      "critical": "Smooth light animation without CPU overhead"
    },
    "animated_view_optimization": {
      "pattern": "AnimatedOpacityView separates opacity logic",
      "benefit": "Only opacity updates, no layout recalculation",
      "isolation": "Each icon's opacity animation isolated from others"
    }
  },
  "layout_and_positioning": {
    "absolute_positioning": {
      "tab_bar": "position: absolute, bottom: bottom (safe area), width: tabBarWidth",
      "shader_light": "position: absolute, left: 0.05 * tabBarWidth, zIndex: 10",
      "z_layering": "Shader light explicitly above icons via zIndex"
    },
    "safe_area_handling": {
      "hook": "useSafeAreaInsets()",
      "bottom_inset": "Used for tab bar bottom positioning",
      "calculation": "bottom: bottom (directly from safe area insets)",
      "purpose": "Keeps tab bar above iPhone home indicator and Android gesture area",
      "devices": "Essential for iPhone X+ and modern Android devices"
    },
    "centering_strategy": {
      "tab_bar": "alignSelf: center (horizontally centered)",
      "icons": "flex: 1 with alignItems: center, justifyContent: center",
      "benefit": "Automatic centering without explicit left/right calculations"
    },
    "flex_distribution": {
      "tab_bar": "flexDirection: row",
      "tab_items": "flex: 1 for equal width distribution",
      "alignment": "alignItems: center, justifyContent: center per tab",
      "result": "Icons evenly spaced across tab bar width"
    }
  },
  "use_cases": {
    "primary": [
      "Bottom navigation for mobile apps with modern design",
      "Icon-only navigation with visual focus indicator",
      "Apps requiring subtle yet clear tab selection feedback",
      "Dark theme applications with light accent effects",
      "Five-tab navigation patterns"
    ],
    "real_world_examples": [
      "Media streaming apps with home/browse/profile navigation",
      "Social media apps with multiple main sections",
      "Productivity apps with tool/feature switching",
      "E-commerce apps with browse/favorites/cart/profile tabs",
      "News apps with sections/bookmarks/profile navigation"
    ],
    "design_patterns": [
      "Floating navigation elements",
      "Spotlight-style focus indicators",
      "Minimal dark theme navigation",
      "Icon-first navigation design",
      "Gradient-based visual feedback"
    ]
  },
  "code_quality": {
    "typescript": {
      "coverage": "Full TypeScript with explicit types",
      "type_definitions": [
        "BottomTabBarProps (from React Navigation)",
        "FC type annotations",
        "HighlightedPathProps interface",
        "ViewProps extension for AnimatedOpacityView"
      ],
      "type_imports": "type keyword for type-only imports",
      "const_assertions": "'as const' for ScreenNames"
    },
    "component_separation": {
      "index.tsx": "Demo app and navigation setup",
      "bottom-tab-bar/index.tsx": "Core tab bar logic and layout",
      "shader-light/index.tsx": "Skia light rendering logic",
      "animated-opacity-view/index.tsx": "Icon opacity animation wrapper",
      "screens.ts": "Screen name constants"
    },
    "constants_extraction": {
      "ScreenNames": "Screen configuration object",
      "styles": "StyleSheet.create for tab bar and icon container",
      "internalCanvasHorizontalPadding": "5px for path calculation"
    },
    "best_practices": [
      "Separation of concerns (navigation, rendering, animation)",
      "Type-safe screen names with const assertion",
      "useCallback for stable function references",
      "useMemo for expensive calculations",
      "useDerivedValue for reactive animations",
      "Clean component composition"
    ],
    "inline_documentation": {
      "comments": "Minimal but clear naming",
      "calculation_clarity": "Comments explain tab width calculation",
      "padding_explanation": "Inline comment for 5% padding consideration"
    }
  },
  "known_limitations": {
    "five_tab_hardcoding": {
      "issue": "Single tab width calculation divides by 5",
      "limitation": "Adding/removing tabs requires updating the divisor",
      "current_code": "(tabBarWidth - 0.1 * tabBarWidth) / 5",
      "improvement": "Could use Object.keys(ScreenNames).length or tabs count prop"
    },
    "icon_mapping": {
      "issue": "getIconByScreenName switch statement for icon mapping",
      "limitation": "Adding new screens requires code changes",
      "scalability": "Not easily configurable without code modification",
      "improvement": "Could accept icon configuration as props or from constants"
    },
    "empty_screen_components": {
      "issue": "All screens render empty View components",
      "limitation": "Demo-only implementation, not real screens",
      "purpose": "Navigation demo, not full app example"
    },
    "fixed_colors": {
      "issue": "Black background and white icons/light hardcoded",
      "customization": "No theming or color prop support",
      "improvement": "Could accept color scheme via props or theme context"
    },
    "no_labels": {
      "issue": "Icon-only navigation, no text labels",
      "limitation": "Users rely solely on icon recognition",
      "accessibility_impact": "May be unclear for new users or screen reader users",
      "improvement": "Could add optional labels with fade animations"
    },
    "accessibility": {
      "missing": "No accessibility labels on tab items",
      "screen_reader": "Icons not announced to screen readers",
      "keyboard": "No keyboard navigation support",
      "touch_targets": "Touch areas not explicitly sized (relies on flex layout)"
    },
    "shader_light_overlap": {
      "issue": "Shader light stays fixed width, may not perfectly align on all screens",
      "responsive": "Works well but slight variations possible on extreme screen sizes",
      "improvement": "Could add responsive width adjustments"
    }
  },
  "potential_improvements": {
    "interaction_enhancements": [
      "Haptic feedback on tab press",
      "Press scale animation on icons",
      "Long press for contextual actions",
      "Swipe gestures to switch tabs",
      "Badge notifications on tab icons",
      "Icon morph animations"
    ],
    "visual_refinements": [
      "Optional text labels below icons",
      "Icon color change on focus (not just opacity)",
      "Multiple light effect styles (circular spotlight, underline, etc.)",
      "Glow effect on active tab",
      "Shadow beneath tab bar for depth",
      "Animated background that follows active tab",
      "Icon scale animation on selection"
    ],
    "customization_options": [
      "Configurable tab bar colors via props",
      "Custom shader light styles",
      "Adjustable bar dimensions (height, width percentage, border radius)",
      "Icon size configuration",
      "Animation duration props",
      "Custom icon components (not just Expo icons)",
      "Dynamic tab count support"
    ],
    "accessibility": [
      "Accessibility labels for tabs",
      "Screen reader announcements on tab change",
      "Keyboard navigation support",
      "Minimum touch target sizes (44x44pt)",
      "High contrast mode support",
      "Reduce motion preference (instant transitions)",
      "Focus indicators for keyboard users"
    ],
    "functionality": [
      "Badge counters on tabs",
      "Tab labels with show/hide animation",
      "More than 5 tabs with scrollable tab bar",
      "Custom icon sources (SVG, images, custom components)",
      "Tab press and hold menu",
      "Floating action button integration",
      "Middle tab as special action button"
    ],
    "performance": [
      "Memoize AnimatedOpacityView to prevent re-renders",
      "Optimize shader light canvas size",
      "Lazy load tab screens",
      "Reduce re-renders with stable refs",
      "Dynamic tab count calculation"
    ],
    "code_improvements": [
      "Extract tab count to constant or calculate from ScreenNames",
      "Icon configuration object instead of switch statement",
      "Separate icon mapping to constants file",
      "Props for customization (colors, dimensions, icons)",
      "Theme context integration"
    ]
  },
  "key_insights": {
    "skia_for_light_effect": "Skia Canvas with gradient provides GPU-accelerated light effect impossible with basic Views",
    "trapezoid_creates_spotlight": "Custom trapezoid path creates expanding light beam effect from narrow top to wide bottom",
    "derived_value_timing": "useDerivedValue wrapping withTiming enables reactive animations on UI thread",
    "opacity_for_focus": "Simple opacity animation (100% to 50%) effectively indicates active tab without complex animations",
    "absolute_positioning_layering": "Absolute positioned shader light with zIndex creates floating spotlight above icons",
    "safe_area_essential": "Safe area insets critical for modern devices with home indicators and gesture navigation",
    "responsive_calculation": "Tab width calculation considering padding ensures light aligns perfectly with tab centers",
    "95_percent_width": "95% width creates floating effect while maintaining touch targets near screen edges"
  },
  "learning_opportunities": {
    "for_beginners": [
      "React Navigation bottom tabs setup",
      "Custom tab bar implementation basics",
      "Safe area handling for notched devices",
      "Basic Skia Canvas usage",
      "Simple opacity animations with Reanimated",
      "Touch event handling with onTouchEnd"
    ],
    "for_intermediate": [
      "Custom Skia path construction with Path API",
      "Linear gradients in Skia",
      "useDerivedValue for reactive calculations",
      "Animated style with translateX",
      "Dynamic tab width calculations",
      "Icon mapping patterns",
      "Responsive layout with window dimensions",
      "Component composition patterns"
    ],
    "for_advanced": [
      "GPU-accelerated UI with Skia",
      "Performance optimization with useMemo and useCallback",
      "Complex responsive calculations for animations",
      "UI thread animations with Reanimated",
      "Custom navigation tab bar architecture",
      "Layering strategies with absolute positioning and zIndex",
      "Creating reusable animated wrapper components",
      "Integrating Skia with React Navigation"
    ]
  },
  "comparison_to_similar_patterns": {
    "vs_blurred_bottom_bar": {
      "similarity": "Both custom bottom navigation bars with React Navigation",
      "difference": "Shader light spotlight vs glassmorphic blur, black pill vs translucent"
    },
    "vs_bottom_bar_skia": {
      "similarity": "Both use Skia for visual effects, custom tab bars",
      "difference": "Trapezoid light gradient vs circular cutout, 5 tabs vs 3 tabs, simpler interaction"
    },
    "vs_default_react_navigation_tab_bar": {
      "similarity": "Same BottomTabBarProps interface",
      "difference": "Custom Skia light effect vs default styling, floating design vs full-width"
    },
    "vs_material_bottom_navigation": {
      "similarity": "Bottom navigation pattern",
      "difference": "Custom light effect vs Material ripple, icon-only vs labels"
    }
  },
  "testing_considerations": {
    "visual_regression": [
      "Tab bar renders with correct dimensions and position",
      "Shader light renders with trapezoid shape and gradient",
      "Icons render with correct size, color, and spacing",
      "Safe area padding applied correctly on notched devices",
      "Tab bar width scales correctly on different screen sizes"
    ],
    "interaction_testing": [
      "Tapping tab switches screens",
      "Shader light animates to selected tab",
      "Icon opacity transitions on tab change",
      "All tabs accessible and functional",
      "Touch targets work correctly"
    ],
    "animation_testing": [
      "Light translation smooth (no sudden jumps)",
      "Opacity transitions smooth on tab change",
      "Animation timing consistent",
      "No animation stuttering on rapid tab switching",
      "Animations complete correctly"
    ],
    "navigation_testing": [
      "Navigation between tabs works correctly",
      "Initial route renders correctly",
      "Navigation state syncs with animations",
      "Tab switching during animation handled gracefully"
    ],
    "responsive_testing": [
      "Tab bar scales correctly on different screen widths",
      "Light position aligns with tabs on all screen sizes",
      "Layout works on small devices (< 375px width)",
      "Layout works on large devices (tablets, > 768px width)",
      "Orientation changes handled correctly"
    ],
    "edge_cases": [
      "Rapid tab switching",
      "Tab switching during animation",
      "Very narrow screens (< 320px)",
      "Very wide screens (tablets, > 1024px)",
      "Extreme safe area insets"
    ]
  },
  "accessibility_considerations": {
    "current_state": {
      "labels": "No accessibility labels on tab items",
      "roles": "No accessibility roles defined",
      "announcements": "No screen reader announcements",
      "keyboard": "No keyboard navigation",
      "reduced_motion": "No prefers-reduced-motion support",
      "touch_targets": "Relies on flex layout, not explicitly sized"
    },
    "recommendations": [
      "Add accessibilityLabel to AnimatedOpacityView ('Home tab', 'Bookmark tab', etc.)",
      "Add accessibilityHint ('Double tap to go to {screen}')",
      "Add accessibilityRole='button' or 'tab'",
      "Add accessibilityState={{selected: isFocused}} for active tab indication",
      "Announce tab changes to screen reader",
      "Ensure minimum touch target size 44x44pt",
      "Support keyboard navigation (arrow keys to switch tabs)",
      "Respect reduce motion (instant transitions instead of animations)",
      "Add focus indicators for keyboard users",
      "Test with VoiceOver and TalkBack",
      "Consider adding optional labels for clarity"
    ]
  },
  "related_patterns": {
    "custom_tab_bars": "Other custom bottom navigation implementations",
    "skia_effects": "Visual effects built with React Native Skia",
    "spotlight_indicators": "Tab indicators with spotlight/highlight effects",
    "floating_navigation": "Navigation elements that float above content",
    "gradient_effects": "UI elements using gradient shaders"
  },
  "state_management": {
    "navigation_state": {
      "managed_by": "React Navigation",
      "current_tab": "state.index from BottomTabBarProps",
      "routes": "state.routes array"
    },
    "animation_state": {
      "selectedAnimatedIndex": "SharedValue tracking animated tab index",
      "per_icon_opacity": "Derived from activeIndex in each AnimatedOpacityView"
    },
    "synchronization": {
      "pattern": "Navigation state → useDerivedValue → animations",
      "flow": "state.index → withTiming → light translateX and icon opacity",
      "benefit": "Automatic animation synchronization with navigation"
    }
  },
  "bundle_size_impact": {
    "code_size": "~150 lines total (all components)",
    "dependencies": "Skia, Reanimated, React Navigation (likely already in project)",
    "runtime_memory": "Minimal - few SharedValues, one Skia path, icons",
    "gpu_memory": "Low - simple gradient, no textures",
    "performance": "Excellent - GPU-accelerated with minimal calculations"
  },
  "platform_considerations": {
    "ios": {
      "features": "All features fully supported",
      "performance": "Excellent GPU acceleration",
      "safe_area": "Home indicator padding handled correctly"
    },
    "android": {
      "features": "All features fully supported",
      "performance": "Excellent GPU acceleration",
      "safe_area": "Gesture navigation area padding handled correctly"
    },
    "web": {
      "compatibility": "Skia has CanvasKit backend for web",
      "performance": "Good, may be slightly slower than native",
      "note": "Requires react-native-web configuration"
    }
  },
  "tags": [
    "bottom-navigation",
    "tab-bar",
    "floating-ui",
    "skia",
    "shader-light",
    "spotlight-effect",
    "gradient",
    "reanimated",
    "react-navigation",
    "opacity-animation",
    "translation-animation",
    "safe-area",
    "responsive",
    "dark-theme",
    "icon-navigation",
    "gpu-rendering",
    "path-api"
  ],
  "content_hash": "c9e0ad9ddf9a88584975d63cbdc2d3538a04a4e9852320ccd630c254b52efc4e",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.345Z",
  "last_validated": "2025-10-12T09:19:28.345Z"
}
