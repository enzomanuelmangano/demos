{
  "animation_name": "Split Button",
  "animation_slug": "split-button",
  "description": "An elegant split button interaction that transforms from a single action button into two separate options. Features smooth spring-based animations, dual icon/text states, coordinated layout transitions, and sophisticated opacity fading. The button splits horizontally revealing a left option while the right button morphs its content, creating an intuitive two-choice interface.",
  "main_features": [
    "Single-to-dual button split animation",
    "Smooth spring physics for natural motion",
    "Coordinated translateX animations for both buttons",
    "Dynamic opacity fade-in/fade-out for left button",
    "Morphing right button content (label to icon)",
    "Animated padding changes on activation",
    "FadeIn/FadeOut layout animations with LinearTransition",
    "PressableScale for tactile press feedback",
    "State-driven styling (activated/deactivated states)",
    "Absolute positioning for layered button effect",
    "Customizable icons and labels",
    "Configurable button width and spacing"
  ],
  "file_structure": {
    "index.tsx": "Container component with GestureHandlerRootView wrapper and icon configuration",
    "components/split-button/index.tsx": "Core SplitButton component with animation logic and state management",
    "constants.ts": "Color constants for consistent theming"
  },
  "core_technologies": {
    "animations": "react-native-reanimated",
    "gestures": "react-native-gesture-handler",
    "press_feedback": "pressto (PressableScale)",
    "pattern": "Spring-based translation with timing-based opacity and padding"
  },
  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "components": [
        "Animated.View"
      ],
      "hooks": [
        "useAnimatedStyle",
        "withSpring",
        "withTiming"
      ],
      "layout_animations": [
        "FadeIn",
        "FadeOut",
        "LinearTransition"
      ],
      "critical_feature": "Coordinated spring and timing animations for smooth state transitions"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "component": "GestureHandlerRootView",
      "usage": "Root wrapper for optimized gesture handling",
      "benefit": "Performance optimized touch interactions"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "component": "PressableScale",
      "usage": "Scale feedback on button press",
      "benefit": "Native-feeling tactile response"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "component": "AntDesign",
      "usage": "Icon rendering for button states",
      "icons_used": [
        "apple",
        "google"
      ]
    }
  },
  "animation_techniques": {
    "horizontal_split": {
      "property": "translateX",
      "right_button": "0 → +offset (buttonWidth/2 + spacing)",
      "left_button": "0 → -offset (buttonWidth/2 + spacing)",
      "animation": "withSpring",
      "effect": "Buttons move apart from center position",
      "triggered_by": "activated state change",
      "note": "Symmetrical movement creates balanced split effect"
    },
    "opacity_fade": {
      "property": "opacity",
      "values": "0 → 1 (when activated), 1 → 0 (when deactivated)",
      "animation": "withTiming",
      "duration": 300,
      "target": "Left button only",
      "effect": "Left button fades in smoothly as it appears",
      "coordination": "Synced with translateX animation"
    },
    "padding_morph": {
      "property": "paddingHorizontal",
      "inactive": 24,
      "active": 36,
      "animation": "withTiming",
      "duration": 300,
      "effect": "Button content area expands/contracts",
      "purpose": "Accommodates icon size changes and improves visual balance"
    },
    "layout_animations": {
      "entering": "FadeIn",
      "exiting": "FadeOut",
      "transition": "LinearTransition",
      "applied_to": "Left button icon container",
      "effect": "Smooth appearance/disappearance of icon content",
      "conditional": "Only renders when activated"
    },
    "spring_config": {
      "type": "Default spring",
      "mass": "Default (~1)",
      "damping": "Default (~10)",
      "stiffness": "Default (~100)",
      "effect": "Natural, bouncy motion with subtle overshoot",
      "note": "Using default spring config for consistent feel"
    },
    "press_scale": {
      "component": "PressableScale",
      "effect": "Buttons scale down on press, scale up on release",
      "feedback": "Tactile confirmation of interaction",
      "library": "pressto"
    }
  },
  "reanimated_patterns": {
    "state_driven_animations": {
      "pattern": "useState triggers useAnimatedStyle recalculations",
      "flow": "setActive → activated changes → useAnimatedStyle dependencies trigger → animations execute",
      "benefit": "Clean separation of state and animation logic"
    },
    "useAnimatedStyle": {
      "instances": [
        {
          "name": "rRightStyle",
          "properties": [
            "transform: [translateX]"
          ],
          "animation": "withSpring",
          "dependencies": [
            "activated"
          ],
          "target": "Right button"
        },
        {
          "name": "rLeftStyle",
          "properties": [
            "opacity",
            "transform: [translateX]"
          ],
          "animations": [
            "withTiming (opacity)",
            "withSpring (translateX)"
          ],
          "dependencies": [
            "activated"
          ],
          "target": "Left button"
        },
        {
          "name": "rAnimatedChipStyle",
          "properties": [
            "paddingHorizontal"
          ],
          "animation": "withTiming",
          "dependencies": [
            "activated"
          ],
          "target": "Both button content containers"
        }
      ]
    },
    "mixed_animations": {
      "pattern": "Combining withSpring and withTiming in same component",
      "spring": "Used for translateX (natural motion)",
      "timing": "Used for opacity and padding (controlled, predictable)",
      "reason": "Different animation types suit different properties",
      "benefit": "Best of both worlds - natural motion with precise timing"
    },
    "layout_animations": {
      "FadeIn": {
        "usage": "Left button icon entrance",
        "effect": "Smooth fade-in",
        "default_duration": "~300ms"
      },
      "FadeOut": {
        "usage": "Left button icon exit",
        "effect": "Smooth fade-out",
        "default_duration": "~300ms"
      },
      "LinearTransition": {
        "usage": "Smooth layout transitions",
        "effect": "Prevents jarring layout jumps",
        "applied_to": "Content container during icon changes"
      }
    },
    "conditional_rendering": {
      "pattern": "{activated && <Component />}",
      "usage": "Left button only renders when activated",
      "benefit": "Cleaner than opacity: 0, better performance",
      "layout_animations": "entering/exiting trigger when mounting/unmounting"
    }
  },
  "component_architecture": {
    "split_button": {
      "type": "Reusable component",
      "memo": true,
      "comparison": "Default shallow comparison",
      "props": {
        "style": {
          "type": "StyleProp<ViewStyle>",
          "optional": true,
          "description": "Custom styles for container"
        },
        "onLeft": {
          "type": "() => void",
          "optional": true,
          "description": "Callback when left button pressed"
        },
        "onRight": {
          "type": "() => void",
          "optional": true,
          "description": "Callback when right button pressed"
        },
        "leftIcon": {
          "type": "ReactNode",
          "required": true,
          "description": "Icon displayed on left button"
        },
        "rightIcon": {
          "type": "ReactNode",
          "required": true,
          "description": "Icon displayed on right button when activated"
        },
        "label": {
          "type": "string",
          "default": "Start",
          "description": "Text shown on right button when not activated"
        },
        "buttonWidth": {
          "type": "number",
          "default": 120,
          "description": "Width of individual button when activated"
        },
        "maxSpacing": {
          "type": "number",
          "default": 13,
          "description": "Gap between buttons when split"
        }
      },
      "state": {
        "activated": "boolean - tracks whether button is split or unified"
      },
      "computed_values": {
        "offset": "buttonWidth / 2 + maxSpacing",
        "purpose": "Distance each button travels from center"
      }
    },
    "interaction_states": {
      "initial": {
        "activated": false,
        "display": "Single button with label",
        "position": "Center"
      },
      "split": {
        "activated": true,
        "display": "Two buttons with icons",
        "position": "Left and right, separated by maxSpacing * 2"
      }
    },
    "press_behavior": {
      "right_button": {
        "when_inactive": "Activates split (setActive(true))",
        "when_active": "Deactivates split and calls onRight callback"
      },
      "left_button": {
        "when_active": "Deactivates split and calls onLeft callback"
      }
    }
  },
  "visual_design": {
    "color_scheme": {
      "almostBlack": "#181817 (left icon color)",
      "black": "#000000 (active right button background)",
      "border": "#D9D6D1 (button borders)",
      "background": "#F1EEE8 (inactive right button, left icon background)",
      "white": "#FFFFFF (active right button text)"
    },
    "button_styling": {
      "inactive_right_button": {
        "width": 140,
        "height": 60,
        "borderRadius": 16,
        "borderWidth": 1,
        "borderColor": "#D9D6D1",
        "backgroundColor": "#F1EEE8",
        "shadow": {
          "offset": {
            "width": 0,
            "height": 1
          },
          "opacity": 0.1,
          "radius": 5
        }
      },
      "active_right_button": {
        "width": 120,
        "backgroundColor": "#000000",
        "shadowOpacity": 0.3,
        "contentColor": "#FFFFFF"
      },
      "active_left_button": {
        "width": 120,
        "borderColor": "#D9D6D1",
        "borderWidth": 1,
        "backgroundColor": "transparent"
      }
    },
    "typography": {
      "label": {
        "fontSize": 20,
        "fontWeight": "600",
        "color_inactive": "default (likely dark)",
        "color_active": "#FFFFFF"
      }
    },
    "spacing": {
      "container_height": 100,
      "button_height": 60,
      "default_button_width": 140,
      "active_button_width": 120,
      "max_spacing": 13,
      "padding_horizontal_inactive": 24,
      "padding_horizontal_active": 36,
      "padding_vertical": 16
    },
    "layout": {
      "container": "Full width, centered alignment",
      "right_button": "Absolute positioned, z-index: 100 (on top)",
      "left_button": "Positioned behind right button initially",
      "stacking": "Right button always on top in z-order"
    }
  },
  "interaction_pattern": {
    "initial_state": {
      "appearance": "Single button showing label text",
      "position": "Center of container",
      "activated": false
    },
    "first_press": {
      "trigger": "Tap on right button (inactive state)",
      "action": "setActive(true)",
      "animation_sequence": [
        "1. Right button translates right (+offset)",
        "2. Left button fades in (opacity 0 → 1)",
        "3. Left button translates left (-offset)",
        "4. Right button content changes (label → rightIcon)",
        "5. Padding increases (24 → 36)",
        "6. Right button background becomes black"
      ],
      "duration": "~300-400ms (spring settles)",
      "result": "Two separated buttons with icons"
    },
    "left_button_press": {
      "trigger": "Tap on left button (active state)",
      "callbacks": [
        "onLeft?.()"
      ],
      "action": "setActive(false)",
      "animation_sequence": [
        "1. Both buttons translate back to center",
        "2. Left button fades out",
        "3. Right button content changes (rightIcon → label)",
        "4. Padding decreases (36 → 24)",
        "5. Right button background becomes light"
      ],
      "result": "Returns to single button state"
    },
    "right_button_press_active": {
      "trigger": "Tap on right button (active state)",
      "callbacks": [
        "onRight?.()"
      ],
      "action": "setActive(false)",
      "animation_sequence": "Same as left button press",
      "result": "Returns to single button state"
    }
  },
  "mathematical_algorithms": {
    "offset_calculation": {
      "formula": "offset = buttonWidth / 2 + maxSpacing",
      "default_values": {
        "buttonWidth": 120,
        "maxSpacing": 13,
        "result": "60 + 13 = 73"
      },
      "purpose": "Determines translation distance for both buttons",
      "logic": "Half button width moves button edge to center, plus spacing creates gap"
    },
    "button_transformation": {
      "width_change": "140 (inactive) → 120 (active)",
      "reason": "Makes room for gap between buttons",
      "total_active_width": "120 + 26 + 120 = 266px (button + gap + button)",
      "inactive_width": "140px",
      "expansion": "126px total expansion (63px each side)"
    },
    "translateX_values": {
      "right_button": {
        "inactive": 0,
        "active": "+offset (73px)",
        "direction": "Right"
      },
      "left_button": {
        "inactive": 0,
        "active": "-offset (-73px)",
        "direction": "Left"
      },
      "symmetry": "Equal and opposite for balanced appearance"
    },
    "opacity_curve": {
      "left_button": "0 when inactive, 1 when active",
      "interpolation": "Linear (withTiming)",
      "duration": 300,
      "easing": "Default (ease-out)"
    },
    "padding_interpolation": {
      "inactive": 24,
      "active": 36,
      "change": "+12px",
      "duration": 300,
      "purpose": "Accommodates icon size and improves balance"
    }
  },
  "use_cases": {
    "primary": [
      "Social login options (Google vs Apple)",
      "Confirm/cancel actions",
      "Accept/decline decisions",
      "Yes/no questions",
      "Dual authentication methods",
      "Payment method selection (Card vs Wallet)",
      "Sign up vs Sign in"
    ],
    "secondary": [
      "Like/dislike buttons",
      "Thumb up/down rating",
      "Save/share actions",
      "Add to favorites vs Add to cart",
      "Call vs Message buttons",
      "Email vs SMS options",
      "Export format selection"
    ],
    "interaction_patterns": [
      "Progressive disclosure (reveal options on demand)",
      "Dual choice interfaces",
      "Authentication flows",
      "Action confirmation"
    ]
  },
  "code_quality": {
    "typescript": "Full TypeScript with explicit types",
    "type_definitions": [
      "SplitButtonProps with all prop types",
      "Proper StyleProp<ViewStyle> usage",
      "ReactNode for icon props",
      "Optional callback types (() => void)"
    ],
    "imports": {
      "types": "StyleProp, ViewStyle, ReactNode, FC",
      "proper_separation": "Type imports separated with 'type' keyword"
    },
    "constants": {
      "WithTimingConfig": "Centralized timing configuration",
      "colors": "Separated color constants file",
      "naming": "camelCase for configs, lowercase for colors object"
    },
    "naming_conventions": {
      "components": "PascalCase (SplitButton)",
      "hooks": "camelCase",
      "animated_styles": "r prefix (rRightStyle, rLeftStyle, rAnimatedChipStyle)",
      "handlers": "on prefix (onLeft, onRight)",
      "state": "descriptive names (activated)"
    },
    "documentation": {
      "inline_comments": "Excellent explanatory comments throughout",
      "gesture_handler_explanation": "Detailed comment explaining GestureHandlerRootView purpose",
      "code_sections": "Comments marking major sections (Left Button, Right Button)",
      "calculation_comments": "Explains offset calculation",
      "callback_comments": "Documents callback invocations"
    },
    "best_practices": [
      "memo for performance optimization",
      "Functional component with hooks",
      "Proper TypeScript typing",
      "Optional chaining for callbacks (onLeft?.())",
      "Early return pattern in press handler",
      "StyleSheet.create for style optimization",
      "Destructured props with defaults",
      "Separated concerns (container vs component)"
    ],
    "strengths": [
      "Clean, readable code structure",
      "Well-commented and documented",
      "Proper TypeScript usage",
      "Performance optimized with memo",
      "Flexible and customizable",
      "Reusable component design",
      "Consistent naming conventions"
    ],
    "areas_for_improvement": [
      "Could extract magic numbers (60, 16, etc.) to constants",
      "Could add PropTypes for runtime validation",
      "Could add accessibility props (accessibilityLabel, accessibilityRole)",
      "Animation configs could be props for customization",
      "Could add disabled state handling"
    ]
  },
  "performance_optimizations": {
    "memo_component": {
      "usage": "memo() wraps SplitButton",
      "benefit": "Prevents re-renders when parent updates",
      "comparison": "Default shallow prop comparison"
    },
    "useAnimatedStyle": {
      "pattern": "Dependencies array includes [activated]",
      "benefit": "Only recalculates when activated changes",
      "runs_on": "UI thread",
      "efficiency": "No bridge crossing for animations"
    },
    "conditional_rendering": {
      "left_button": "Only renders icon when activated",
      "benefit": "Saves rendering work when hidden",
      "better_than": "opacity: 0 pattern (still renders)"
    },
    "layout_animations": {
      "type": "Built-in Reanimated layout animations",
      "benefit": "Optimized native animations",
      "runs_on": "UI thread"
    },
    "gesture_handler_root": {
      "wrapper": "GestureHandlerRootView",
      "benefit": "Optimized gesture handling",
      "performance": "Better than default touch system"
    },
    "pressto_library": {
      "component": "PressableScale",
      "benefit": "Native-thread press animations",
      "optimization": "No JS thread involvement during press"
    },
    "stylesheet_create": {
      "usage": "StyleSheet.create()",
      "benefit": "Optimized style objects",
      "caching": "Styles created once, reused"
    }
  },
  "known_limitations": {
    "no_gesture_control": {
      "limitation": "Only tap to activate/deactivate",
      "missing": "No drag gesture to control split progress",
      "enhancement": "Could add pan gesture for interactive control"
    },
    "fixed_timing": {
      "issue": "Animation duration hardcoded (300ms)",
      "impact": "Not customizable without code change",
      "enhancement": "Could expose as prop"
    },
    "no_disabled_state": {
      "limitation": "No disabled prop or state",
      "impact": "Can't prevent interaction programmatically",
      "enhancement": "Add disabled prop with visual feedback"
    },
    "icon_size_assumptions": {
      "limitation": "Assumes icons fit within button dimensions",
      "impact": "Large icons may overflow or look cramped",
      "enhancement": "Add icon size props or scaling"
    },
    "no_haptic_feedback": {
      "limitation": "No haptic feedback on interaction",
      "enhancement": "Could integrate expo-haptics for tactile feedback"
    },
    "z_index_stacking": {
      "limitation": "Right button always on top (z-index: 100)",
      "impact": "Can't change stacking order",
      "enhancement": "Could make z-index configurable"
    },
    "single_direction": {
      "limitation": "Only horizontal split supported",
      "missing": "Vertical or diagonal split",
      "enhancement": "Could add direction prop"
    }
  },
  "potential_improvements": {
    "features": [
      "Add drag gesture to control split progress",
      "Support vertical split direction",
      "Add third button option (split into 3)",
      "Auto-collapse after timeout",
      "Expand animation variants (scale, rotate, etc.)",
      "Add ripple effect on press",
      "Support custom animation configs via props",
      "Add loading states for async actions"
    ],
    "customization": [
      "Expose animation duration props",
      "Configurable spring/timing configs",
      "Custom color scheme props",
      "Button size variants (small, medium, large)",
      "Border radius prop",
      "Shadow customization",
      "Icon size props",
      "Text style props"
    ],
    "accessibility": [
      "Add accessibilityLabel for screen readers",
      "Add accessibilityRole='button'",
      "Add accessibilityHint for split behavior",
      "Support reduced motion preference",
      "Keyboard navigation support",
      "Focus indicators",
      "High contrast mode support"
    ],
    "interaction": [
      "Haptic feedback on press",
      "Sound effects option",
      "Long press for alternate action",
      "Swipe to split/unsplit",
      "Double tap handling",
      "Disabled state with visual feedback",
      "Loading state during async operations"
    ],
    "visual": [
      "Gradient backgrounds",
      "Icon animations on state change",
      "Particle effects",
      "Glow effects",
      "Badge/notification indicators",
      "Progress indicators",
      "Success/error state animations"
    ]
  },
  "key_insights": {
    "symmetrical_motion": "Equal and opposite translateX creates balanced, intuitive split effect",
    "mixed_animation_types": "Combining spring (translateX) and timing (opacity) creates natural yet controlled motion",
    "conditional_rendering": "Using conditional render vs opacity improves performance and simplifies logic",
    "absolute_positioning": "Right button's absolute positioning enables overlap effect in initial state",
    "state_as_single_source": "Single 'activated' boolean elegantly drives all visual changes",
    "calculated_offset": "Offset formula ensures buttons are perfectly spaced regardless of size",
    "gesture_handler_wrapper": "GestureHandlerRootView is essential for optimal press performance",
    "padding_animation": "Animating padding alongside content creates fluid size transitions",
    "z_index_layering": "Higher z-index on right button maintains visual hierarchy during animation",
    "press_to_reveal": "Progressive disclosure pattern reduces cognitive load by showing options on demand"
  },
  "learning_opportunities": {
    "for_beginners": [
      "useState for component state",
      "Basic Reanimated animations",
      "useAnimatedStyle hook",
      "withSpring and withTiming basics",
      "Conditional rendering patterns",
      "TouchableOpacity alternatives (PressableScale)",
      "StyleSheet.create usage",
      "Basic layout with flexbox"
    ],
    "for_intermediate": [
      "Coordinating multiple animations",
      "Mixing spring and timing animations",
      "Layout animations (FadeIn/FadeOut)",
      "Absolute positioning techniques",
      "Performance with memo",
      "Dependencies in useAnimatedStyle",
      "Transform animations (translateX)",
      "State-driven UI changes",
      "Optional chaining for callbacks"
    ],
    "for_advanced": [
      "Creating reusable animated components",
      "Animation performance optimization",
      "UI thread animations with Reanimated",
      "Complex state machines for interactions",
      "Gesture handler integration",
      "Third-party animation libraries (pressto)",
      "Progressive disclosure UX patterns",
      "Mathematical animation calculations",
      "Z-index and layering strategies"
    ]
  },
  "testing_considerations": {
    "visual_tests": [
      "Button splits correctly on activation",
      "Symmetrical movement of both buttons",
      "Smooth opacity fade on left button",
      "Content morphs correctly (label ↔ icon)",
      "Padding changes smoothly",
      "Colors transition properly",
      "Shadows render correctly",
      "Test on various screen sizes"
    ],
    "interaction_tests": [
      "Tap on inactive button activates split",
      "Tap on left button deactivates and calls callback",
      "Tap on active right button deactivates and calls callback",
      "Rapid taps don't break animation",
      "PressableScale feedback works",
      "Callbacks fire at correct times",
      "State updates correctly"
    ],
    "edge_cases": [
      "Very long label text",
      "Missing icons",
      "Undefined callbacks",
      "Extremely small buttonWidth",
      "Negative maxSpacing",
      "Very large icons",
      "Rapid activation/deactivation",
      "Component unmount during animation"
    ],
    "performance_tests": [
      "Monitor FPS during animation",
      "Check for dropped frames",
      "Memory usage stability",
      "Test on low-end devices",
      "Multiple instances on screen",
      "Rapid repeated animations"
    ],
    "accessibility_tests": [
      "Screen reader compatibility",
      "Keyboard navigation (if implemented)",
      "Touch target sizes (minimum 44x44)",
      "Color contrast ratios",
      "Reduced motion support (if implemented)"
    ]
  },
  "accessibility_considerations": {
    "current_state": "No accessibility features implemented",
    "missing_features": [
      "No screen reader labels",
      "No accessibilityRole defined",
      "No keyboard navigation",
      "No reduced motion support",
      "No focus indicators"
    ],
    "recommendations": {
      "labels": {
        "container": "accessibilityLabel='Split button menu'",
        "right_button_inactive": "accessibilityLabel='{label}' accessibilityHint='Tap to reveal options'",
        "right_button_active": "accessibilityLabel='Option 2' accessibilityHint='Tap to confirm and close'",
        "left_button": "accessibilityLabel='Option 1' accessibilityHint='Tap to confirm and close'"
      },
      "roles": {
        "buttons": "accessibilityRole='button'",
        "container": "accessibilityRole='menu' (when split)"
      },
      "states": {
        "announce_split": "Announce 'Options revealed' when activated",
        "announce_close": "Announce 'Options hidden' when deactivated"
      },
      "reduced_motion": {
        "check": "Use AccessibilityInfo.isReduceMotionEnabled()",
        "behavior": "Skip animations, instant state changes"
      },
      "touch_targets": {
        "current": "60x120 buttons meet minimum 44x44",
        "status": "Adequate"
      }
    }
  },
  "related_patterns": {
    "expandable_fab": "Floating action button that expands to reveal options",
    "segmented_control": "Multiple options side by side (but no reveal animation)",
    "action_sheet": "Bottom sheet with multiple actions (different reveal pattern)",
    "radio_buttons": "Multiple choice selection (static layout)",
    "toggle_switch": "Binary choice (different visual metaphor)"
  },
  "real_world_inspiration": {
    "social_logins": "Choose between Google, Apple, Facebook authentication",
    "ios_action_buttons": "Confirm/cancel patterns in iOS",
    "material_design": "Extended FAB patterns",
    "payment_selectors": "Card vs digital wallet choices"
  },
  "bundle_size_impact": {
    "code_size": "Small (~200 lines total)",
    "dependencies": "Reanimated, Gesture Handler, pressto (likely already in project)",
    "assets": "None (uses vector icons from expo)",
    "runtime_memory": "Minimal - few SharedValues, basic styles",
    "estimated_size": "< 10KB excluding dependencies"
  },
  "platform_considerations": {
    "ios": {
      "features": "All features work perfectly",
      "performance": "Excellent",
      "shadow": "Native shadow renders well"
    },
    "android": {
      "features": "All features work",
      "performance": "Excellent",
      "shadow": "May need elevation prop for better shadows"
    },
    "web": {
      "features": "All features work",
      "performance": "Good",
      "note": "Gesture handler may have minor differences"
    }
  },
  "configuration": {
    "adjustable_parameters": {
      "button_width": {
        "prop": "buttonWidth",
        "default": 120,
        "effect": "Width of buttons when split",
        "recommended_range": "80-200"
      },
      "max_spacing": {
        "prop": "maxSpacing",
        "default": 13,
        "effect": "Gap between buttons when split",
        "recommended_range": "8-30"
      },
      "label": {
        "prop": "label",
        "default": "Start",
        "effect": "Text shown on inactive button"
      },
      "timing_duration": {
        "constant": "WithTimingConfig.duration",
        "current": 300,
        "effect": "Speed of opacity and padding animations",
        "recommended_range": "200-500"
      }
    }
  },
  "comparison_to_alternatives": {
    "vs_static_dual_buttons": {
      "static": "Both buttons always visible",
      "split_button": "Buttons revealed on demand",
      "advantage": "Cleaner initial UI, progressive disclosure",
      "use_when": "Default action is clear, alternatives are secondary"
    },
    "vs_dropdown_menu": {
      "dropdown": "Vertical list of options",
      "split_button": "Horizontal reveal of two options",
      "advantage": "Faster access, better for binary choices",
      "use_when": "Only two options needed"
    },
    "vs_expandable_fab": {
      "fab": "Circular button expands to multiple options",
      "split_button": "Single button splits horizontally",
      "advantage": "More traditional button appearance",
      "use_when": "Two equal-weight options"
    }
  },
  "tags": [
    "split-button",
    "progressive-disclosure",
    "reanimated",
    "spring-animation",
    "translateX",
    "opacity-fade",
    "dual-choice",
    "gesture-handler",
    "pressable-scale",
    "layout-animation",
    "withSpring",
    "withTiming",
    "social-login",
    "authentication",
    "button-morph",
    "state-transition"
  ],
  "content_hash": "802d773a1d855fd7e2bf7b91a5d75b4b3304bde12bb43bd01b51b88030b3aaf0",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.446Z",
  "last_validated": "2025-10-12T09:19:28.446Z"
}
