{
  "animation_name": "Miles Bar Chart",
  "animation_slug": "miles-bar-chart",
  "description": "An animated weekly activity bar chart with synchronized horizontal scrolling. Features smooth spring-animated bars that transition in height and color based on data values, coordinated with a horizontal FlatList displaying week labels. Uses derived values to synchronize chart data with scroll position, creating a cohesive data visualization experience.",
  "main_features": [
    "Synchronized scroll-driven data visualization",
    "Spring-animated bar height transitions",
    "Color interpolation from transparent to solid",
    "Horizontal FlatList with snap-to-interval",
    "Active index calculation from scroll offset",
    "Dynamic data updates based on scroll position",
    "Seven-bar weekly view (Monday-Sunday)",
    "Automatic date generation with date-fns",
    "Responsive bar width calculations",
    "Fast deceleration for snappy scrolling"
  ],
  "file_structure": {
    "index.tsx": "Entry point exporting MilesBarChart component",
    "src/index.tsx": "Main App component with FlatList and scroll synchronization",
    "src/constants.ts": "Data generation with date-fns, week labels, and random values",
    "src/components/weekly-chart/index.tsx": "WeeklyChart container managing 7 bar components",
    "src/components/weekly-chart/single-bar.tsx": "Individual Bar component with height and color animations"
  },
  "core_technologies": {
    "animations": "react-native-reanimated",
    "date_handling": "date-fns",
    "list": "Animated.FlatList",
    "pattern": "Scroll-driven data synchronization"
  },
  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useAnimatedRef",
        "useScrollViewOffset",
        "useDerivedValue",
        "useAnimatedStyle"
      ],
      "functions": [
        "interpolate",
        "interpolateColor",
        "withTiming"
      ],
      "components": [
        "Animated.FlatList",
        "Animated.View"
      ],
      "critical_feature": "useDerivedValue synchronizes chart data with scroll position"
    },
    "date-fns": {
      "version": "^4.1.0",
      "functions": [
        "format",
        "startOfWeek"
      ],
      "usage": "Calculate weekly dates starting from 3 weeks ago, format display labels"
    }
  },
  "animation_techniques": {
    "bar_height_animation": {
      "type": "interpolate",
      "input": "progress value (0-1)",
      "output": "[minHeight, maxHeight]",
      "input_range": "[0, 1]",
      "output_range": "[height/5, height]",
      "example": "For height=150: [30, 150]",
      "timing": "withTiming() wraps progress value",
      "effect": "Bars grow from 20% to 100% of max height"
    },
    "bar_color_animation": {
      "type": "interpolateColor",
      "input": "progress value (0-1)",
      "input_range": "[0, 1]",
      "output_range": "['rgba(255, 255, 255, 0.3)', 'rgba(255, 255, 255, 1)']",
      "effect": "Bars transition from 30% opacity white to solid white",
      "benefit": "Visual hierarchy showing relative activity levels"
    },
    "progress_smoothing": {
      "pattern": "useDerivedValue wrapping withTiming",
      "implementation": "useDerivedValue(() => withTiming(progress.value))",
      "purpose": "Smooth transitions when data changes",
      "timing_config": "Default timing (no custom config)",
      "effect": "Gradual height and color changes, not instant"
    },
    "scroll_synchronization": {
      "technique": "useScrollViewOffset + useDerivedValue",
      "calculation": "Math.floor((scrollOffset.value + windowWidth/2) / windowWidth)",
      "purpose": "Convert scroll position to active week index",
      "offset_adjustment": "+ windowWidth/2 for center-based detection",
      "reactivity": "Chart data updates automatically as user scrolls"
    },
    "data_binding": {
      "pattern": "Derived value selecting data array slice",
      "implementation": "useDerivedValue(() => data[activeIndex.value])",
      "dependencies": "[activeIndex, data]",
      "result": "SharedValue<WeekData> passed to chart",
      "benefit": "Single source of truth for current week's data"
    }
  },
  "reanimated_patterns": {
    "useAnimatedRef": {
      "location": "src/index.tsx",
      "purpose": "Create reference to Animated.FlatList",
      "usage": "Required for useScrollViewOffset",
      "type_safety": "Uses 'any' type (noted with eslint-disable)",
      "critical": "Enables scroll offset tracking"
    },
    "useScrollViewOffset": {
      "pattern": "Most efficient scroll tracking in Reanimated",
      "input": "animatedRef from useAnimatedRef",
      "output": "SharedValue with current scroll offset in pixels",
      "runs_on": "UI thread",
      "benefit": "No bridge crossing for scroll tracking"
    },
    "derived_values": [
      {
        "name": "activeIndex",
        "calculation": "Math.floor((scrollOffset.value + windowWidth/2) / windowWidth)",
        "dependencies": [
          "scrollOffset"
        ],
        "purpose": "Calculate which week is centered in viewport",
        "reactivity": "Updates on every scroll frame"
      },
      {
        "name": "animatedData",
        "calculation": "data[activeIndex.value]",
        "dependencies": [
          "activeIndex",
          "data"
        ],
        "purpose": "Select current week's data array",
        "type": "SharedValue<WeekData>"
      },
      {
        "name": "progress (per bar)",
        "calculation": "data.value[index].value",
        "dependencies": [
          "data",
          "index"
        ],
        "purpose": "Extract individual bar's progress value"
      },
      {
        "name": "animatedProgress",
        "calculation": "withTiming(progress.value)",
        "dependencies": [
          "progress"
        ],
        "purpose": "Smooth transitions between progress values"
      }
    ],
    "animated_style": {
      "name": "rAnimatedStyle",
      "location": "single-bar.tsx",
      "properties": [
        "height",
        "backgroundColor"
      ],
      "interpolations": [
        "height: interpolate(progress, [0,1], [minHeight, maxHeight])",
        "backgroundColor: interpolateColor(progress, [0,1], [transparent, solid])"
      ],
      "updates": "When progress SharedValue changes"
    }
  },
  "data_structure": {
    "data_array": {
      "type": "Array<Array<DayInfo>>",
      "dimensions": "7 weeks Ã— 7 days = 49 data points",
      "generation": "new Array(7).fill(null).map(...)",
      "structure": "Nested arrays: weeks contain days"
    },
    "day_info_object": {
      "day": "String - Single letter day label (M, T, W, T, F, S, S)",
      "weekIndex": "Number - Week position (0-6)",
      "dayIndex": "Number - Day position within week (0-6)",
      "value": "Number - Random value between 0 and 1",
      "dateString": "String - Formatted date (e.g., '15 January')"
    },
    "week_labels": {
      "type": "Array<string>",
      "length": 7,
      "format": "'week of [date]'",
      "example": "'week of 15 January'",
      "generation": "Mapped from data array first days"
    },
    "date_calculation": {
      "base_date": "3 weeks ago from today",
      "start_of_week": "Monday (weekStartsOn: 1)",
      "progression": "Each day adds 86400000ms (1 day)",
      "formula": "mondayFromThreeWeeksAgo + 86400000 * (weekIndex * 7 + dayIndex)"
    },
    "random_values": {
      "generation": "Math.random()",
      "range": "[0, 1]",
      "purpose": "Simulate activity levels",
      "usage": "Drives bar height and color intensity"
    }
  },
  "component_architecture": {
    "app_component": {
      "location": "src/index.tsx",
      "responsibilities": [
        "Calculate window dimensions",
        "Manage scroll tracking",
        "Synchronize active index",
        "Coordinate chart and label display"
      ],
      "layout": "Vertical stack with chart above scrollable labels"
    },
    "weekly_chart": {
      "location": "src/components/weekly-chart/index.tsx",
      "type": "Container component",
      "props": {
        "data": "SharedValue<WeekData> - Current week's data",
        "width": "number - Chart width (windowWidth)",
        "height": "number - Chart height (150px)"
      },
      "layout": "Horizontal flexbox (flexDirection: 'row')",
      "alignment": "alignItems: 'flex-end' for bottom-aligned bars",
      "memoization": "initialData calculated once via useMemo"
    },
    "animated_weekly_bar": {
      "type": "Internal component",
      "purpose": "Wrapper for individual Bar with calculated dimensions",
      "props": {
        "data": "SharedValue<WeekData>",
        "width": "Chart width",
        "height": "Chart height",
        "index": "Bar position (0-6)",
        "internalPaddingHorizontal": 48,
        "gap": 20
      },
      "calculation": "barWidth = (width - padding*2 - gap*6) / 7",
      "optimizations": "useMemo for letter, useDerivedValue for progress"
    },
    "bar_component": {
      "location": "src/components/weekly-chart/single-bar.tsx",
      "type": "Presentational component",
      "props": {
        "maxHeight": "number - Maximum bar height",
        "minHeight": "number - Minimum bar height (maxHeight/5)",
        "width": "number - Bar width",
        "progress": "SharedValue<number> - Value between 0 and 1",
        "letter": "string - Day label (M, T, W, etc.)"
      },
      "structure": {
        "animated_bar": "Rounded rectangle with dynamic height/color",
        "label": "Day letter below bar"
      }
    }
  },
  "layout_calculations": {
    "bar_width_formula": {
      "calculation": "(width - internalPaddingHorizontal * 2 - gap * 6) / 7",
      "components": {
        "width": "windowWidth (full screen width)",
        "internalPaddingHorizontal": "48px on each side",
        "gap": "20px between bars (6 gaps for 7 bars)",
        "divisor": "7 bars total"
      },
      "example": "For width=375: (375 - 96 - 120) / 7 â‰ˆ 22.7px per bar",
      "note": "Calculation explicitly commented in code as 'pretty odd but makes sense'"
    },
    "chart_dimensions": {
      "width": "windowWidth (responsive)",
      "height": 150,
      "padding": "48px horizontal",
      "gap": "20px between bars",
      "total_gap_space": "120px (6 Ã— 20px)"
    },
    "bar_height_range": {
      "min": "height / 5 = 30px",
      "max": "height = 150px",
      "ratio": "5:1 (max is 5x min)",
      "purpose": "Ensure all bars visible even at minimum value"
    }
  },
  "scroll_behavior": {
    "flatlist_config": {
      "horizontal": true,
      "snapToInterval": "windowWidth",
      "decelerationRate": "fast",
      "showsHorizontalScrollIndicator": false,
      "hitSlop": 100
    },
    "snap_behavior": {
      "interval": "One full screen width per week",
      "effect": "Each scroll snaps to show exactly one week label",
      "deceleration": "Fast stopping for crisp snap points"
    },
    "active_index_detection": {
      "formula": "Math.floor((scrollOffset.value + windowWidth/2) / windowWidth)",
      "center_offset": "+ windowWidth/2",
      "purpose": "Detect which week is centered, not just leftmost",
      "boundary_handling": "Math.floor ensures integer index",
      "range": "0 to 6 (7 weeks total)"
    },
    "hit_slop": {
      "value": 100,
      "purpose": "Extend touchable area beyond FlatList bounds",
      "benefit": "Easier to grab and scroll"
    }
  },
  "visual_design": {
    "color_scheme": {
      "background": "#392F40 (dark purple-gray)",
      "bars_low": "rgba(255, 255, 255, 0.3) (30% white)",
      "bars_high": "rgba(255, 255, 255, 1) (solid white)",
      "text": "white",
      "aesthetic": "Minimal, data-focused, high contrast"
    },
    "typography": {
      "font": "FiraCode-Regular (monospace)",
      "day_labels": "Default size, centered below bars",
      "week_labels": "16px, centered in scroll view"
    },
    "bar_styling": {
      "borderRadius": 10,
      "borderCurve": "continuous (iOS native smooth curve)",
      "width": "Calculated dynamically based on screen width",
      "effect": "Rounded pill-shaped bars"
    },
    "layout": {
      "chart_position": "Centered vertically and horizontally",
      "chart_height": 150,
      "label_container_height": 60,
      "alignment": "Bars bottom-aligned for easy comparison"
    },
    "spacing": {
      "internal_padding": "48px horizontal",
      "bar_gap": "20px between bars",
      "label_top_padding": "20px above week labels"
    }
  },
  "date_generation_logic": {
    "base_calculation": {
      "starting_point": "3 weeks ago (today - 21 days)",
      "formula": "new Date().getTime() - 86400000 * 21",
      "milliseconds_per_day": 86400000,
      "adjustment": "startOfWeek with weekStartsOn: 1 (Monday)"
    },
    "week_iteration": {
      "weeks": 7,
      "days_per_week": 7,
      "total_days": 49
    },
    "day_calculation": {
      "formula": "mondayFromThreeWeeksAgo + 86400000 * (weekIndex * 7 + dayIndex)",
      "example": "Week 0, Day 3: base + 86400000 * (0*7 + 3) = Thursday"
    },
    "formatting": {
      "day_display": "format(day, 'd MMMM')",
      "week_label": "'week of ' + format(weekStartDate, 'd MMMM')",
      "examples": [
        "'15 January'",
        "'week of 8 January'"
      ]
    }
  },
  "performance_optimizations": {
    "useMemo": {
      "location": "WeeklyChart component",
      "calculation": "initialData = data.value",
      "dependencies": [
        "data"
      ],
      "purpose": "Cache initial data array for map iteration",
      "benefit": "Prevents recalculating array on every render"
    },
    "useMemo_for_letter": {
      "location": "AnimatedWeeklyBar",
      "calculation": "data.value[index].day",
      "dependencies": [
        "data",
        "index"
      ],
      "purpose": "Cache day letter (doesn't change for position)",
      "benefit": "Reduces unnecessary recalculations"
    },
    "useDerivedValue": {
      "pattern": "Multiple derived values create reactive chain",
      "chain": "scrollOffset â†’ activeIndex â†’ animatedData â†’ progress â†’ animatedProgress",
      "runs_on": "UI thread",
      "benefit": "Smooth 60fps updates without JS thread involvement"
    },
    "data_structure": {
      "pre_generated": "All 7 weeks of data generated at module level",
      "cached": "No runtime calculation of dates/values",
      "benefit": "Zero computation during animation"
    },
    "component_count": {
      "bars": "7 (one per day)",
      "overhead": "Minimal - simple View and Text components",
      "reusability": "Same Bar component reused 7 times"
    }
  },
  "react_patterns": {
    "hooks_used": [
      "useWindowDimensions",
      "useAnimatedRef",
      "useScrollViewOffset",
      "useDerivedValue (Ã—4)",
      "useAnimatedStyle",
      "useMemo (Ã—2)"
    ],
    "component_composition": {
      "pattern": "Container/Presentational separation",
      "containers": [
        "App",
        "WeeklyChart"
      ],
      "presentational": [
        "Bar"
      ],
      "internal": [
        "AnimatedWeeklyBar"
      ]
    },
    "memoization_strategy": {
      "useMemo": "For static or rarely changing calculations",
      "useDerivedValue": "For reactive animation-driven values",
      "no_memo": "Components not wrapped in React.memo (could be optimization)"
    }
  },
  "use_cases": {
    "primary": [
      "Fitness tracking (daily steps, distance, calories)",
      "Activity monitoring (screen time, usage stats)",
      "Habit tracking (streaks, consistency)",
      "Health metrics (weight, sleep, heart rate)",
      "Business analytics (weekly sales, engagement)",
      "Time tracking (work hours, productivity)"
    ],
    "secondary": [
      "Weather data visualization (temperature, precipitation)",
      "Social media stats (likes, followers, posts)",
      "Educational progress (study time, quiz scores)",
      "Budget tracking (daily spending)",
      "Mood tracking",
      "Water intake logging"
    ],
    "real_world_examples": [
      "Apple Health weekly activity view",
      "Strava weekly training summary",
      "GitHub contribution calendar",
      "Duolingo streak visualization",
      "Sleep tracking apps"
    ]
  },
  "code_quality": {
    "typescript": "Full TypeScript coverage",
    "type_definitions": [
      "DayInfo",
      "WeekData",
      "WeeklyChartProps",
      "AnimatedWeeklyBarProps",
      "BarProps"
    ],
    "imports": {
      "types": [
        "SharedValue",
        "FC"
      ],
      "organized": true,
      "explicit": true
    },
    "documentation": {
      "inline_comments": "Good explanations of complex logic",
      "layout_calculation_note": "Explicitly explains 'pretty odd' bar width formula",
      "data_example": "Comprehensive example in constants.ts showing data structure",
      "eslint_disable": "Properly documented for any type (animatedRef)"
    },
    "constants": {
      "module_level": "data, weekLabels, dayLabels at top of constants.ts",
      "component_level": "internalPaddingHorizontal, gap in WeeklyChart"
    },
    "naming": {
      "components": "PascalCase",
      "functions": "camelCase",
      "constants": "camelCase (could use SCREAMING_SNAKE_CASE)",
      "clarity": "Descriptive names (animatedProgress, activeIndex)"
    },
    "best_practices": [
      "Proper TypeScript typing throughout",
      "useMemo for performance",
      "Separation of concerns (data, components, main app)",
      "Clear component hierarchy",
      "Commented complex calculations"
    ],
    "areas_for_improvement": [
      "Could use React.memo for Bar and WeeklyChart components",
      "animatedRef type could be more specific than 'any'",
      "Constants could use SCREAMING_SNAKE_CASE convention",
      "Could extract magic numbers (48, 20, 150) to named constants",
      "Week labels renderItem could be extracted to separate component"
    ]
  },
  "known_limitations": {
    "fixed_dimensions": {
      "issue": "Chart height hardcoded to 150px",
      "label_height": "Label container hardcoded to 60px",
      "impact": "Not responsive to different screen sizes",
      "workaround": "Could calculate based on screen height percentage"
    },
    "seven_week_limit": {
      "limitation": "Only shows 7 weeks of data",
      "hardcoded": "Data array has fixed length of 7",
      "extensibility": "Would need to modify data generation for more weeks"
    },
    "random_data": {
      "issue": "Uses Math.random() for demo data",
      "real_world": "Would need API integration or state management",
      "recommendation": "Accept data prop from parent"
    },
    "no_data_labels": {
      "missing": "No tooltips or value labels on bars",
      "impact": "Can't see exact values",
      "enhancement": "Could add tap-to-show-value interaction"
    },
    "accessibility": {
      "issue": "No accessibility labels",
      "screen_readers": "Would not announce chart data",
      "recommendation": "Add accessibilityLabel with data summary"
    },
    "font_dependency": {
      "issue": "Requires 'FiraCode-Regular' font",
      "failure_mode": "Falls back to system font if not loaded",
      "recommendation": "Add font loading check or use system font"
    }
  },
  "potential_improvements": {
    "interactivity": [
      "Tap bar to see exact value",
      "Long press for date details",
      "Swipe up/down to change metric",
      "Pinch to zoom time range"
    ],
    "visual_enhancements": [
      "Animated axis lines",
      "Value labels above bars",
      "Hover/press highlighting",
      "Color coding by value range",
      "Gradient fills instead of solid colors",
      "Drop shadow for depth"
    ],
    "features": [
      "Configurable number of weeks",
      "Multiple metrics overlay",
      "Goal line visualization",
      "Trend indicators",
      "Export chart as image",
      "Share functionality"
    ],
    "data_handling": [
      "Real data source integration",
      "Data loading states",
      "Empty state handling",
      "Error state handling",
      "Data refresh/pull-to-refresh"
    ],
    "customization": [
      "Configurable colors",
      "Custom bar shapes",
      "Adjustable dimensions",
      "Theme support (light/dark)",
      "Font customization"
    ],
    "performance": [
      "Memoize Bar component",
      "Virtualize for many weeks",
      "Lazy load historical data",
      "Optimize re-renders with React.memo"
    ],
    "accessibility": [
      "VoiceOver/TalkBack support",
      "Haptic feedback on interactions",
      "High contrast mode",
      "Adjustable text size",
      "Reduce motion support"
    ]
  },
  "key_insights": {
    "scroll_sync_pattern": "useScrollViewOffset + useDerivedValue creates elegant scroll synchronization",
    "center_based_detection": "Adding windowWidth/2 to scroll offset detects centered item, not leftmost",
    "shared_value_chain": "Chain of derived values creates reactive data flow on UI thread",
    "min_height_strategy": "Setting minHeight ensures visibility even at zero values",
    "color_interpolation": "Using alpha channel in interpolateColor maintains consistent hue",
    "bar_width_math": "Complex width calculation accounts for padding and gaps correctly",
    "withTiming_wrapper": "Wrapping SharedValue with withTiming in useDerivedValue smooths transitions",
    "date_fns_utility": "date-fns simplifies complex date calculations and formatting"
  },
  "learning_opportunities": {
    "for_beginners": [
      "FlatList with horizontal scroll and snap",
      "useWindowDimensions for responsive layouts",
      "Basic Reanimated animations",
      "Date manipulation with date-fns",
      "Array generation with map"
    ],
    "for_intermediate": [
      "useScrollViewOffset for scroll tracking",
      "useDerivedValue for reactive calculations",
      "interpolate and interpolateColor",
      "Scroll-driven UI synchronization",
      "Complex layout calculations",
      "TypeScript interfaces for data structures"
    ],
    "for_advanced": [
      "Building reactive data visualization systems",
      "UI thread animation chains",
      "Performance optimization with memoization",
      "Scroll physics tuning (decelerationRate, snap)",
      "Creating reusable chart components",
      "Date-based data generation patterns"
    ]
  },
  "testing_considerations": {
    "unit_tests": [
      "Date generation produces correct week ranges",
      "Bar width calculation handles edge cases",
      "Active index calculation from scroll offset",
      "Data array has correct structure and length",
      "Week labels format correctly"
    ],
    "visual_tests": [
      "Bars animate smoothly between values",
      "Colors interpolate correctly",
      "Layout remains correct on different screen sizes",
      "Week labels sync with chart display",
      "Scroll snapping works on all weeks"
    ],
    "interaction_tests": [
      "Scrolling updates chart data",
      "Snap points align correctly",
      "Touch/drag gestures work smoothly",
      "Chart updates reflect scroll position"
    ],
    "edge_cases": [
      "Zero values (bars at minimum height)",
      "Maximum values (bars at full height)",
      "First week (index 0)",
      "Last week (index 6)",
      "Rapid scrolling",
      "Different screen widths (small phones, tablets)"
    ],
    "performance_tests": [
      "60fps maintained during scroll",
      "No frame drops during bar animations",
      "Smooth performance on low-end devices",
      "Memory usage remains stable"
    ]
  },
  "mathematical_algorithms": {
    "active_index_formula": {
      "formula": "Math.floor((scrollOffset + windowWidth/2) / windowWidth)",
      "breakdown": {
        "scrollOffset": "Current horizontal scroll position in pixels",
        "windowWidth/2": "Half screen width offset for center detection",
        "windowWidth": "Snap interval (one item width)",
        "Math.floor": "Round down to get integer index"
      },
      "example": {
        "scenario": "windowWidth=375, scrollOffset=500",
        "calculation": "Math.floor((500 + 187.5) / 375) = Math.floor(1.83) = 1",
        "result": "Active index is 1 (second week)"
      }
    },
    "bar_width_formula": {
      "formula": "(width - internalPaddingHorizontal Ã— 2 - gap Ã— 6) / 7",
      "explanation": "Subtract total padding and all gaps, divide by number of bars",
      "gap_calculation": "6 gaps for 7 bars (gaps between, not on ends)"
    },
    "height_interpolation": {
      "formula": "minHeight + (maxHeight - minHeight) Ã— progress",
      "simplified": "30 + 120 Ã— progress",
      "range": "[30px, 150px]",
      "linear": true
    },
    "date_offset_calculation": {
      "formula": "baseDate + 86400000 Ã— (weekIndex Ã— 7 + dayIndex)",
      "components": {
        "86400000": "Milliseconds in one day (24 Ã— 60 Ã— 60 Ã— 1000)",
        "weekIndex Ã— 7": "Days elapsed from complete weeks",
        "dayIndex": "Additional days within current week"
      }
    }
  },
  "animation_choreography": {
    "timing_coordination": {
      "scroll": "Native gesture-driven (no artificial timing)",
      "bar_height": "withTiming with default config",
      "bar_color": "withTiming with default config (same as height)",
      "synchronization": "All bars animate together when data changes",
      "feel": "Smooth, unified, data-focused"
    },
    "transition_triggers": {
      "scroll_event": "Updates scrollOffset continuously",
      "index_change": "Triggers when crossing snap threshold",
      "data_update": "Triggers bar animations",
      "cascade": "Single scroll action triggers entire animation chain"
    }
  },
  "accessibility_considerations": {
    "current_state": "No accessibility implementation",
    "recommendations": [
      "Add chart summary accessibilityLabel",
      "Announce week changes to screen readers",
      "Add accessibilityRole='adjustable' to FlatList",
      "Implement accessibilityActions for week navigation",
      "Provide data table alternative for screen readers",
      "Support VoiceOver/TalkBack gestures",
      "Add haptic feedback on week change"
    ],
    "implementation_ideas": {
      "chart_label": "Bar chart showing activity for week of [date]",
      "week_label": "Week of [date], total activity [sum of values]",
      "individual_bars": "Could add labels like 'Monday: [value]'"
    }
  },
  "comparison_to_alternatives": {
    "vs_static_chart": {
      "static": "All weeks visible at once",
      "miles_bar_chart": "One week at a time with scroll",
      "benefit": "Focus on individual week without clutter"
    },
    "vs_vertical_scroll": {
      "vertical": "Natural for long lists",
      "horizontal": "Better for temporal/sequential data",
      "choice": "Horizontal emphasizes progression through time"
    },
    "vs_chart_library": {
      "library": "Victory Native, Recharts, etc.",
      "custom": "Full control, optimized animations, smaller bundle",
      "tradeoff": "More code but better performance and customization"
    }
  },
  "related_patterns": {
    "similar_animations": [
      "Carousel with data visualization",
      "Swipeable statistics cards",
      "Paged chart views",
      "Timeline scroll visualizations"
    ],
    "chart_types": [
      "Column charts",
      "Bar graphs",
      "Activity heatmaps",
      "Sparklines"
    ]
  },
  "bundle_size_impact": {
    "component_size": "Medium (~180 lines across 5 files)",
    "dependencies": {
      "date-fns": "Adds ~70KB (tree-shakeable)",
      "reanimated": "Likely already in project"
    },
    "optimization": "Could reduce date-fns usage or replace with native Date",
    "estimated_size": "~5KB component code + date-fns overhead"
  },
  "tags": [
    "bar-chart",
    "data-visualization",
    "scroll-animation",
    "weekly-activity",
    "reanimated",
    "date-fns",
    "fitness-tracking",
    "statistics",
    "horizontal-scroll",
    "snap-scroll",
    "interpolation",
    "synchronized-ui",
    "health-metrics",
    "activity-chart"
  ],
  "content_hash": "59a04eb94e75196341a72a319594e91a174e4b4ce7a5aac968fcae6ee73505f9",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.389Z",
  "last_validated": "2025-10-12T09:19:28.389Z"
}
