{
  "animation_name": "Fluid Slider",
  "animation_slug": "fluid-slider",
  "description": "A fluid, interactive slider with metaball morphing effects rendered in Skia. Features a circular picker that connects to the slider track via liquid-like metaball blending, dynamic Y-axis movement on interaction, smooth gesture handling, and real-time percentage display. The metaball effect is achieved using blur and color matrix transformations.",

  "main_features": [
    "Metaball morphing effect (slider track + picker circle)",
    "Liquid-like visual connection between elements",
    "Dynamic Y-axis picker movement (rises on drag)",
    "Real-time percentage value display (0-100%)",
    "Skia-powered rendering for smooth graphics",
    "Touch gesture handling with react-native-skia-gesture",
    "Clamped picker movement within bounds",
    "Spring physics for natural Y-axis animations",
    "GPU-accelerated blur and color matrix effects",
    "Dynamic text positioning with font measurement"
  ],

  "file_structure": {
    "index.tsx": "Main FluidSliderContainer wrapper with dimensions and background",
    "components/fluid-slider/index.tsx": "Core FluidSlider component with Skia rendering and gesture handling",
    "components/fluid-slider/hooks/use-picker-layout.tsx": "Custom hook managing picker position, clamping, and Y-axis animation"
  },

  "core_technologies": {
    "rendering": "@shopify/react-native-skia",
    "animations": "react-native-reanimated",
    "gestures": "react-native-skia-gesture"
  },

  "packages_and_versions": {
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "components": [
        "Touchable.Canvas",
        "Touchable.RoundedRect",
        "Circle",
        "Group",
        "Paint",
        "Text"
      ],
      "effects": [
        "Blur",
        "ColorMatrix"
      ],
      "hooks": [
        "useFont",
        "useDerivedValue"
      ],
      "utilities": [
        "interpolate",
        "Extrapolate"
      ],
      "usage": "GPU-accelerated metaball rendering with blur and color matrix for liquid morphing effects"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "withSpring"
      ],
      "worklets": true,
      "critical_feature": "useDerivedValue for reactive calculations and withSpring for physics-based animations"
    },
    "react-native-skia-gesture": {
      "version": "0.4.5-beta.1",
      "components": [
        "Touchable",
        "Touchable.Canvas",
        "Touchable.RoundedRect"
      ],
      "hooks": [
        "useGestureHandler"
      ],
      "usage": "Seamless gesture handling integrated with Skia rendering, enabling touch interactions on Skia elements"
    }
  },

  "animation_techniques": {
    "metaball_effect": {
      "technique": "Blur + ColorMatrix transformation",
      "implementation": "Group layer with Paint containing Blur(4) and ColorMatrix",
      "blur": 4,
      "color_matrix": [
        1, 0, 0, 0, 0,
        0, 1, 0, 0, 0,
        0, 0, 1, 0, 0,
        0, 0, 0, 50, -25
      ],
      "alpha_channel_manipulation": "Alpha multiplied by 50, then -25 offset",
      "effect": "Creates liquid-like blending where shapes merge smoothly",
      "visual_result": "Slider track and picker circle appear connected by stretchy fluid",
      "performance": "GPU-accelerated via Skia layer rendering"
    },
    "y_axis_animation": {
      "pattern": "Conditional animation based on interaction state",
      "idle_position": "sliderSize.height / 2 (centered vertically)",
      "active_position": "sliderSize.height / 2 - 25 (25px above center)",
      "trigger": "isSliding.value changes",
      "animation": "withSpring()",
      "spring_config": {
        "stiffness": 200,
        "damping": 20,
        "mass": 0.8
      },
      "effect": "Picker rises smoothly when dragging, returns gently when released",
      "purpose": "Visual feedback for active interaction state"
    },
    "x_axis_clamping": {
      "pattern": "Math.max + Math.min for boundary enforcement",
      "formula": "Math.max(radius.value, Math.min(pickerX.value, sliderSize.width - radius.value))",
      "min_bound": "radius.value (left edge)",
      "max_bound": "sliderSize.width - radius.value (right edge)",
      "benefit": "Picker stays within slider bounds, prevents overflow",
      "implementation": "useDerivedValue for reactive clamping"
    },
    "percentage_interpolation": {
      "pattern": "Linear interpolation from position to percentage",
      "input": "clampedPickerX.value",
      "input_range": "[metaballRadius.value, sliderSize.width - metaballRadius.value]",
      "output_range": "[0, 100]",
      "extrapolation": "Extrapolate.CLAMP",
      "rounding": "Math.round() for integer percentages",
      "display": "Converted to string for text rendering",
      "purpose": "Maps horizontal position to 0-100% value"
    },
    "dynamic_text_centering": {
      "measurement": "font.measureText(pickerCircleText.value).width",
      "calculation": "clampedPickerX.value - measuredWidth / 2",
      "benefit": "Text stays perfectly centered regardless of digit count",
      "cases": "Handles '5' (single digit), '50' (two digits), '100' (three digits)",
      "vertical_offset": "fontSize / 3 for baseline alignment",
      "requirement": "Font must be loaded before measurement"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "isSliding",
        "type": "boolean",
        "initial": false,
        "updates": "onStart (true) and onEnd (false) of gesture",
        "purpose": "Tracks active drag state",
        "drives": "Y-axis animation of picker"
      },
      {
        "name": "pickerX",
        "type": "number",
        "initial": 0,
        "updates": "onStart and onActive of gesture",
        "purpose": "Raw X position from gesture",
        "note": "Not directly rendered, feeds into clampedPickerX"
      }
    ],
    "derived_values": [
      {
        "name": "metaballRadius",
        "calculation": "Math.min(20, (height - DISTANCE_BETWEEN_SLIDER_AND_METABALL / 2) / 3)",
        "dependencies": ["height"],
        "purpose": "Responsive picker circle radius based on container height",
        "constraints": "Never exceeds 20px, scales with container"
      },
      {
        "name": "pickerCircleTextContainerRadius",
        "calculation": "metaballRadius.value * 0.8",
        "dependencies": ["metaballRadius"],
        "purpose": "Inner white circle radius for text background",
        "ratio": "80% of metaball radius"
      },
      {
        "name": "clampedPickerX",
        "calculation": "Math.max(radius.value, Math.min(pickerX.value, sliderSize.width - radius.value))",
        "dependencies": ["pickerX", "sliderSize", "radius"],
        "purpose": "Ensures picker stays within slider bounds",
        "worklet": true
      },
      {
        "name": "pickerY",
        "calculation": "withSpring(isSliding.value ? height/2 - 25 : height/2, {...})",
        "dependencies": ["isSliding", "closedPickerY", "sliderSize"],
        "animation": "Spring physics",
        "purpose": "Animated Y position that rises on drag"
      },
      {
        "name": "pickerCircleText",
        "calculation": "Math.round(interpolate(clampedPickerX, [...], [0, 100], CLAMP)).toString()",
        "dependencies": ["clampedPickerX", "metaballRadius", "sliderSize"],
        "purpose": "Percentage value as string for Text component",
        "format": "Integer string ('0' to '100')"
      },
      {
        "name": "pickerTextX",
        "calculation": "clampedPickerX.value - font.measureText(text).width / 2",
        "dependencies": ["clampedPickerX", "font", "pickerCircleText"],
        "purpose": "Horizontally centers text in picker circle",
        "conditional": "Returns 0 if font not loaded"
      },
      {
        "name": "textY",
        "calculation": "pickerY.value + fontSize / 3",
        "dependencies": ["pickerY", "fontSize"],
        "purpose": "Vertically aligns text with baseline offset",
        "offset": "fontSize/3 accounts for text baseline"
      },
      {
        "name": "roundedRectY",
        "calculation": "derivedPickerY.value - sliderHeight.value / 2 + 1",
        "dependencies": ["derivedPickerY", "sliderHeight"],
        "purpose": "Positions slider track vertically centered",
        "offset": "+1 for precise visual alignment"
      }
    ],
    "gesture_handler": {
      "hook": "useGestureHandler",
      "events": {
        "onStart": {
          "updates": [
            "pickerX.value = x",
            "isSliding.value = true"
          ],
          "worklet": true,
          "purpose": "Initialize picker position and activate sliding state"
        },
        "onActive": {
          "updates": ["pickerX.value = x"],
          "worklet": true,
          "purpose": "Continuously update picker position during drag"
        },
        "onEnd": {
          "updates": ["isSliding.value = false"],
          "worklet": true,
          "purpose": "Deactivate sliding state, triggers Y-axis return animation"
        }
      },
      "integration": "Spread onto Touchable.RoundedRect component"
    }
  },

  "performance_optimizations": {
    "useMemo": {
      "size": "Memoizes container dimensions object",
      "sliderSize": "Memoizes slider dimensions (95% of container width)",
      "layer": "Memoizes Paint component with Blur and ColorMatrix",
      "benefit": "Prevents recreation of objects/components on every render"
    },
    "useDerivedValue": {
      "pattern": "All reactive calculations use useDerivedValue",
      "benefit": "Computations run on UI thread, recalculate only when dependencies change",
      "count": 8,
      "examples": [
        "metaballRadius",
        "clampedPickerX",
        "pickerY",
        "pickerCircleText"
      ]
    },
    "layer_compositing": {
      "technique": "Group with layer prop",
      "paint": "Blur + ColorMatrix applied once to entire group",
      "efficiency": "Better than applying effects to individual elements",
      "gpu_acceleration": true,
      "note": "Skia optimizes layered rendering"
    },
    "conditional_font_check": {
      "pattern": "{font && <Text ... />}",
      "purpose": "Prevents rendering Text before font loads",
      "benefit": "Avoids errors and unnecessary renders",
      "fallback": "pickerTextX returns 0 if no font"
    },
    "worklet_execution": {
      "gesture_handlers": "All gesture callbacks are worklets",
      "derived_values": "All calculations run on UI thread",
      "benefit": "60fps interaction without JS thread involvement",
      "annotations": "'worklet' directive in all callbacks"
    },
    "fixed_constants": {
      "DISTANCE_BETWEEN_SLIDER_AND_METABALL": 10,
      "fontSize": 12,
      "sliderHeight": 12,
      "benefit": "No recalculation needed, compiler can optimize"
    }
  },

  "skia_rendering": {
    "canvas": {
      "component": "Touchable.Canvas",
      "dimensions": {
        "width": "size.width",
        "height": "size.height"
      },
      "transform": "translateX((size.width - sliderSize.width) / 2) for horizontal centering",
      "purpose": "Container for all Skia elements and gesture handling"
    },
    "group_layering": {
      "outer_group": {
        "children": [
          "Group with layer (metaball effect)",
          "Inner white circle",
          "Text"
        ],
        "purpose": "Organizes visual stacking order"
      },
      "layered_group": {
        "layer": "Paint with Blur and ColorMatrix",
        "children": [
          "RoundedRect (slider track)",
          "Circle (picker)"
        ],
        "effect": "Metaball blending between track and picker",
        "isolation": "Layer creates isolated rendering context"
      }
    },
    "slider_track": {
      "component": "Touchable.RoundedRect",
      "dimensions": {
        "width": "sliderSize.width",
        "height": "12px (sliderHeight)"
      },
      "position": {
        "x": 0,
        "y": "roundedRectY (vertically centered)"
      },
      "r": 6,
      "color": "color prop (default '#007AFF')",
      "interaction": "Gesture handler attached here",
      "purpose": "Slider track base shape"
    },
    "picker_circle": {
      "component": "Circle",
      "cx": "clampedPickerX (animated)",
      "cy": "pickerY (animated)",
      "r": "metaballRadius (responsive)",
      "color": "Same as slider track",
      "layer": "Within layered group for metaball effect",
      "purpose": "Draggable picker element"
    },
    "text_background_circle": {
      "component": "Circle",
      "cx": "clampedPickerX (animated)",
      "cy": "pickerY (animated)",
      "r": "pickerCircleTextContainerRadius (80% of picker)",
      "color": "white",
      "layer": "Outside layered group (no blur)",
      "purpose": "Creates readable background for percentage text",
      "z_index": "Rendered after layered group (appears on top)"
    },
    "text_rendering": {
      "component": "Text",
      "font": "Outfit.ttf, size 12",
      "x": "pickerTextX (dynamically centered)",
      "y": "textY (with baseline offset)",
      "text": "pickerCircleText (SharedValue)",
      "color": "black (default)",
      "measurement": "font.measureText() for precise centering",
      "conditional": "Only renders if font loaded"
    },
    "metaball_math": {
      "blur_component": {
        "blur": 4,
        "effect": "Softens edges of shapes"
      },
      "color_matrix": {
        "matrix": [
          1, 0, 0, 0, 0,
          0, 1, 0, 0, 0,
          0, 0, 1, 0, 0,
          0, 0, 0, 50, -25
        ],
        "alpha_formula": "alpha * 50 - 25",
        "threshold_effect": "Alpha < 0.5 becomes transparent, > 0.5 becomes opaque",
        "blending": "Overlapping blur regions combine and exceed threshold",
        "result": "Shapes connect with liquid bridge when close enough"
      }
    }
  },

  "gesture_integration": {
    "library": "react-native-skia-gesture",
    "pattern": "Touchable components with gesture handlers",
    "benefits": [
      "Native gesture handling on Skia elements",
      "No bridge crossing during gestures",
      "Seamless integration with Reanimated SharedValues",
      "Direct manipulation of Skia elements"
    ],
    "gesture_handler_config": {
      "onStart": "Initializes drag, sets position and state",
      "onActive": "Updates position every frame during drag",
      "onEnd": "Cleanup and state reset",
      "all_worklets": true
    },
    "target_element": "Touchable.RoundedRect (slider track)",
    "interaction_area": "Full width of slider track",
    "feedback": "Immediate visual response (Y-axis rise)"
  },

  "mathematical_algorithms": {
    "clamping_algorithm": {
      "formula": "clamp(value, min, max) = Math.max(min, Math.min(value, max))",
      "implementation": "Math.max(radius.value, Math.min(pickerX.value, sliderSize.width - radius.value))",
      "ensures": "radius.value <= clampedPickerX <= sliderSize.width - radius.value",
      "edge_handling": "Prevents picker center from going outside bounds"
    },
    "percentage_mapping": {
      "type": "Linear interpolation",
      "domain": "[metaballRadius, sliderSize.width - metaballRadius]",
      "range": "[0, 100]",
      "formula": "((x - min) / (max - min)) * 100",
      "extrapolation": "CLAMP prevents values outside 0-100",
      "precision": "Rounded to integer"
    },
    "responsive_radius": {
      "formula": "Math.min(20, (height - offset/2) / 3)",
      "constraints": [
        "Never exceeds 20px (aesthetic limit)",
        "Scales with container height",
        "Accounts for spacing offset"
      ],
      "ratio": "Approximately 1/3 of available height",
      "adaptive": true
    },
    "text_centering": {
      "horizontal": "centerX - textWidth/2",
      "vertical": "centerY + fontSize/3",
      "dynamic_width": "Measured per-frame as text changes",
      "baseline_offset": "fontSize/3 for proper alignment",
      "precision": "Pixel-perfect centering"
    },
    "spring_physics": {
      "equation": "Damped harmonic oscillator",
      "parameters": {
        "stiffness": 200,
        "damping": 20,
        "mass": 0.8
      },
      "behavior": "Smooth approach to target with slight overshoot",
      "natural_feel": "Mimics physical spring"
    }
  },

  "visual_design": {
    "color_scheme": {
      "container_background": "#f8f9fa (light gray)",
      "slider_color": "#007AFF (iOS blue, customizable)",
      "text_background": "white",
      "text_color": "black (default)",
      "metaball_color": "Matches slider color"
    },
    "dimensions": {
      "slider_width": "95% of container width",
      "slider_height": "100px (prop, includes space for metaball)",
      "track_height": "12px",
      "track_border_radius": "6px",
      "metaball_radius": "Responsive, max 20px",
      "text_circle_radius": "80% of metaball radius",
      "spacing": "10px between slider and metaball",
      "y_movement": "25px rise on drag"
    },
    "typography": {
      "font": "Outfit.ttf",
      "size": 12,
      "color": "black",
      "format": "Integer percentage (0-100)",
      "positioning": "Dynamically centered"
    },
    "animation_feel": {
      "spring_response": "Medium-fast (stiffness 200)",
      "damping": "Low (20) for subtle bounce",
      "mass": "Light (0.8) for snappy response",
      "overall": "Playful yet refined"
    },
    "metaball_aesthetic": {
      "style": "Organic, liquid morphing",
      "visual_metaphor": "Fluid substance",
      "connection": "Dynamic bridge between track and picker",
      "smoothness": "Seamless blending via GPU effects"
    }
  },

  "responsive_behavior": {
    "width_scaling": {
      "container": "useWindowDimensions() for full window width",
      "slider": "95% of container width",
      "text_measurement": "Dynamic per-frame",
      "benefit": "Works on any screen size"
    },
    "height_scaling": {
      "metaball_radius": "Scales with container height",
      "max_radius": "Capped at 20px for consistency",
      "track_height": "Fixed 12px",
      "spacing": "Proportional calculation"
    },
    "adaptive_constraints": {
      "comment": "Code includes comment: 'In the height you should also consider the space for the Animated Metaball (with the Text)'",
      "recommendation": "Container height should accommodate track + metaball + spacing",
      "minimum_height": "~60px for proper rendering"
    }
  },

  "use_cases": {
    "primary": [
      "Volume sliders with visual flair",
      "Brightness controls",
      "Opacity adjusters",
      "Percentage selectors",
      "Interactive range inputs"
    ],
    "secondary": [
      "Audio equalizers",
      "Color picker saturation/lightness",
      "Video playback speed",
      "Font size selectors",
      "Zoom level controls"
    ],
    "design_contexts": [
      "Modern, playful UI designs",
      "Creative tools and editors",
      "Entertainment apps",
      "Gamified interfaces",
      "Microinteraction showcases"
    ],
    "real_world_inspiration": [
      "Liquid slider animations on Dribbble",
      "Metaball UI effects",
      "iOS Control Center sliders (elevated version)",
      "Creative audio app interfaces"
    ]
  },

  "code_quality": {
    "typescript": "Full TypeScript with explicit types",
    "type_definitions": [
      {
        "name": "FluidSliderProps",
        "properties": {
          "color": "optional string",
          "width": "required number",
          "height": "required number"
        }
      }
    ],
    "constants": {
      "DISTANCE_BETWEEN_SLIDER_AND_METABALL": 10,
      "naming": "SCREAMING_SNAKE_CASE",
      "location": "Module level"
    },
    "documentation": {
      "inline_comments": "Good - explains non-obvious calculations",
      "height_usage_note": "Helpful comment about height prop including metaball space",
      "worklet_annotations": true,
      "eslint_disable": "Only for require() - necessary for font loading"
    },
    "component_structure": {
      "separation": "Clean separation: container -> component -> hook",
      "single_responsibility": "Each file has clear purpose",
      "hook_extraction": "Layout logic properly extracted to custom hook"
    },
    "best_practices": [
      "useMemo for expensive objects",
      "useDerivedValue for reactive calculations",
      "Custom hooks for reusable logic",
      "Conditional rendering for font loading",
      "Worklet annotations for performance",
      "Type safety with TypeScript",
      "Named exports for clarity"
    ],
    "strengths": [
      "Well-organized file structure",
      "Clear separation of concerns",
      "Performance-conscious implementation",
      "Readable and maintainable code",
      "Proper use of Reanimated patterns",
      "Responsive design considerations"
    ],
    "areas_for_improvement": [
      "Could add prop types for spring configuration",
      "Font path could be more flexible",
      "Color prop could have type union for predefined colors",
      "Could expose more customization options",
      "Missing accessibility considerations"
    ]
  },

  "known_limitations": {
    "font_loading": {
      "issue": "Hardcoded font path with require()",
      "location": "components/fluid-slider/index.tsx:97-101",
      "impact": "Not easily customizable",
      "workaround": "Would need code modification to change font",
      "improvement": "Accept font as prop or use system font"
    },
    "fixed_dimensions": {
      "track_height": "Hardcoded to 12px",
      "font_size": "Hardcoded to 12px",
      "border_radius": "Hardcoded to 6px",
      "y_movement": "Hardcoded to 25px",
      "customization": "Limited without modifying source"
    },
    "color_customization": {
      "available": "Single color prop",
      "limitation": "Text and background colors not customizable",
      "text_always_black": "May not work on all backgrounds",
      "improvement": "Separate props for each color"
    },
    "percentage_only": {
      "display": "Always shows 0-100%",
      "limitation": "Cannot show arbitrary value ranges (e.g., 10-50)",
      "improvement": "Add min/max value props"
    },
    "no_step_snapping": {
      "behavior": "Continuous slider, no step intervals",
      "use_case": "Cannot easily select specific increments (e.g., multiples of 5)",
      "improvement": "Add step prop for discrete values"
    },
    "metaball_parameters": {
      "blur": "Fixed at 4",
      "color_matrix": "Hardcoded values",
      "customization": "Cannot adjust metaball strength/appearance",
      "impact": "One-size-fits-all visual effect"
    },
    "accessibility": {
      "missing": "No accessibility labels or semantic hints",
      "screen_readers": "No announcements of value changes",
      "keyboard_navigation": "No keyboard support",
      "reduced_motion": "Animations always active"
    }
  },

  "potential_improvements": {
    "customization": [
      "Configurable spring animation parameters",
      "Adjustable metaball blur intensity",
      "Custom font family/size props",
      "Separate color props for track, picker, text, background",
      "Configurable Y-axis movement distance",
      "Custom track height and border radius",
      "Step/snap intervals for discrete values",
      "Min/max value range props (not just 0-100)"
    ],
    "features": [
      "Haptic feedback on value milestones (25%, 50%, 75%, 100%)",
      "Value label positioning options (inside, above, below)",
      "Multiple picker points (range slider)",
      "Gradient colors for track",
      "Custom shapes for picker (square, triangle, etc.)",
      "Tick marks at intervals",
      "Start/end value labels"
    ],
    "interactions": [
      "Double-tap to reset to default value",
      "Long-press for fine-tuned adjustment",
      "Tap on track to jump to position",
      "Gesture velocity for momentum sliding",
      "Keyboard arrow key support"
    ],
    "accessibility": [
      "Accessibility labels and hints",
      "Screen reader value announcements",
      "Keyboard navigation support",
      "Reduced motion preference handling",
      "High contrast mode support",
      "Voice control integration"
    ],
    "visual_enhancements": [
      "Fill color from start to picker position",
      "Shadow effects for depth",
      "Animated value change transitions",
      "Custom metaball shapes",
      "Particles or trails following picker",
      "Glow effect on active state"
    ],
    "performance": [
      "Lazy font loading",
      "Memoize Skia components",
      "Optional metaball effect toggle for low-end devices",
      "Configurable blur quality"
    ]
  },

  "key_insights": {
    "metaball_technique": "Blur + ColorMatrix is the key to organic metaball effects - alpha channel manipulation creates liquid blending",
    "gesture_integration": "react-native-skia-gesture seamlessly bridges touch events to Skia elements with Reanimated SharedValues",
    "y_axis_feedback": "Vertical movement on interaction is simple but effective feedback mechanism",
    "clamping_pattern": "Math.max(min, Math.min(value, max)) is elegant clamping without conditionals",
    "text_measurement": "Dynamic text centering with font.measureText() ensures pixel-perfect alignment",
    "layer_compositing": "Applying effects to Group layer is more efficient than per-element effects",
    "spring_feel": "Low mass + moderate stiffness creates playful yet refined animation feel",
    "separation_of_concerns": "Custom hook for layout logic keeps component focused on rendering"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Basic Skia rendering (Canvas, Circle, Text)",
      "SharedValue for reactive state",
      "Simple gesture handling",
      "Interpolation basics"
    ],
    "for_intermediate": [
      "Skia gesture integration",
      "useDerivedValue patterns",
      "Spring animations with withSpring",
      "Custom hooks for logic extraction",
      "Clamping algorithms",
      "Font loading and text measurement"
    ],
    "for_advanced": [
      "Metaball rendering with blur and color matrix",
      "Layer compositing in Skia",
      "GPU-accelerated effects",
      "Complex derived value dependencies",
      "Performance optimization strategies",
      "Responsive design with dynamic calculations",
      "Worklet optimization techniques"
    ]
  },

  "comparison_to_alternatives": {
    "vs_native_slider": {
      "native": "Platform-specific appearance, basic functionality",
      "this": "Fully custom, animated, metaball effects",
      "tradeoff": "More complex but much more engaging"
    },
    "vs_rn_slider_component": {
      "component": "Standard Slider from community",
      "this": "Unique visual style with liquid effects",
      "benefit": "Memorable, branded experience"
    },
    "vs_gesture_responder": {
      "responder": "PanResponder or Gesture Handler on View",
      "this": "Integrated with Skia rendering",
      "advantage": "Single unified rendering pipeline, better performance"
    }
  },

  "technical_challenges_and_solutions": {
    "metaball_math": {
      "challenge": "Creating liquid blending effect between shapes",
      "solution": "Blur(4) + ColorMatrix with alpha manipulation (50, -25)",
      "explanation": "Blurred edges overlap and combine, alpha threshold creates sharp boundary",
      "references": "Common metaball technique in graphics programming"
    },
    "gesture_on_skia": {
      "challenge": "Touch events on Skia elements require special handling",
      "solution": "react-native-skia-gesture library with Touchable components",
      "benefit": "Native gesture handling without bridge crossing"
    },
    "dynamic_text_width": {
      "challenge": "Text width changes as percentage changes (1 digit vs 3 digits)",
      "solution": "font.measureText() in useDerivedValue for real-time measurement",
      "benefit": "Always perfectly centered regardless of content"
    },
    "responsive_radius": {
      "challenge": "Picker size needs to scale with container but have limits",
      "solution": "Math.min(20, calculatedValue) for capped responsiveness",
      "benefit": "Works on all sizes without looking too small or too large"
    },
    "font_loading_timing": {
      "challenge": "Font may not be loaded when component mounts",
      "solution": "Conditional rendering {font && <Text />} and null checks",
      "benefit": "Graceful handling of loading state"
    }
  },

  "performance_metrics": {
    "target_fps": 60,
    "runs_on": "UI thread (Reanimated worklets)",
    "gpu_acceleration": "All Skia rendering GPU-accelerated",
    "expected_performance": "Smooth on mid-range devices",
    "critical_optimizations": [
      "useDerivedValue for reactive calculations",
      "Layer compositing for effects",
      "Worklet annotations throughout",
      "useMemo for constant objects"
    ],
    "potential_bottlenecks": [
      "Blur effect on low-end devices (minimal impact at blur=4)",
      "Font measurement per frame (negligible)",
      "ColorMatrix calculation (GPU-handled, fast)"
    ]
  },

  "accessibility_considerations": {
    "current_state": "No accessibility support",
    "recommendations": [
      "Add accessible={true} and accessibilityRole='adjustable'",
      "Implement accessibilityValue with { min: 0, max: 100, now: value }",
      "Add accessibilityLabel 'Slider control'",
      "Add accessibilityHint for usage instructions",
      "Support increment/decrement actions for screen readers",
      "Announce value changes with accessibilityLiveRegion",
      "Respect reduced motion preferences",
      "Add keyboard support for web/desktop"
    ],
    "implementation_effort": "Medium - requires wrapper component with accessibility props"
  },

  "testing_considerations": {
    "visual_tests": [
      "Verify metaball effect appears correctly",
      "Check smooth blending between track and picker",
      "Confirm text stays centered at all positions",
      "Test on various screen sizes",
      "Verify Y-axis rise animation smoothness",
      "Check color customization works"
    ],
    "interaction_tests": [
      "Drag picker across full range",
      "Verify clamping at edges",
      "Test rapid back-and-forth dragging",
      "Confirm percentage updates correctly (0, 50, 100)",
      "Test touch start at any track position",
      "Verify Y-axis animation on release"
    ],
    "edge_cases": [
      "Very small container (< 100px width)",
      "Very large container (> 1000px width)",
      "Tall vs wide aspect ratios",
      "Font loading failures",
      "Percentage at boundary values (0%, 100%)",
      "Rapid mounting/unmounting"
    ],
    "performance_tests": [
      "Measure FPS during continuous dragging",
      "Monitor GPU usage with effects",
      "Test on low-end devices",
      "Check memory usage over time",
      "Verify smooth spring animations"
    ],
    "snapshot_tests": [
      "Picker at start (0%)",
      "Picker at middle (50%)",
      "Picker at end (100%)",
      "Active state (raised)",
      "Inactive state (centered)"
    ]
  },

  "platform_considerations": {
    "ios": {
      "features": "All features fully supported",
      "performance": "Excellent - Metal backend for Skia",
      "gestures": "Native touch handling"
    },
    "android": {
      "features": "All features fully supported",
      "performance": "Excellent - Vulkan backend for Skia",
      "gestures": "Native touch handling"
    },
    "web": {
      "compatibility": "Skia uses CanvasKit on web",
      "performance": "Good, but WASM overhead",
      "considerations": "Larger bundle size with CanvasKit",
      "gestures": "Mouse events translate to touch"
    }
  },

  "related_patterns": {
    "metaball_animations": "Organic blob morphing",
    "liquid_interfaces": "Fluid UI transitions",
    "range_sliders": "Value selection controls",
    "draggable_elements": "Direct manipulation UIs",
    "skia_gestures": "Custom touch interactions on Skia"
  },

  "real_world_inspiration": {
    "dribbble_animations": "Liquid slider concepts",
    "creative_audio_apps": "Metaball volume controls",
    "modern_design_systems": "Playful microinteractions",
    "experimental_uis": "Organic interface elements"
  },

  "bundle_size_impact": {
    "component_size": "Small (~300 lines including hook)",
    "dependencies": [
      "@shopify/react-native-skia (likely already in project)",
      "react-native-reanimated (likely already in project)",
      "react-native-skia-gesture (may be new dependency)"
    ],
    "font_asset": "Outfit.ttf (needs to be included)",
    "estimated_addition": "~2KB component code + skia-gesture if new (~50KB)"
  },

  "tags": [
    "slider",
    "metaball",
    "fluid",
    "liquid",
    "skia",
    "reanimated",
    "gesture",
    "interactive",
    "morphing",
    "blur",
    "color-matrix",
    "spring-animation",
    "percentage",
    "range-input",
    "gpu-accelerated",
    "ui-thread",
    "touchable",
    "custom-control",
    "organic",
    "playful"
  ]
}
