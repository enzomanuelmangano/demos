{
  "animation_name": "Fractal Glass",
  "animation_slug": "fractal-glass",
  "description": "An interactive glassmorphic effect featuring a draggable circle with fractalized gradient masking. The animation uses Skia's masking capabilities to create a frosted glass appearance with a grid of diagonal gradients that blur the circle's edges. Includes a theme toggle button with smooth color transitions between light and dark modes.",

  "main_features": [
    "Pan gesture-driven circle movement with smooth tracking",
    "Fractal gradient mask with configurable grid density",
    "Alpha masking for selective blur application",
    "Inverted clipping to separate masked and unmasked portions",
    "Theme switching between light and dark modes",
    "Smooth color interpolation on theme change",
    "Glassmorphic blur effect (25px) with decal mode",
    "PressableScale animated button with spring feedback",
    "Dynamic gradient generation based on grid parameters",
    "Dual-layer rendering: base circle and blurred masked circle"
  ],

  "file_structure": {
    "index.tsx": "Main FractalGlass component with gesture handling, theme state, canvas rendering, and floating theme toggle button",
    "components/fractal-glass-mask.tsx": "Reusable mask component that generates a grid of diagonal linear gradients for fractal glass effect"
  },

  "core_technologies": {
    "rendering": "@shopify/react-native-skia",
    "animations": "react-native-reanimated",
    "gestures": "react-native-gesture-handler",
    "interactions": "pressto (PressableScale)"
  },

  "packages_and_versions": {
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "components": [
        "Canvas",
        "Circle",
        "Group",
        "Mask",
        "Blur",
        "Rect",
        "LinearGradient"
      ],
      "utilities": ["vec", "rect"],
      "usage": "GPU-accelerated rendering of masked circles with blur effects and gradient-based masking",
      "critical_features": [
        "Alpha masking mode for selective opacity",
        "Inverted clipping for layer separation",
        "Decal blur mode for edge handling"
      ]
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle",
        "useDerivedValue"
      ],
      "functions": ["withTiming"],
      "critical_feature": "Smooth theme transitions with withTiming and color interpolation for theme changes"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": ["Gesture", "GestureDetector"],
      "gestures_used": ["Pan"],
      "usage": "Handles drag interaction for circle movement with begin/update lifecycle"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "components": ["PressableScale"],
      "usage": "Animated theme toggle button with spring-based scale feedback"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "components": ["Octicons"],
      "icons_used": ["sun", "moon"],
      "usage": "Theme toggle button icons"
    }
  },

  "animation_techniques": {
    "pan_gesture_tracking": {
      "pattern": "Pan gesture with begin/update handlers and previous value storage",
      "shared_values": {
        "cx": "Current x position",
        "cy": "Current y position",
        "prevCx": "Position at gesture start",
        "prevCy": "Position at gesture start"
      },
      "implementation": {
        "onBegin": "Store current position in prev values",
        "onUpdate": "Add translation to previous position (prevCx + translationX)"
      },
      "benefit": "Smooth, continuous dragging without jumps or resets",
      "position_persistence": "Circle maintains position between drags"
    },
    "fractal_gradient_masking": {
      "pattern": "Grid-based diagonal gradient generation",
      "grid_configuration": {
        "gradientsN": 4,
        "total_gradients": "16 (4x4 grid)"
      },
      "calculation": {
        "cell_width": "width / gradientsN",
        "cell_height": "height / gradientsN",
        "gradient_start": "vec(gradientX, gradientY)",
        "gradient_end": "vec(gradientX + gradientWidth - 5, gradientY + gradientHeight - 5)"
      },
      "gradient_colors": "['white', 'rgba(0,0,0,0.45)']",
      "direction": "Diagonal (top-left to bottom-right)",
      "effect": "Creates fractalized opacity pattern for sophisticated glass effect",
      "key_insight": "Grid of gradients creates more interesting masking than single gradient"
    },
    "alpha_masking": {
      "pattern": "Skia Mask component with 'alpha' mode",
      "mask_content": "FractalGlassMask component (grid of gradients)",
      "masked_content": "Blurred circle",
      "mode": "alpha",
      "effect": "White areas of mask = full opacity, black/transparent = invisible",
      "gradient_impact": "Creates partially transparent areas for glass effect",
      "clip_bounds": "Clipped to card rectangle for clean edges"
    },
    "inverted_clipping": {
      "pattern": "Group with invertClip prop",
      "purpose": "Render base circle everywhere EXCEPT the card area",
      "layers": [
        {
          "layer": 1,
          "description": "Base circle with inverted clip (outside card)",
          "component": "Group with invertClip, no blur"
        },
        {
          "layer": 2,
          "description": "Masked circle with blur (inside card)",
          "component": "Group with normal clip + Mask + Blur"
        }
      ],
      "visual_result": "Circle appears solid outside card, blurred/masked inside card",
      "key_technique": "Same circle rendered twice with different effects"
    },
    "theme_color_transitions": {
      "pattern": "withTiming on theme change for smooth color interpolation",
      "timing_config": "Default easing",
      "animated_properties": [
        {
          "property": "backgroundColor",
          "light": "white",
          "dark": "black",
          "applied_to": "Main container background"
        },
        {
          "property": "circle color",
          "light": "orange",
          "dark": "#78C0E0 (cyan/blue)",
          "applied_to": "Both circle instances (base and masked)"
        },
        {
          "property": "button backgroundColor",
          "light": "orange",
          "dark": "#78C0E0",
          "applied_to": "Floating theme toggle button"
        }
      ],
      "implementation": "useDerivedValue with withTiming wrapper for smooth transitions"
    },
    "blur_effect": {
      "component": "Blur",
      "blur_amount": 25,
      "mode": "decal",
      "applied_to": "Masked circle only (not base circle)",
      "purpose": "Creates frosted glass appearance",
      "decal_mode": "Prevents blur from extending outside bounds, clamps to edges",
      "performance": "GPU-accelerated via Skia"
    },
    "dual_circle_rendering": {
      "circle_1": {
        "location": "Outside card area (inverted clip)",
        "effects": "None - solid color",
        "purpose": "Base draggable circle"
      },
      "circle_2": {
        "location": "Inside card area (normal clip)",
        "effects": "Mask + Blur",
        "purpose": "Glassmorphic effect circle"
      },
      "shared_properties": {
        "cx": "Same position (shared value)",
        "cy": "Same position (shared value)",
        "r": 100,
        "color": "Same theme-based color"
      }
    }
  },

  "component_architecture": {
    "fractal_glass": {
      "type": "Main demo component",
      "state": {
        "theme": {
          "type": "useState<'light' | 'dark'>",
          "initial": "light",
          "usage": "Controls color scheme"
        }
      },
      "shared_values": {
        "cx": {
          "initial": 180,
          "usage": "Circle x coordinate"
        },
        "cy": {
          "initial": 270,
          "usage": "Circle y coordinate"
        },
        "prevCx": {
          "initial": 0,
          "usage": "Gesture start x position"
        },
        "prevCy": {
          "initial": 0,
          "usage": "Gesture start y position"
        }
      },
      "derived_values": {
        "circleColor": {
          "dependencies": ["theme"],
          "calculation": "withTiming(theme === 'light' ? 'orange' : '#78C0E0')",
          "usage": "Animated circle color for both instances"
        }
      },
      "constants": {
        "CircleRadius": 100,
        "x": 40,
        "height": 300,
        "y": "(windowHeight - height) / 2",
        "width": "windowWidth - x * 2",
        "gradientsAmount": 4
      }
    },
    "fractal_glass_mask": {
      "type": "Reusable mask generator component",
      "props": {
        "x": {
          "type": "number",
          "required": true,
          "usage": "Card x position"
        },
        "y": {
          "type": "number",
          "required": true,
          "usage": "Card y position"
        },
        "width": {
          "type": "number",
          "required": true,
          "usage": "Card width"
        },
        "height": {
          "type": "number",
          "required": true,
          "usage": "Card height"
        },
        "gradientsN": {
          "type": "number",
          "required": true,
          "usage": "Grid size (4 = 4x4 = 16 gradients)"
        }
      },
      "rendering": "Nested loops generating gradientsN x gradientsN Rect components with LinearGradient fills",
      "reusability": "Fully configurable via props, can be used for different mask sizes and densities"
    }
  },

  "gesture_handling": {
    "pan_gesture": {
      "type": "Gesture.Pan()",
      "lifecycle": {
        "onBegin": {
          "trigger": "Finger touches and starts moving",
          "action": "Save current cx/cy to prevCx/prevCy",
          "purpose": "Establish drag reference point"
        },
        "onUpdate": {
          "trigger": "Finger moves",
          "action": "cx = prevCx + translationX, cy = prevCy + translationY",
          "frequency": "Every frame",
          "effect": "Circle follows finger smoothly"
        }
      },
      "translation_handling": {
        "pattern": "Cumulative translation from gesture start",
        "formula": "newPosition = startPosition + translation",
        "benefit": "Smooth dragging without position jumps"
      },
      "detector_target": {
        "component": "Animated.View (fake circle for touch target)",
        "size": "CircleRadius * 2 (200x200)",
        "position": "Follows cx/cy via useAnimatedStyle",
        "z_index": 100,
        "visibility": "Invisible (no background), but captures touches"
      }
    },
    "touch_target_positioning": {
      "pattern": "useAnimatedStyle updating left/top based on circle position",
      "calculation": {
        "left": "cx.value - CircleRadius",
        "top": "cy.value - CircleRadius"
      },
      "dimensions": {
        "height": "CircleRadius * 2",
        "width": "CircleRadius * 2"
      },
      "centering": "Touch target centered on circle position"
    }
  },

  "theme_system": {
    "implementation": "React useState with manual toggle",
    "themes": {
      "light": {
        "background": "white",
        "circle": "orange",
        "button": "orange",
        "icon": "moon"
      },
      "dark": {
        "background": "black",
        "circle": "#78C0E0 (cyan)",
        "button": "#78C0E0",
        "icon": "sun"
      }
    },
    "transitions": {
      "method": "withTiming (default easing)",
      "animated_elements": [
        "Container background",
        "Circle color (both instances)",
        "Button background"
      ],
      "icon_change": "Instant (not animated)"
    },
    "toggle_button": {
      "component": "PressableScale",
      "position": "bottom: 64, right: 64",
      "size": "58px square (aspectRatio: 1)",
      "animation": "Spring-based scale on press",
      "z_index": 100,
      "style": "Circular (borderRadius: 29), white icon"
    }
  },

  "skia_rendering": {
    "canvas": {
      "style": "{ flex: 1 }",
      "size": "Full screen",
      "background": "Animated via parent Animated.View"
    },
    "rendering_order": [
      {
        "layer": 1,
        "element": "Base circle (outside card area)",
        "clip": "fractalGlassMaskPath with invertClip",
        "effects": "None",
        "color": "circleColor (theme-based)"
      },
      {
        "layer": 2,
        "element": "Masked circle (inside card area)",
        "clip": "fractalGlassMaskPath (normal)",
        "effects": "Alpha mask + 25px decal blur",
        "color": "circleColor (theme-based)",
        "mask": "FractalGlassMask (4x4 gradient grid)"
      }
    ],
    "clip_path": {
      "name": "fractalGlassMaskPath",
      "type": "SkRect",
      "calculation": "rect(x, y, width, height)",
      "values": "rect(40, centerY - 150, windowWidth - 80, 300)",
      "shape": "Rectangular card area"
    },
    "commented_code": {
      "note": "Lines 98-104 show standalone FractalGlassMask usage (commented out)",
      "purpose": "Alternative implementation without blur/masking",
      "current_implementation": "Uses mask within Circle for more sophisticated effect"
    }
  },

  "mathematical_relationships": {
    "grid_calculations": {
      "cell_width": "totalWidth / gradientsN = (windowWidth - 80) / 4",
      "cell_height": "totalHeight / gradientsN = 300 / 4 = 75px",
      "cell_position_x": "x + cellWidth * columnIndex",
      "cell_position_y": "y + cellHeight * rowIndex",
      "total_cells": "gradientsN² = 16 cells"
    },
    "gradient_endpoints": {
      "start": "vec(cellX, cellY)",
      "end": "vec(cellX + cellWidth - 5, cellY + cellHeight - 5)",
      "offset": "-5px offset prevents exact corner alignment",
      "effect": "Creates slightly overlapping gradient feel"
    },
    "circle_positioning": {
      "touch_target_left": "cx - CircleRadius",
      "touch_target_top": "cy - CircleRadius",
      "gesture_update": "position = startPosition + translation"
    },
    "card_positioning": {
      "x": "40px from left",
      "y": "(windowHeight - 300) / 2 (vertically centered)",
      "width": "windowWidth - 80 (40px margin each side)",
      "height": "300px (fixed)"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "cx",
        "type": "SharedValue<number>",
        "initial": 180,
        "updates": "Pan gesture onUpdate",
        "usage": "Circle x coordinate"
      },
      {
        "name": "cy",
        "type": "SharedValue<number>",
        "initial": 270,
        "updates": "Pan gesture onUpdate",
        "usage": "Circle y coordinate"
      },
      {
        "name": "prevCx",
        "type": "SharedValue<number>",
        "initial": 0,
        "updates": "Pan gesture onBegin",
        "usage": "Drag start x reference"
      },
      {
        "name": "prevCy",
        "type": "SharedValue<number>",
        "initial": 0,
        "updates": "Pan gesture onBegin",
        "usage": "Drag start y reference"
      }
    ],
    "useAnimatedStyle": {
      "usage_count": 3,
      "instances": [
        {
          "name": "rBackgroundStyle",
          "animated_properties": ["backgroundColor"],
          "dependencies": ["theme"],
          "purpose": "Animate background color on theme change"
        },
        {
          "name": "rFloatingBackgroundStyle",
          "animated_properties": ["backgroundColor"],
          "dependencies": ["circleColor.value"],
          "purpose": "Animate button background color"
        },
        {
          "name": "rFakeCircleStyle",
          "animated_properties": ["left", "top"],
          "dependencies": ["cx.value", "cy.value"],
          "purpose": "Position invisible touch target"
        }
      ]
    },
    "useDerivedValue": {
      "usage_count": 1,
      "instance": {
        "name": "circleColor",
        "dependencies": ["theme"],
        "calculation": "withTiming(theme === 'light' ? 'orange' : '#78C0E0')",
        "purpose": "Smooth color transition on theme change",
        "benefit": "Single source of truth for circle color used in multiple places"
      }
    },
    "withTiming": {
      "usage_count": 2,
      "instances": [
        {
          "location": "circleColor",
          "animated_value": "Color string",
          "config": "Default",
          "trigger": "Theme change"
        },
        {
          "location": "rBackgroundStyle",
          "animated_value": "Background color",
          "config": "Default",
          "trigger": "Theme change"
        }
      ]
    }
  },

  "visual_design": {
    "color_schemes": {
      "light_mode": {
        "background": "white",
        "circle": "orange",
        "button": "orange",
        "button_icon": "white moon"
      },
      "dark_mode": {
        "background": "black",
        "circle": "#78C0E0 (cyan/blue)",
        "button": "#78C0E0",
        "button_icon": "white sun"
      }
    },
    "glassmorphic_effect": {
      "mask": "4x4 grid of diagonal gradients (white to rgba(0,0,0,0.45))",
      "blur": "25px decal mode",
      "result": "Fractalized frosted glass appearance",
      "sophistication": "Grid pattern creates more interesting effect than single gradient"
    },
    "card_dimensions": {
      "width": "Screen width - 80px",
      "height": "300px",
      "position": "Centered vertically, 40px horizontal margins",
      "shape": "Rectangle (not rounded in clip path)"
    },
    "circle": {
      "radius": "100px",
      "diameter": "200px",
      "initial_position": "cx: 180, cy: 270",
      "color_transition": "Smooth withTiming on theme change",
      "appearances": "Two instances (solid outside card, masked inside)"
    },
    "floating_button": {
      "size": "58x58px",
      "shape": "Circular (borderRadius: 29)",
      "position": "bottom-right corner (64px from edges)",
      "icon_size": "24px",
      "icon_color": "white",
      "background": "Matches circle color",
      "interaction": "PressableScale with spring physics"
    }
  },

  "performance_optimizations": {
    "skia_rendering": {
      "benefit": "GPU-accelerated, handles complex masking and blur at 60fps",
      "technique": "Native Skia engine for all drawing operations"
    },
    "gesture_handler": {
      "benefit": "Native gesture handling, runs on UI thread",
      "pattern": "Direct shared value updates in gesture callbacks"
    },
    "derived_values": {
      "pattern": "useDerivedValue for color computation",
      "benefit": "Automatic recalculation only when theme changes",
      "avoids": "Manual color updates in multiple locations"
    },
    "single_canvas": {
      "benefit": "One Canvas for all Skia rendering",
      "performance": "Minimal overhead, native rendering"
    },
    "component_structure": {
      "mask_component": "Separate FractalGlassMask component",
      "benefit": "Clean separation, potentially reusable",
      "note": "Gradients generated on render but layout is static"
    },
    "fake_circle_optimization": {
      "pattern": "Invisible Animated.View for touch target",
      "benefit": "Separates gesture handling from Skia rendering",
      "z_index": "High (100) ensures touch events captured first"
    }
  },

  "use_cases": {
    "primary": [
      "Interactive glassmorphic effect demonstrations",
      "Draggable UI elements with sophisticated visual effects",
      "Design system component showcases",
      "Animation portfolio pieces",
      "Tutorial examples for Skia masking techniques"
    ],
    "secondary": [
      "Frosted glass UI overlays",
      "Interactive card reveals",
      "Draggable widgets with visual effects",
      "Theme transition demonstrations",
      "Skia masking technique examples"
    ],
    "educational": [
      "Teaching alpha masking concepts",
      "Demonstrating inverted clipping",
      "Showing gesture + animation integration",
      "Explaining fractal/grid-based visual effects",
      "Theme system implementation examples"
    ],
    "real_world_adaptations": [
      "Draggable spotlight/magnifier effects",
      "Interactive product showcases",
      "Onboarding tutorials with draggable elements",
      "Image editing tools (selective blur)",
      "Creative UI experiments"
    ],
    "not_recommended_for": [
      "Production UI elements (too computationally intensive)",
      "List items (performance concern)",
      "Forms or critical interactions (gesture conflicts)",
      "Accessibility-critical features (complex visual effect)"
    ]
  },

  "code_quality": {
    "typescript": {
      "coverage": "Full TypeScript with explicit types",
      "type_definitions": ["Theme type alias", "FractalGlassMaskProps interface"],
      "type_safety": "Explicit prop types, SharedValue typing, FC generic usage"
    },
    "component_structure": {
      "separation": "Clean separation between main component and mask generator",
      "reusability": "FractalGlassMask fully reusable with props",
      "organization": "Logical grouping of related functionality"
    },
    "constants_and_magic_numbers": {
      "CircleRadius": "Named constant (100)",
      "defined_constants": [
        "CircleRadius (100)",
        "x (40)",
        "height (300)",
        "gradientsAmount (4)"
      ],
      "magic_numbers": {
        "initial_positions": "cx: 180, cy: 270 - could be computed from screen center",
        "gradient_offset": "-5 in gradient end calculation - could be named",
        "blur_amount": "25 - could be extracted as constant",
        "button_positioning": "64, 58, 29 - could be named constants"
      }
    },
    "naming_conventions": {
      "components": "PascalCase (FractalGlass, FractalGlassMask)",
      "props": "camelCase (gradientsN)",
      "types": "PascalCase (Theme, FractalGlassMaskProps)",
      "shared_values": "camelCase (cx, cy, prevCx)",
      "animated_styles": "rStyle prefix (rBackgroundStyle, rFakeCircleStyle)",
      "gestures": "camelCase (panGesture)"
    },
    "best_practices": [
      "Type-safe props with interfaces",
      "Shared value pattern for gesture state",
      "Derived values for computed properties",
      "Clean gesture lifecycle handling",
      "Separate mask component for reusability"
    ],
    "areas_for_improvement": [
      "Extract magic numbers to named constants",
      "Add PropTypes or default props for FractalGlassMask",
      "Consider memoizing FractalGlassMask to prevent re-renders",
      "Add comments explaining the masking technique",
      "Document the gradient offset (-5) reasoning",
      "Compute initial circle position from screen dimensions",
      "Add accessibility labels and hints"
    ]
  },

  "known_limitations": {
    "performance": {
      "issue": "16 gradients + masking + blur is computationally intensive",
      "impact": "May struggle on very low-end devices",
      "mitigation": "Skia is GPU-accelerated, should run smoothly on most devices",
      "consideration": "Test on target device range"
    },
    "commented_code": {
      "location": "Lines 98-104 in index.tsx",
      "issue": "Commented-out FractalGlassMask standalone usage",
      "impact": "Code cleanliness, potential confusion",
      "recommendation": "Remove commented code or document why it's preserved"
    },
    "gesture_boundaries": {
      "limitation": "Circle can be dragged anywhere on screen, no boundaries",
      "enhancement": "Could add bounds checking to keep circle visible",
      "current_behavior": "Circle can be dragged completely off-screen"
    },
    "fixed_configuration": {
      "issue": "Card position, size, gradient count are hardcoded",
      "enhancement": "Could be props for reusability",
      "current_design": "Optimized for specific visual effect"
    },
    "touch_target_visibility": {
      "issue": "Invisible touch target may confuse users about draggable area",
      "enhancement": "Could add visual affordance (cursor, outline, shadow)",
      "current_design": "Clean minimal aesthetic"
    },
    "theme_persistence": {
      "limitation": "Theme state not persisted across app restarts",
      "enhancement": "Could use AsyncStorage or similar",
      "current_scope": "Demo/portfolio piece"
    },
    "accessibility": {
      "missing": [
        "accessibilityLabel for draggable circle",
        "accessibilityHint for gesture instructions",
        "Screen reader support",
        "Reduced motion support",
        "Keyboard navigation",
        "Focus indicators"
      ],
      "impact": "Not accessible to users with disabilities"
    }
  },

  "potential_improvements": {
    "interaction_enhancements": [
      "Add boundary constraints to keep circle visible",
      "Snap circle to center on double-tap",
      "Add rotation gesture",
      "Pinch to scale circle radius",
      "Velocity-based momentum after drag release",
      "Haptic feedback on drag start/end"
    ],
    "visual_enhancements": [
      "Animate gradient count on theme change",
      "Add color picker for circle color",
      "Animated card appearance (slide in, fade in)",
      "Multiple draggable circles with layering",
      "Different mask patterns (radial, spiral, etc.)",
      "Glow effect around circle",
      "Shadow cast by circle on card"
    ],
    "customization_options": [
      "Props for card size and position",
      "Configurable blur amount",
      "Customizable gradient colors in mask",
      "Variable grid density (gradientsN)",
      "Circle radius control",
      "Theme color customization"
    ],
    "performance": [
      "Memoize FractalGlassMask component",
      "Reduce gradient count on low-end devices",
      "Optional quality settings (fewer gradients = better performance)",
      "Lazy load blur effect"
    ],
    "code_quality": [
      "Remove commented code or document purpose",
      "Extract magic numbers to constants",
      "Add JSDoc comments",
      "Improve prop validation",
      "Add error boundaries",
      "Compute initial position from screen dimensions"
    ],
    "accessibility": [
      "Add gesture instructions",
      "Support reduced motion (disable blur)",
      "Keyboard navigation for theme toggle",
      "Screen reader announcements",
      "Focus indicators",
      "Alternative text descriptions"
    ]
  },

  "key_insights": {
    "fractal_masking_technique": "Grid of diagonal gradients creates more sophisticated mask than single gradient",
    "inverted_clipping_power": "Same circle rendered twice with invertClip creates seamless transition between effects",
    "alpha_masking_flexibility": "Alpha mode allows gradient-based transparency for nuanced glass effects",
    "decal_blur_mode": "Prevents blur from bleeding outside bounds, essential for clean masking",
    "gesture_state_persistence": "Storing prevCx/prevCy on gesture begin enables smooth continuous dragging",
    "invisible_touch_target": "Separating gesture handling from Skia rendering improves organization",
    "derived_color_value": "useDerivedValue with withTiming creates smooth theme transitions across multiple uses",
    "dual_layer_rendering": "Two circles with different effects in different regions creates sophisticated interaction",
    "theme_system_simplicity": "Simple useState sufficient for theme with derived values handling animations"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Basic pan gesture handling with react-native-gesture-handler",
      "useSharedValue for animation state",
      "useAnimatedStyle for position updates",
      "Theme toggle implementation with useState",
      "PressableScale for button interactions",
      "Skia Canvas basics"
    ],
    "for_intermediate": [
      "Alpha masking with Skia Mask component",
      "Group clipping and invertClip usage",
      "useDerivedValue for computed animations",
      "withTiming for smooth transitions",
      "Gesture lifecycle (onBegin/onUpdate) patterns",
      "Creating reusable mask components",
      "Linear gradient generation in loops",
      "Touch target positioning with useAnimatedStyle"
    ],
    "for_advanced": [
      "Sophisticated masking techniques (fractal/grid-based)",
      "Dual-layer rendering with inverted clips",
      "Blur modes (decal) and their applications",
      "Gesture + Skia integration architecture",
      "Performance optimization with GPU acceleration",
      "Creating glassmorphic effects with Skia",
      "Dynamic gradient generation patterns",
      "Theme system architecture with animations"
    ]
  },

  "testing_considerations": {
    "visual_regression": [
      "Gradient mask renders correctly (16 diagonal gradients)",
      "Blur applies only inside card area",
      "Circle appears solid outside card",
      "Theme colors transition smoothly",
      "Button background matches circle color",
      "Icon changes on theme toggle"
    ],
    "interaction_testing": [
      "Circle follows drag smoothly",
      "No jumps when starting new drag",
      "Circle maintains position between drags",
      "Theme button responds to press",
      "Scale animation on button press",
      "Theme toggle changes all colors"
    ],
    "edge_cases": [
      "Circle dragged off-screen (partially or fully)",
      "Very rapid dragging",
      "Multiple rapid theme toggles",
      "Drag interruption (finger lift mid-drag)",
      "Very small screen sizes",
      "Very large screens (tablets)",
      "Extreme aspect ratios"
    ],
    "performance_testing": [
      "Maintains 60fps during drag",
      "No frame drops on theme change",
      "Smooth on low-end devices",
      "Memory stable over time",
      "No gradual performance degradation"
    ],
    "cross_platform": [
      "Gesture handling on iOS vs Android",
      "Blur rendering consistency",
      "Color interpolation accuracy",
      "Button positioning on different screens",
      "Safe area handling"
    ]
  },

  "comparison_to_similar_patterns": {
    "vs_simple_backdrop_blur": {
      "alternative": "Single BackdropFilter with blur",
      "this_approach": "Fractal gradient mask + Skia alpha masking",
      "benefits": "More sophisticated visual effect, customizable pattern",
      "tradeoffs": "More complex, potentially heavier"
    },
    "vs_single_gradient_mask": {
      "alternative": "One linear gradient mask",
      "this_approach": "Grid of 16 diagonal gradients",
      "benefits": "More interesting fractal pattern, sophisticated appearance",
      "tradeoffs": "16x gradient components (still GPU-accelerated)"
    },
    "vs_css_backdrop_filter": {
      "alternative": "Web-style backdrop-filter",
      "this_approach": "Skia masking with custom patterns",
      "benefits": "More control, custom patterns, mobile-optimized",
      "tradeoffs": "Platform-specific (not web-standard)"
    }
  },

  "related_patterns": {
    "glassmorphism": "Frosted glass UI effects",
    "alpha_masking": "Opacity-based masking techniques",
    "drag_and_drop": "Pan gesture patterns",
    "theme_switching": "Dark/light mode implementations",
    "spotlight_effects": "Selective reveal animations"
  },

  "real_world_inspiration": {
    "ios_frosted_glass": "Apple's translucent UI overlays",
    "material_design_scrim": "Material backdrop effects",
    "glass_ui_trend": "Glassmorphism design trend (2020-2021)",
    "magnifier_tools": "iOS magnifier/loupe effects"
  },

  "bundle_size_impact": {
    "code_size": "~171 lines total (index: 122 lines, mask component: 49 lines)",
    "dependencies": {
      "skia": "Likely already in project",
      "reanimated": "Likely already in project",
      "gesture-handler": "Likely already in project",
      "pressto": "Small library for pressable components"
    },
    "runtime_memory": "Moderate - 4 SharedValues, 16 gradient objects, blur effect",
    "estimated_additional": "< 8KB (excluding shared dependencies)"
  },

  "accessibility_considerations": {
    "current_state": {
      "screen_readers": "No accessibility labels",
      "keyboard_navigation": "Not implemented",
      "reduced_motion": "No support",
      "touch_target": "Invisible - no visual affordance for draggable area",
      "color_contrast": "Should verify in both themes",
      "focus_indicators": "None"
    },
    "recommendations": [
      "Add accessibilityLabel to draggable circle area",
      "Add accessibilityHint: 'Drag to move the circle'",
      "Set accessibilityRole appropriately",
      "Respect prefers-reduced-motion (disable blur or simplify)",
      "Add visual affordance for draggable area (outline, shadow, icon)",
      "Ensure button has proper accessibility labels",
      "Add focus indicators for keyboard users",
      "Test with screen readers (VoiceOver, TalkBack)",
      "Verify color contrast meets WCAG standards"
    ],
    "implementation_suggestions": {
      "reduced_motion": "Disable blur and reduce gradient count when motion reduced",
      "draggable_affordance": "Add subtle border or icon to indicate draggability",
      "screen_reader": "Wrap gesture area in accessible View with proper labels",
      "keyboard": "Add keyboard controls for theme toggle"
    }
  },

  "tags": [
    "fractal-glass",
    "glassmorphism",
    "skia",
    "masking",
    "alpha-mask",
    "blur",
    "pan-gesture",
    "draggable",
    "theme-switching",
    "inverted-clipping",
    "gradient-mask",
    "reanimated",
    "gesture-handler",
    "interactive",
    "frosted-glass",
    "gpu-accelerated",
    "grid-pattern",
    "dual-layer-rendering"
  ]
}
