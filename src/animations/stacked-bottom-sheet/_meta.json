{
  "animation_name": "Stacked Bottom Sheet",
  "animation_slug": "stacked-bottom-sheet",
  "description": "An advanced stacked bottom sheet manager that displays multiple overlapping sheets with depth effects. Features include intelligent ID management for stacking order, pan gesture dismissal, scale and shadow transitions for depth perception, and a context-based API for programmatic control. Sheets automatically reposition when others are dismissed, creating a card-stack effect similar to iOS's Safari tabs or notification center.",

  "main_features": [
    "Multiple stacked sheets with depth effects",
    "Intelligent ID-based stacking system",
    "Pan gesture to dismiss active sheet",
    "Scale transformation for depth perception (5% reduction per level)",
    "Dynamic shadow opacity and radius based on stack position",
    "Automatic repositioning on sheet dismissal",
    "Context-based provider architecture",
    "Swipe down to dismiss gesture with spring animation",
    "Customizable component height per sheet",
    "Memory optimization with ref-based memoization",
    "Conditional content rendering for performance",
    "Drag handle indicator component",
    "Smooth entrance animations from bottom",
    "Z-index management for proper layering",
    "Responsive width (90% of screen)"
  ],

  "file_structure": {
    "entries": {
      "index.tsx": "Main export with GestureHandlerRootView, SafeAreaProvider, and StackedSheetProvider wrapper"
    },
    "components": {
      "src/index.tsx": "Demo app with button to show action tray",
      "src/stacked-sheet-manager/context.ts": "Context definitions for public and internal sheet management",
      "src/stacked-sheet-manager/stacked-sheet-provider.tsx": "Provider component managing sheet state and lifecycle",
      "src/stacked-sheet-manager/stacked-sheet.tsx": "Individual sheet component with gestures and animations",
      "src/stacked-sheet-manager/stacked-sheet-handle.tsx": "Visual drag handle indicator",
      "src/stacked-sheet-manager/index.ts": "Barrel export for public API"
    },
    "hooks": {
      "src/stacked-sheet-manager/hooks.ts": "Custom hooks for sheet context access (useStackedSheet, useInternalStackedSheet)",
      "src/hook.tsx": "Demo hook with multiple sheet configurations"
    },
    "utils": {},
    "assets": {},
    "types": {
      "context.ts": "StackedSheetType, InternalStackedSheetContextType type definitions"
    },
    "constants": {
      "stacked-sheet.tsx": "BaseSafeArea constant for positioning"
    },
    "screens": {
      "src/screens/the-magic.tsx": "Demo screen component showing Spiral animation integration"
    }
  },

  "core_technologies": [
    "react-native-reanimated",
    "react-native-gesture-handler",
    "react-native-worklets",
    "pressto",
    "react-native-safe-area-context"
  ],

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "components": ["Animated.View"],
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle"
      ],
      "utilities": [
        "withSpring",
        "withTiming"
      ],
      "performance_reason": "UI thread animations for smooth stacking transitions and gesture handling",
      "critical_feature": "Shared values for managing multiple sheet positions simultaneously"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": [
        "GestureHandlerRootView",
        "GestureDetector",
        "Gesture"
      ],
      "gestures": ["Pan"],
      "usage": "Pan gesture for swipe-to-dismiss on active sheet with enabled/disabled states"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "imports": ["scheduleOnRN"],
      "usage": "Bridge worklet callbacks to JS thread for dismissing sheets from gesture handlers"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "component": "PressableScale",
      "usage": "Demo button with scale press animation"
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "component": "SafeAreaProvider",
      "usage": "Ensures proper rendering within safe areas across devices"
    }
  },

  "animation_techniques": [
    {
      "name": "Stacked Depth Effect",
      "pattern": "Scale transformation based on stack position",
      "implementation": "scale = 1 - stackedSheetId * 0.05",
      "effect": "Each sheet behind the active one is 5% smaller, creating depth",
      "animation": "withSpring for smooth scale transitions"
    },
    {
      "name": "Dynamic Shadow System",
      "pattern": "Shadow radius and opacity interpolated by stack position",
      "shadow_radius": "withTiming(Math.max(10 - stackedSheetId * 2.5, 2))",
      "shadow_opacity": "withTiming(Math.max(0.1 - stackedSheetId * 0.025, 0.05))",
      "effect": "Sheets further back have smaller, lighter shadows for depth perception"
    },
    {
      "name": "Intelligent Bottom Positioning",
      "algorithm": "Calculates bottom position based on tallest sheet and current sheet height",
      "formula": "biggestItemHeight - currentHeight + Math.sign(id) * 35",
      "purpose": "Aligns all sheet tops while accounting for different heights",
      "offset": "35px between visible stacked sheets"
    },
    {
      "name": "Entrance Animation",
      "initial_position": "Active sheet: -componentHeight (below screen), Others: BaseSafeArea (50px)",
      "animation": "withSpring to BaseSafeArea + bottomHeight",
      "spring_config": "stiffness: 100, mass: 1, overshootClamping: false",
      "effect": "Active sheet slides up from bottom, others appear in place"
    },
    {
      "name": "Swipe to Dismiss",
      "gesture": "Gesture.Pan() enabled only on active sheet (id === 0)",
      "constraint": "Prevents upward dragging (event.translationY < 0 returns early)",
      "threshold": "event.translationY > -50",
      "dismiss_action": "Spring animation to componentHeight + BaseSafeArea with overshootClamping",
      "callback": "scheduleOnRN(onDismiss, stackedSheetId) after animation completes"
    },
    {
      "name": "ID Reordering System",
      "on_add": "Increment all existing IDs by 1, add new sheet with id: 0",
      "on_dismiss": "Remove dismissed sheet, decrement IDs of sheets with higher IDs",
      "benefit": "Active sheet always has id: 0, maintaining consistent stacking logic",
      "sorting": "Sheets sorted by ID (ascending) for render order"
    },
    {
      "name": "Conditional Visibility",
      "opacity_animation": "withTiming(stackedSheetId <= 1 ? 1 : 0)",
      "content_rendering": "Children only render if stackedSheetId <= 2",
      "optimization": "Prevents rendering content for deeply buried sheets"
    },
    {
      "name": "Z-Index Management",
      "calculation": "zIndex: 100 - stackedSheetId",
      "ensures": "Active sheet (id: 0) has highest z-index (100)",
      "effect": "Proper layering of overlapping sheets"
    }
  ],

  "reanimated_patterns": [
    {
      "pattern": "SharedValue State Management",
      "values": ["bottom", "translateY", "isSwiping"],
      "purpose": "Track individual sheet position and gesture state on UI thread"
    },
    {
      "pattern": "Animated Style Interpolations",
      "instances": ["rStackedSheetStyle", "rVisibleContainerStyle"],
      "properties": ["bottom", "zIndex", "shadowRadius", "shadowOpacity", "transform (scale, translateY)", "opacity"]
    },
    {
      "pattern": "Worklet Dismissal Function",
      "function": "dismissItem",
      "marked_with": "'worklet' directive",
      "animation": "withSpring with completion callback",
      "thread_bridge": "scheduleOnRN to call onDismiss on JS thread"
    },
    {
      "pattern": "Context-Based Architecture",
      "public_context": "StackedSheetContext for showStackedSheet API",
      "internal_context": "InternalStackedSheetContext for sheet state tracking",
      "benefit": "Public API consumers don't re-render on internal state changes"
    },
    {
      "pattern": "useMemo Optimizations",
      "instances": [
        "sortedStackedSheets (sorted by ID)",
        "value (showStackedSheet callback)",
        "internalStackedSheetValue (stackedSheets array)",
        "memoizedChildren (sheet content)",
        "bottomHeight calculation",
        "id lookup by key"
      ]
    },
    {
      "pattern": "useCallback Optimization",
      "functions": ["showStackedSheet", "onDismiss", "renderStackedSheet", "dismissItem"],
      "benefit": "Prevents unnecessary re-renders and gesture handler recreation"
    }
  ],

  "performance_optimizations": [
    {
      "name": "Ref-Based Sheet Memoization",
      "pattern": "useRef<Record<string | number, ReactNode>>",
      "implementation": "stackedSheetsMemoizedByKeys stores rendered sheets by key/id",
      "benefit": "Prevents re-rendering existing sheets when new ones are added",
      "critical": true
    },
    {
      "name": "Conditional Content Rendering",
      "pattern": "stackedSheetId <= 2 && memoizedChildren",
      "rationale": "Deeply buried sheets (3+ levels down) don't render content",
      "impact": "Significant performance improvement with many stacked sheets"
    },
    {
      "name": "Opacity-Based Visibility",
      "pattern": "Opacity animates to 0 for stackedSheetId > 1",
      "benefit": "Sheets beyond second level are invisible without unmounting",
      "maintains": "Smooth animations when sheets move up in stack"
    },
    {
      "name": "Gesture Enablement Control",
      "pattern": "Gesture.Pan().enabled(isActiveStackedSheet)",
      "benefit": "Only active sheet responds to gestures, preventing conflicts",
      "optimization": "Reduces gesture event processing"
    },
    {
      "name": "useMemo for Children",
      "pattern": "useMemo(() => stackedSheet.children())",
      "benefit": "Sheet content only re-renders when sheet definition changes"
    },
    {
      "name": "Sorted Array Memoization",
      "pattern": "useMemo for sortedStackedSheets",
      "benefit": "Avoids re-sorting on every render, only when stackedSheets change"
    },
    {
      "name": "Context Separation",
      "pattern": "Two separate contexts (public vs internal)",
      "benefit": "Components using showStackedSheet don't re-render on stack changes",
      "prevents": "Cascading re-renders throughout app"
    }
  ],

  "component_patterns": {
    "dual_context_architecture": {
      "public_context": {
        "name": "StackedSheetContext",
        "api": "showStackedSheet",
        "consumers": "Any component wanting to display a sheet",
        "re_render_behavior": "Never re-renders (stable showStackedSheet reference)"
      },
      "internal_context": {
        "name": "InternalStackedSheetContext",
        "api": "stackedSheets array",
        "consumers": "Individual sheet components via useInternalStackedSheet",
        "re_render_behavior": "Re-renders when stack changes"
      },
      "benefit": "Optimal performance - only affected sheets re-render"
    },
    "id_management_system": {
      "add_pattern": "Increment all IDs, insert new sheet at id: 0",
      "remove_pattern": "Filter out dismissed, decrement higher IDs",
      "invariant": "Active sheet always has id: 0",
      "sorting": "Sorted ascending for render order (bottom to top)"
    },
    "render_function_children": {
      "pattern": "children: () => ReactNode",
      "rationale": "Lazy rendering of sheet content",
      "benefit": "Content created when sheet is displayed, not when configured",
      "memoization": "useMemo wraps children() call result"
    },
    "key_based_identity": {
      "key_prop": "Unique string identifier per sheet",
      "usage": "Prevents duplicate sheets with same key",
      "lookup": "useInternalStackedSheet finds sheet by key",
      "flexibility": "Random keys allow duplicate content, stable keys prevent it"
    },
    "memo_component": {
      "component": "StackedSheetHandle",
      "optimization": "memo prevents re-renders when parent animates",
      "critical": false
    }
  },

  "gesture_handling": {
    "pan_gesture_lifecycle": {
      "onBegin": "isSwiping.value = true",
      "onUpdate": "translateY.value = event.translationY (only if translationY >= 0)",
      "onEnd": "Dismiss if translationY > -50, else snap back with withSpring(0)",
      "onFinalize": "isSwiping.value = false"
    },
    "drag_constraints": {
      "upward_prevention": "if (event.translationY < 0) return in onUpdate",
      "downward_threshold": "-50px triggers dismiss on release",
      "natural_feel": "No artificial constraint on downward drag during gesture"
    },
    "dismiss_animation": {
      "target": "componentHeight + BaseSafeArea (slides down off-screen)",
      "animation": "withSpring with overshootClamping: true",
      "callback": "scheduleOnRN(onDismiss, stackedSheetId) on animation finish",
      "cleanup": "onDismiss removes from state, triggering re-render"
    },
    "enabled_control": {
      "condition": "isActiveStackedSheet (stackedSheetId === 0)",
      "benefit": "Only top sheet responds to gestures",
      "prevents": "Gesture conflicts with buried sheets"
    }
  },

  "state_management": {
    "shared_values": [
      {
        "name": "bottom",
        "initial": "isActiveStackedSheet ? -componentHeight : BaseSafeArea",
        "controls": "Vertical position from bottom of screen",
        "animation": "withSpring to BaseSafeArea + bottomHeight"
      },
      {
        "name": "translateY",
        "initial": 0,
        "controls": "Gesture-driven vertical translation",
        "usage": "Swipe dismiss gesture tracking"
      },
      {
        "name": "isSwiping",
        "type": "boolean",
        "usage": "Tracks active gesture state",
        "note": "Currently unused but available for visual feedback"
      }
    ],
    "react_state": [
      {
        "name": "stackedSheets",
        "type": "StackedSheetType[]",
        "management": "useState in StackedSheetProvider",
        "updates": "showStackedSheet adds, onDismiss removes",
        "id_system": "Dynamic IDs managed on add/remove"
      },
      {
        "name": "stackedSheetsMemoizedByKeys",
        "type": "useRef<Record<string | number, ReactNode>>",
        "purpose": "Cache rendered sheet components",
        "benefit": "Prevent re-rendering existing sheets"
      }
    ],
    "derived_values": [
      {
        "name": "sortedStackedSheets",
        "calculation": "stackedSheets.sort((a, b) => a.id - b.id)",
        "purpose": "Ensures correct render order (bottom to top)"
      },
      {
        "name": "id",
        "source": "useInternalStackedSheet",
        "calculation": "stackedSheets.find(item => item.key === key)?.id",
        "memoization": "useMemo with [key, stackedSheets] deps"
      },
      {
        "name": "bottomHeight",
        "source": "useInternalStackedSheet",
        "calculation": "biggestItemHeight - currentHeight + Math.sign(id) * 35",
        "purpose": "Aligns tops of sheets with different heights"
      }
    ]
  },

  "ui_ux_patterns": {
    "stacked_cards": {
      "positioning": "Absolute positioning with dynamic bottom values",
      "width": "90% of window width",
      "centering": "left: windowWidth * 0.05",
      "visual_effect": "Card stack similar to iOS Safari tabs"
    },
    "depth_perception": {
      "scale": "Decreases 5% per level",
      "shadow": "Lighter and smaller for buried sheets",
      "opacity": "Fades to 0 for sheets beyond second level",
      "combined_effect": "Clear visual hierarchy of sheet stack"
    },
    "drag_handle": {
      "component": "StackedSheetHandle",
      "appearance": "2px tall, 50px wide, gray rounded bar",
      "position": "Top center, 7.5px from top",
      "affordance": "Visual cue for draggability"
    },
    "gesture_dismiss": {
      "pattern": "Swipe down to dismiss (iOS standard)",
      "threshold": "Lenient -50px for dismissal",
      "feedback": "Sheet follows finger during drag",
      "completion": "Spring animation off-screen"
    },
    "continuous_border_curve": {
      "property": "borderCurve: 'continuous'",
      "radius": "35px",
      "platform": "iOS",
      "effect": "Squircle borders (Apple-style rounded corners)"
    },
    "entrance_timing": {
      "active_sheet": "Slides up from below screen",
      "other_sheets": "Appear in final position",
      "stagger": "No stagger, simultaneous entrance",
      "spring": "Natural bounce on entrance"
    }
  },

  "visual_design": {
    "color_palette": {
      "sheet_background": "#FFFFFF (white)",
      "handle": "rgba(0, 0, 0, 0.08) (light gray)",
      "demo_button_bg": "#111 (near black)",
      "demo_button_text": "white",
      "demo_app_bg": "#fefefe (off-white)"
    },
    "spacing": {
      "base_safe_area": "50px from bottom",
      "stack_offset": "35px between visible sheets",
      "sheet_width": "90% of screen",
      "sheet_margin": "5% on each side"
    },
    "typography": {
      "demo_font": "SF-Pro-Rounded-Bold",
      "demo_weight": "700",
      "demo_transform": "uppercase",
      "demo_spacing": "1.2 letter-spacing"
    },
    "border_radius": {
      "sheet": "35px",
      "demo_button": "25px",
      "handle": "5px",
      "style": "continuous (iOS squircle)"
    },
    "shadows": {
      "base_shadow_radius": "10px for active sheet",
      "reduction_rate": "2.5px per stack level",
      "min_shadow_radius": "2px",
      "base_opacity": "0.1 for active sheet",
      "reduction_rate_opacity": "0.025 per level",
      "min_opacity": "0.05",
      "offset": "{ width: 0, height: 0 }",
      "elevation": "2 (Android)"
    }
  },

  "use_cases": [
    "Multiple bottom sheets in sequence (e.g., filter > sub-filter > options)",
    "Notification stacks with dismissible cards",
    "Multi-step form wizards with backward navigation",
    "Context menus with sub-menus",
    "Shopping cart with product detail overlays",
    "Chat conversation with message detail sheets",
    "Email inbox with message stack",
    "Task manager with subtask sheets",
    "Photo viewer with info/share sheets",
    "Music player with queue and lyrics sheets",
    "Map application with location detail stacks",
    "Settings with nested configuration panels",
    "Social media with post detail and comment sheets"
  ],

  "code_quality": {
    "strengths": [
      "Excellent dual-context architecture preventing unnecessary re-renders",
      "Intelligent ID management system maintaining stack order",
      "Comprehensive TypeScript with clear type definitions",
      "Performance-focused with ref-based memoization",
      "Clean separation between public API and internal implementation",
      "Proper worklet annotations and thread bridging",
      "Conditional rendering optimization for deeply stacked sheets",
      "Well-structured file organization",
      "Reusable components (StackedSheetHandle)",
      "Gesture enablement control prevents conflicts",
      "Inline documentation explaining architectural decisions",
      "Key-based identity system for flexible usage",
      "Render function pattern for lazy content creation"
    ],
    "areas_for_improvement": [
      "Could extract magic numbers to constants (BaseSafeArea: 50, offset: 35, scale: 0.05)",
      "isSwiping SharedValue is unused (could drive visual feedback)",
      "Could add JSDoc comments for public API functions",
      "No TypeScript types exported for public consumption",
      "Demo hook (useDemoStackedSheet) is quite complex, could be simplified",
      "Could add accessibility labels and screen reader support",
      "No error handling for edge cases (e.g., duplicate keys)",
      "Could add configurable props for visual customization",
      "Hardcoded width percentages could be props",
      "No animation configuration props (spring config is fixed)"
    ]
  },

  "known_limitations": [
    {
      "name": "No Maximum Stack Depth",
      "issue": "Unlimited sheets can be stacked",
      "impact": "Potential performance issues with very large stacks",
      "mitigation": "Conditional rendering helps, but could add max depth limit",
      "improvement": "Add maxStackDepth prop with automatic dismissal of oldest"
    },
    {
      "name": "Fixed Visual Configuration",
      "issue": "Scale factor (0.05), offset (35px), colors are hardcoded",
      "impact": "Not customizable without modifying source",
      "improvement": "Accept configuration props for visual customization"
    },
    {
      "name": "No Backdrop/Overlay",
      "issue": "No backdrop dims background content",
      "impact": "Less focus on sheets, can tap through to background",
      "improvement": "Add optional backdrop with tap-to-dismiss"
    },
    {
      "name": "Single Gesture Threshold",
      "issue": "Fixed -50px threshold for dismissal",
      "impact": "Not adaptable to different sheet heights or user preferences",
      "improvement": "Make threshold percentage-based or configurable"
    },
    {
      "name": "No Snap Points",
      "issue": "Only fully open state, no half-open or intermediate positions",
      "limitation": "Cannot create sheets that can be dragged to different heights",
      "improvement": "Add snap points array prop for multi-height support"
    },
    {
      "name": "No Accessibility Support",
      "missing": ["Screen reader announcements", "Focus management", "Keyboard navigation", "Reduced motion"],
      "impact": "Not accessible to users with disabilities"
    },
    {
      "name": "No Haptic Feedback",
      "missing": "Tactile feedback on dismiss or stack changes",
      "improvement": "Add expo-haptics integration for dismiss action"
    },
    {
      "name": "Content Rendering Cutoff",
      "issue": "Content doesn't render for stackedSheetId > 2",
      "edge_case": "If user rapidly adds sheets, buried ones won't have content ready",
      "impact": "Minimal - optimization outweighs edge case"
    }
  ],

  "potential_improvements": [
    "Configurable scale factor, offset, and shadow values",
    "Maximum stack depth limit with auto-dismiss oldest",
    "Backdrop overlay with configurable opacity and tap-to-dismiss-all",
    "Haptic feedback on sheet dismiss and stack reordering",
    "Multiple snap points per sheet (half-open, full-open)",
    "Drag to reorder sheets within stack",
    "Peek gesture to view buried sheets without dismissing",
    "Batch dismiss with animation (dismiss all button)",
    "Persist stack state to storage for app restore",
    "Sheet header component with title and close button",
    "Custom handle component prop",
    "Animation configuration props (spring config)",
    "onDismiss callback per sheet",
    "onStackChange callback for stack state",
    "Accessibility: screen reader labels and announcements",
    "Accessibility: focus trap management",
    "Accessibility: keyboard shortcuts (Esc to dismiss)",
    "Respect prefers-reduced-motion",
    "Orientation change handling",
    "Safe area insets integration for notched devices",
    "TypeScript: export public types for consumer usage",
    "Pull to refresh integration for sheet content",
    "Nested scroll support within sheets",
    "Sheet resize handles for dynamic height",
    "Portal support for rendering outside provider tree",
    "Theme prop for consistent styling",
    "RTL layout support",
    "Web platform support optimizations"
  ],

  "key_insights": [
    "Dual context architecture is crucial for preventing cascading re-renders",
    "ID reordering system maintains consistent stacking logic without complex state",
    "Ref-based memoization prevents expensive re-renders of existing sheets",
    "Conditional content rendering dramatically improves performance with deep stacks",
    "Render function children pattern enables lazy content creation",
    "Key-based identity allows both unique and duplicate sheet scenarios",
    "Scale, shadow, and opacity working together create convincing depth effect",
    "Gesture enablement control is essential for preventing multi-sheet conflicts",
    "scheduleOnRN bridges UI thread animations to JS thread state updates",
    "Sorting before render ensures proper visual stacking order",
    "Dynamic bottom positioning algorithm elegantly handles varying sheet heights",
    "Context separation keeps public API simple while internal logic remains flexible"
  ],

  "learning_opportunities": [
    {
      "level": "Beginner",
      "topics": [
        "Context Provider pattern for global state",
        "Basic pan gesture with dismiss threshold",
        "SharedValue for animation state",
        "withSpring animation basics",
        "Absolute positioning for overlays",
        "useWindowDimensions for responsive design",
        "Conditional rendering optimization",
        "Component composition"
      ]
    },
    {
      "level": "Intermediate",
      "topics": [
        "Dual context architecture for performance",
        "Dynamic ID management for ordering",
        "Ref-based memoization for React nodes",
        "Gesture enablement control patterns",
        "Scale transformations for depth effects",
        "Shadow interpolation for visual hierarchy",
        "useMemo and useCallback optimization strategies",
        "Thread bridging with scheduleOnRN",
        "Render function children pattern",
        "Key-based component identity"
      ]
    },
    {
      "level": "Advanced",
      "topics": [
        "Complex state management with dependent animations",
        "Performance optimization with conditional rendering cutoffs",
        "Architectural patterns for preventing re-render cascades",
        "Dynamic positioning algorithms for variable dimensions",
        "Gesture conflict resolution in overlapping components",
        "Context API optimization strategies",
        "Worklet function composition with callbacks",
        "Memory management with memoization refs",
        "Type-safe context definitions",
        "Building reusable animation managers"
      ]
    }
  ],

  "tags": [
    "stacked-sheets",
    "bottom-sheet",
    "multiple-sheets",
    "pan-gesture",
    "swipe-dismiss",
    "context-api",
    "provider-pattern",
    "depth-effects",
    "scale-animation",
    "shadow-interpolation",
    "gesture-handler",
    "reanimated",
    "spring-animations",
    "performance-optimization",
    "memoization",
    "card-stack",
    "ios-style",
    "worklets",
    "dual-context",
    "id-management",
    "dynamic-positioning",
    "conditional-rendering"
  ]
}
