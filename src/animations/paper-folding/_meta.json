{
  "animation_name": "Paper Folding",
  "animation_slug": "paper-folding",
  "description": "A realistic 3D paper folding animation that simulates unfolding and refolding of a paper divided into three sections. Features advanced 3D transforms with perspective, sequential rotation of three fold segments, dynamic shadow effects using Skia inner shadows, and color interpolation to create realistic depth perception. The paper unfolds from a compact folded state to a flat extended state with smooth timing-based animations.",

  "main_features": [
    "Realistic 3D paper folding effect with three segments",
    "Sequential fold animations with proper transform origin",
    "Dynamic perspective transforms (rotateX on UI thread)",
    "Skia-powered inner shadows for fold depth emphasis",
    "Color interpolation from dark to white for realistic shading",
    "Smooth timing animations (800ms duration)",
    "Touch interaction to toggle fold/unfold state",
    "Proper z-index management for correct fold stacking",
    "Blurred gradient background using Skia",
    "Transform composition with translateY and rotateX"
  ],

  "file_structure": {
    "index.tsx": "Main PaperFolding component with interaction handling and layout",
    "components/index.tsx": "Paper component with three-fold rendering and animation logic",
    "background-gradient.tsx": "BackgroundGradient component with Skia SweepGradient and blur"
  },

  "core_technologies": {
    "animations": "react-native-reanimated",
    "graphics": "@shopify/react-native-skia",
    "pattern": "3D paper folding simulation with sequential transforms"
  },

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle",
        "useDerivedValue",
        "interpolate",
        "interpolateColor"
      ],
      "functions": [
        "withTiming"
      ],
      "components": ["Animated.View"],
      "critical_feature": "interpolateColor for realistic fold shading, perspective transforms for 3D rotation"
    },
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "components": [
        "Canvas",
        "Rect",
        "Shadow",
        "SweepGradient",
        "Blur"
      ],
      "utilities": ["vec"],
      "usage": "High-performance shadows and gradient effects",
      "benefit": "Inner shadows for realistic fold depth that aren't possible with standard React Native shadows"
    }
  },

  "animation_techniques": {
    "sequential_folding": {
      "pattern": "Three independent fold sections with cascading transforms",
      "fold_1": {
        "behavior": "Vertical translation only",
        "translateY": "interpolate(progress, [0, 1], [height/2 - foldHeight/2, 0])",
        "effect": "First fold moves from center to top",
        "rotation": "None - stays flat",
        "z_index": "Highest (200) - always on top"
      },
      "fold_2": {
        "behavior": "Translation + rotation around bottom edge",
        "translateY": "Inherits from fold_1 interpolation",
        "rotateX": "interpolate(progress, [0, 1], [-Math.PI, 0]) rad",
        "transform_sequence": "[translateY (shared), translateY(-foldHeight/2), rotateX, translateY(foldHeight/2)]",
        "effect": "Rotates from -180Â° (folded under) to 0Â° (flat)",
        "pivot": "Bottom edge via translateY offset",
        "z_index": "Middle (100)"
      },
      "fold_3": {
        "behavior": "Inherits fold_2 transforms + own rotation",
        "base_transforms": "All fold_2 transforms",
        "additional_rotateX": "interpolate(progress, [0, 1], [Math.PI, 0]) rad",
        "transform_sequence": "[...fold_2_transforms, translateY(foldHeight/2), rotateX, translateY(-foldHeight/2), translateY(height/3)]",
        "effect": "Rotates from +180Â° (folded over) to 0Â° (flat)",
        "pivot": "Top edge via translateY offset",
        "z_index": "Lowest (0)"
      }
    },
    "transform_origin_simulation": {
      "pattern": "Manual transform origin using translateY pairs",
      "technique": "Translate to pivot, rotate, translate back",
      "fold_2_pivot": {
        "target": "Rotate around bottom edge",
        "implementation": "translateY(-foldHeight/2), rotateX, translateY(foldHeight/2)",
        "explanation": "Move pivot to bottom, rotate, restore position"
      },
      "fold_3_pivot": {
        "target": "Rotate around top edge relative to fold_2",
        "implementation": "translateY(foldHeight/2), rotateX, translateY(-foldHeight/2)",
        "explanation": "Move pivot to top, rotate, restore position"
      },
      "key_insight": "React Native doesn't support 2D transformOrigin for 3D transforms on all platforms"
    },
    "perspective_transform": {
      "value": 1000000,
      "purpose": "Create 3D depth perception for rotations",
      "position": "In transformOrigin array as z-component",
      "note": "Large value (1000000) creates subtle perspective effect",
      "implementation": "transformOrigin: ['50%', '50%', zIndex]",
      "combined_purpose": "Sets both z-index and perspective in New Architecture"
    },
    "color_interpolation": {
      "pattern": "Simulate light/shadow on paper folds",
      "fold_1": {
        "color": "static '#ffffff' (always white - fully lit)",
        "reason": "Top fold always faces viewer"
      },
      "fold_2_and_3": {
        "input_range": "[0, 1]",
        "output_range": "['#b1b1b1', '#ffffff']",
        "effect": "Dark gray (folded/shadowed) â†’ white (unfolded/lit)",
        "realism": "Simulates light hitting paper surface at different angles"
      }
    },
    "timing_animation": {
      "function": "withTiming",
      "duration": 800,
      "easing": "default (ease-in-out)",
      "trigger": "Touch end event on overlay",
      "toggle": "progress.value = progress.value > 0 ? 0 : 1",
      "smoothness": "Consistent timing for all folds creates coordinated motion"
    },
    "shadow_effects": {
      "pattern": "Skia inner shadows for realistic fold depth",
      "implementation": {
        "dx": 0,
        "dy": 12,
        "blur": 25,
        "color": "#efefef",
        "inner": "i > 0 (true for fold_2 and fold_3)"
      },
      "fold_1": "No inner shadow (outer shadow)",
      "fold_2_and_3": "Inner shadows create depth perception",
      "key_technique": "Inner shadows only possible with Skia, not React Native shadows"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "progress",
        "type": "SharedValue<number>",
        "initial": 0,
        "range": "[0, 1]",
        "updates": "Touch end event toggles between 0 and 1",
        "purpose": "Controls fold/unfold animation state",
        "drives": "All fold transformations and color changes"
      }
    ],
    "derived_values": [
      {
        "name": "rectColor (fold_1)",
        "calculation": "static '#ffffff'",
        "dependencies": "none",
        "purpose": "First fold always white (no shadow)"
      },
      {
        "name": "rectColor (fold_2 and fold_3)",
        "calculation": "interpolateColor(progress.value, [0, 1], ['#b1b1b1', '#ffffff'])",
        "dependencies": ["progress", "fold index"],
        "purpose": "Animate shadow color for realistic fold shading"
      }
    ],
    "useAnimatedStyle_instances": [
      {
        "name": "rZIndexStyle",
        "purpose": "Manage z-index stacking and perspective",
        "properties": {
          "transformOrigin": "['50%', '50%', zIndex]",
          "transform": "[{ perspective: 1000000 }]"
        },
        "z_index_calculation": "(2 - i) * 100",
        "values": {
          "fold_0": "zIndex: 200",
          "fold_1": "zIndex: 100",
          "fold_2": "zIndex: 0"
        },
        "note": "Higher z-index for folds that should appear on top"
      },
      {
        "name": "rCardStyle",
        "purpose": "Animate fold positions and rotations",
        "dependencies": ["progress", "fold index"],
        "transforms": {
          "all_folds": "translateY (shared vertical positioning)",
          "fold_2": "translateY offsets + rotateX",
          "fold_3": "fold_2 transforms + additional translateY offsets + rotateX"
        },
        "complexity": "Cascading transforms create realistic sequential folding"
      }
    ],
    "loop_pattern": {
      "structure": "new Array(3).fill(0).map((_, i) => {...})",
      "eslint_disable": "react-hooks/rules-of-hooks",
      "rationale": "Hooks called in loop for cleaner code (developer acknowledges rule break)",
      "alternative": "Could extract to separate components",
      "tradeoff": "Code readability vs. hook rules compliance",
      "developer_note": "Rules are made to be broken ðŸ˜…"
    }
  },

  "mathematical_algorithms": {
    "fold_height_calculation": {
      "formula": "foldHeight = height / 3",
      "example": "330px paper â†’ 110px per fold",
      "purpose": "Divide paper into three equal sections"
    },
    "vertical_position_interpolation": {
      "formula": "interpolate(progress, [0, 1], [height/2 - foldHeight/2, 0])",
      "example": "330px paper, 110px fold: [165 - 55, 0] â†’ [110, 0]",
      "folded_state": "110px (folds centered vertically)",
      "unfolded_state": "0px (folds start at top)",
      "purpose": "Move entire paper stack from center to top as it unfolds"
    },
    "rotation_angles": {
      "fold_2": {
        "folded": "-Math.PI rad (-180Â°)",
        "unfolded": "0 rad (0Â°)",
        "direction": "Rotates forward from under fold_1"
      },
      "fold_3": {
        "folded": "Math.PI rad (+180Â°)",
        "unfolded": "0 rad (0Â°)",
        "direction": "Rotates backward from over fold_2"
      },
      "symmetry": "Opposite rotation directions create realistic fold pattern"
    },
    "z_index_distribution": {
      "formula": "(2 - i) * 100",
      "i=0": "200 (top)",
      "i=1": "100 (middle)",
      "i=2": "0 (bottom)",
      "purpose": "Ensure proper stacking order in New Architecture"
    },
    "color_gradient": {
      "rgb_interpolation": "#b1b1b1 â†’ #ffffff",
      "start_rgb": "rgb(177, 177, 177)",
      "end_rgb": "rgb(255, 255, 255)",
      "lightness_change": "~69% â†’ 100%",
      "effect": "Simulates light gradient on paper surface"
    }
  },

  "performance_optimizations": {
    "worklet_execution": {
      "pattern": "All animations run on UI thread",
      "worklet_functions": ["useAnimatedStyle callbacks", "useDerivedValue callbacks"],
      "benefit": "60fps smooth animations without bridge crossing"
    },
    "skia_canvas": {
      "pattern": "Hardware-accelerated rendering for shadows and gradients",
      "benefit": "Better performance than standard React Native shadows",
      "components": ["Canvas for paper rectangles", "Canvas for background"]
    },
    "minimal_shared_values": {
      "count": 1,
      "benefit": "Low memory footprint, single source of truth",
      "drives": "All fold animations from one progress value"
    },
    "static_dimensions": {
      "paper_width": "250px (constant)",
      "paper_height": "330px (constant)",
      "benefit": "No responsive calculations, predictable layout"
    },
    "touch_overlay": {
      "pattern": "Absolute positioned overlay for touch handling",
      "benefit": "Doesn't interfere with fold rendering",
      "todo_note": "Developer questions why this is needed (@@TODO comment)"
    }
  },

  "visual_design": {
    "paper_styling": {
      "width": 250,
      "height": 330,
      "aspect_ratio": "~0.76 (portrait orientation)",
      "fold_height": "110px (1/3 of height)",
      "color": "White (#ffffff) with gray shadows",
      "material": "Simulates matte paper"
    },
    "shadow_design": {
      "type": "Inner shadows (Skia)",
      "dx": 0,
      "dy": 12,
      "blur": 25,
      "color": "#efefef (very light gray)",
      "effect": "Subtle depth on folded sections",
      "realism": "Inner shadows create crease/fold appearance"
    },
    "background": {
      "type": "Blurred sweep gradient",
      "colors": ["#eaeaea", "#e9ebec", "#dddddd", "#e0e0e0"],
      "base_color": "#ededed",
      "blur": 50,
      "effect": "Soft, subtle gradient background",
      "aesthetic": "Minimal, clean, paper-like environment"
    },
    "layout": {
      "container": "flex: 1, centered (alignItems, justifyContent)",
      "paper_position": "center of screen",
      "touch_overlay": "StyleSheet.absoluteFill",
      "background": "StyleSheet.absoluteFill (behind paper)"
    },
    "color_palette": {
      "paper_white": "#ffffff",
      "shadow_gray": "#b1b1b1",
      "light_shadow": "#efefef",
      "background_grays": ["#eaeaea", "#e9ebec", "#dddddd", "#e0e0e0", "#ededed"],
      "theme": "Monochromatic paper theme"
    }
  },

  "interaction_patterns": {
    "touch_interaction": {
      "event": "onTouchEnd",
      "target": "Absolute positioned overlay (full screen)",
      "action": "Toggle progress between 0 and 1",
      "logic": "progress.value > 0 ? 0 : 1",
      "animation": "withTiming(..., { duration: 800 })",
      "states": {
        "folded": "progress = 0",
        "unfolded": "progress = 1"
      }
    },
    "no_gesture_handler": {
      "note": "Uses simple onTouchEnd, not react-native-gesture-handler",
      "benefit": "Simpler implementation for toggle interaction",
      "limitation": "No gesture tracking, pan, or swipe"
    }
  },

  "use_cases": {
    "primary": [
      "Onboarding screens with paper-fold reveal effect",
      "Document reading apps with page fold animations",
      "E-book readers with page turn effects",
      "Menu reveals with fold animation",
      "Card unfold interactions"
    ],
    "secondary": [
      "Origami-style UI transitions",
      "Settings panels that fold/unfold",
      "Accordion components with 3D effect",
      "Tutorial screens with sequential reveals",
      "Receipt/invoice animations"
    ],
    "educational": [
      "Teaching 3D transform composition",
      "Demonstrating sequential animations",
      "Understanding transform origin simulation",
      "Inner shadow techniques with Skia",
      "Color interpolation for realism"
    ],
    "design_patterns": [
      "Material Design-inspired fold effects",
      "Skeuomorphic paper interactions",
      "Progressive disclosure with physical metaphor",
      "Realistic material simulations"
    ]
  },

  "code_quality": {
    "typescript": {
      "coverage": "Full TypeScript with explicit types",
      "type_imports": ["type SharedValue"],
      "prop_types": {
        "PaperProps": "height, width, progress"
      },
      "type_safety": "Strong typing for all props"
    },
    "constants": {
      "PaperWidth": 250,
      "PaperHeight": 330,
      "naming": "PascalCase for component-scoped constants"
    },
    "component_architecture": {
      "main": "PaperFolding - orchestration and interaction",
      "paper": "Paper - fold rendering and animation logic",
      "background": "BackgroundGradient - Skia background effect",
      "separation": "Clear separation: interaction, logic, presentation"
    },
    "documentation": {
      "inline_comments": [
        "Comprehensive explanation of fold animation strategy (lines 19-27)",
        "Acknowledgment of hooks rule break with rationale (lines 19-21)",
        "Description of each fold's animation behavior",
        "Transform composition explanation",
        "TODO comment about touch overlay necessity"
      ],
      "educational_value": "Good comments explaining complex transform logic"
    },
    "code_patterns": {
      "array_mapping": "Uses array.fill(0).map for three folds",
      "conditional_logic": "if statements for different fold behaviors",
      "style_composition": "Combines multiple animated styles per fold"
    },
    "best_practices": [
      "Extracts background to separate component",
      "Uses StyleSheet.create for static styles",
      "Separates animation logic into components folder",
      "Type-safe props with TypeScript"
    ],
    "areas_for_improvement": [
      "Hooks called in loop violates React rules (acknowledged by developer)",
      "Could extract each fold to separate component",
      "TODO comment suggests developer uncertainty about touch overlay",
      "No PropTypes or default props documentation",
      "Magic numbers (perspective: 1000000) could be constants"
    ]
  },

  "known_limitations": {
    "fixed_dimensions": {
      "issue": "PaperWidth and PaperHeight are hardcoded",
      "values": "250x330 pixels",
      "impact": "Not responsive to screen size",
      "improvement": "Could use percentage of screen dimensions"
    },
    "three_folds_only": {
      "limitation": "Hardcoded to exactly 3 folds",
      "flexibility": "Cannot adjust fold count without code changes",
      "improvement": "Could accept folds prop for configurable sections"
    },
    "no_gesture_tracking": {
      "limitation": "Simple toggle, no drag-to-fold interaction",
      "current": "Only touch end event",
      "improvement": "Could use PanGesture to fold paper based on drag distance"
    },
    "touch_overlay_uncertainty": {
      "todo_comment": "@@TODO: wtf why is this needed?",
      "issue": "Developer unsure why overlay is necessary",
      "investigation": "May be workaround for Skia Canvas blocking touches"
    },
    "timing_not_configurable": {
      "duration": "800ms hardcoded",
      "improvement": "Could accept duration prop"
    },
    "z_index_new_architecture": {
      "note": "z-index handling specifically for New Architecture",
      "compatibility": "May need adjustments for older React Native versions"
    }
  },

  "potential_improvements": {
    "features": [
      "Drag-to-fold gesture interaction",
      "Multiple fold configurations (2-fold, 4-fold, etc.)",
      "Horizontal folding option",
      "Sound effects for paper folding",
      "Haptic feedback on fold/unfold",
      "Auto-fold after delay",
      "Double-tap to quick fold/unfold"
    ],
    "customization": [
      "Configurable paper size (responsive or prop-based)",
      "Custom fold count prop",
      "Adjustable animation duration",
      "Custom colors for paper and shadows",
      "Configurable perspective value",
      "Shadow intensity customization",
      "Background gradient customization"
    ],
    "animations": [
      "Spring animations instead of timing",
      "Staggered fold animations (sequential, not simultaneous)",
      "Bounce effect on unfold completion",
      "Subtle rotation/tilt during fold",
      "Page curl effect combined with folding"
    ],
    "interaction": [
      "Pan gesture to control fold amount",
      "Swipe gestures for fold direction",
      "Pinch gesture to scale paper",
      "Long press to lock fold state"
    ],
    "code_improvements": [
      "Extract each fold to separate component (comply with hooks rules)",
      "Investigate and document touch overlay necessity",
      "Add prop validation and defaults",
      "Extract magic numbers to named constants",
      "Add TypeScript documentation comments"
    ],
    "accessibility": [
      "Screen reader announcements for fold state",
      "Reduced motion support",
      "Alternative button to fold/unfold",
      "Focus indicators for keyboard navigation"
    ]
  },

  "key_insights": {
    "transform_composition": "Complex fold effect achieved by composing simple transforms (translateY + rotateX)",
    "manual_pivot_points": "Transform origin simulated by translate-rotate-translate pattern",
    "cascading_transforms": "Fold_3 inherits all fold_2 transforms, creating realistic sequential folding",
    "inner_shadows_with_skia": "Skia enables inner shadows impossible with React Native's standard shadow props",
    "color_as_lighting": "interpolateColor simulates light/shadow on paper surface realistically",
    "single_progress_value": "One SharedValue drives entire complex animation (efficient)",
    "z_index_in_transformOrigin": "New Architecture requires z-index in transformOrigin array",
    "perspective_for_depth": "Large perspective value (1000000) creates subtle but important depth perception",
    "hooks_in_loop_tradeoff": "Developer consciously breaks hook rules for cleaner code (documented decision)"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Basic 3D transforms (rotateX)",
      "useSharedValue for animation state",
      "useAnimatedStyle basics",
      "Touch event handling",
      "StyleSheet usage"
    ],
    "for_intermediate": [
      "Transform composition techniques",
      "interpolate and interpolateColor",
      "useDerivedValue for color calculations",
      "Skia Canvas for custom rendering",
      "Inner shadow effects",
      "Array mapping for component generation"
    ],
    "for_advanced": [
      "Manual transform origin simulation",
      "Cascading transform inheritance",
      "Z-index management in New Architecture",
      "Complex sequential animation orchestration",
      "Skia integration with Reanimated",
      "Performance optimization with minimal SharedValues",
      "Trade-offs in hook rules vs code clarity"
    ]
  },

  "comparison_to_alternatives": {
    "vs_page_flip_animation": {
      "similarity": "Both simulate paper/page interactions",
      "difference": "Paper folding uses sequential segments, page flip is single rotation",
      "complexity": "Paper folding more complex (3 segments vs 1)"
    },
    "vs_accordion": {
      "similarity": "Both have expandable sections",
      "difference": "Paper folding uses 3D transforms, accordion typically 2D height animation",
      "visual_appeal": "Paper folding more visually impressive"
    },
    "vs_card_stack": {
      "similarity": "Both manage z-index stacking",
      "difference": "Paper folding has continuous rotation, card stack has discrete states"
    }
  },

  "platform_considerations": {
    "ios": {
      "features": "All features fully supported",
      "performance": "Excellent with Metal rendering for Skia",
      "transforms": "3D transforms work perfectly"
    },
    "android": {
      "features": "All features supported",
      "performance": "Excellent with Skia's OpenGL backend",
      "transforms": "3D transforms work well",
      "note": "Test z-index behavior on various Android versions"
    },
    "web": {
      "compatibility": "Should work with react-native-web and Skia web",
      "considerations": [
        "Test Skia Canvas rendering",
        "Verify 3D transform support",
        "Check touch event handling",
        "Inner shadow rendering"
      ],
      "potential_issues": "Skia web support may have limitations"
    },
    "new_architecture": {
      "note": "Code specifically mentions New Architecture z-index handling",
      "transformOrigin": "Uses z-component for z-index in New Architecture",
      "compatibility": "Designed for Fabric renderer"
    }
  },

  "testing_considerations": {
    "visual_tests": [
      "Verify all three folds render correctly",
      "Check fold stacking order (z-index)",
      "Confirm smooth rotation animations",
      "Verify shadow appearance on folds",
      "Test color interpolation from gray to white",
      "Check background gradient rendering"
    ],
    "interaction_tests": [
      "Touch toggles fold state",
      "Animation runs for 800ms",
      "Progress value toggles between 0 and 1",
      "Multiple rapid touches handled correctly",
      "Touch works anywhere on screen"
    ],
    "animation_tests": [
      "Fold_1 moves vertically without rotation",
      "Fold_2 rotates from -180Â° to 0Â°",
      "Fold_3 rotates from +180Â° to 0Â°",
      "All folds animate simultaneously",
      "Color transitions smoothly",
      "Shadows update correctly during animation"
    ],
    "performance_tests": [
      "Maintain 60fps during animation",
      "No frame drops on fold/unfold",
      "Skia Canvas renders efficiently",
      "Memory usage remains stable"
    ],
    "edge_cases": [
      "Rapid toggle clicking",
      "Toggle during mid-animation",
      "Screen rotation during fold",
      "Different paper dimensions",
      "Very slow devices"
    ],
    "cross_platform_tests": [
      "Test on iOS (Metal)",
      "Test on Android (OpenGL)",
      "Test on web (if applicable)",
      "Verify z-index on all platforms",
      "Check Skia rendering consistency"
    ]
  },

  "accessibility_considerations": {
    "current_state": {
      "screen_readers": "No accessibility support",
      "keyboard_navigation": "Not supported",
      "reduced_motion": "No support",
      "labels": "None",
      "announcements": "No state announcements"
    },
    "recommendations": [
      "Add accessibilityLabel to paper component",
      "Announce fold/unfold state changes",
      "Add button alternative for folding (not just touch)",
      "Respect prefers-reduced-motion (disable 3D effects)",
      "Add accessibilityRole for interactive elements",
      "Provide text description of current state"
    ],
    "implementation_suggestions": {
      "reduced_motion": "Use simple fade or slide instead of 3D fold",
      "screen_reader": "Announce 'Paper folded' or 'Paper unfolded'",
      "keyboard": "Add button with space/enter key support"
    }
  },

  "real_world_inspiration": {
    "origami": "Japanese paper folding art",
    "paper_prototyping": "Design process with folded paper mockups",
    "brochures": "Tri-fold brochure opening animation",
    "maps": "Folded map interfaces",
    "e_readers": "Page fold effects in reading apps"
  },

  "skia_techniques": {
    "canvas_rendering": {
      "component": "Canvas",
      "usage": "Render paper rectangles with shadows",
      "benefit": "Hardware-accelerated, efficient rendering"
    },
    "inner_shadows": {
      "component": "Shadow with inner prop",
      "unique_feature": "Inner shadows not available in standard RN",
      "parameters": {
        "dx": 0,
        "dy": 12,
        "blur": 25,
        "color": "#efefef",
        "inner": "true for fold_2 and fold_3"
      },
      "effect": "Creates realistic fold crease appearance"
    },
    "sweep_gradient": {
      "component": "SweepGradient",
      "center": "vec(width/2, height/2)",
      "colors": "Array of subtle gray variations",
      "usage": "Background gradient effect",
      "combined_with": "Blur for soft appearance"
    },
    "blur_effect": {
      "component": "Blur",
      "value": 50,
      "applied_to": "Background gradient",
      "effect": "Soft, dreamy background"
    },
    "dynamic_color": {
      "pattern": "Reanimated color value in Skia Rect",
      "implementation": "Rect color={rectColor}",
      "rectColor": "useDerivedValue with interpolateColor",
      "integration": "Seamless Reanimated + Skia integration"
    }
  },

  "bundle_size_impact": {
    "code_size": "~150 lines total (very small)",
    "dependencies": "Reanimated and Skia (likely already in project)",
    "assets": "No external assets",
    "runtime_memory": "Minimal - 1 SharedValue, 3 derived values per fold",
    "estimated_impact": "< 15KB minified"
  },

  "performance_metrics": {
    "target_fps": 60,
    "runs_on": "UI thread (worklets)",
    "expected_performance": "Smooth on all modern devices",
    "animation_duration": "800ms",
    "complexity": "Medium - 3D transforms with interpolation",
    "skia_overhead": "Minimal - static rectangles with shadows"
  },

  "tags": [
    "3d-transforms",
    "paper-folding",
    "reanimated",
    "skia",
    "rotateX",
    "perspective",
    "timing-animation",
    "inner-shadows",
    "color-interpolation",
    "sequential-animation",
    "transform-composition",
    "realistic-materials",
    "origami-effect",
    "fold-animation",
    "touch-interaction",
    "z-index-stacking",
    "sweep-gradient",
    "blur-effect",
    "new-architecture"
  ]
}
