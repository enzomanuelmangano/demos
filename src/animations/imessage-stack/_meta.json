{
  "animation_name": "iMessage Stack",
  "animation_slug": "imessage-stack",
  "description": "A sophisticated card stack animation inspired by iMessage photo stacks, featuring horizontal scrolling with aggressive interpolations creating 3D rotation, perspective effects, and card swapping. Uses a single ScrollView with paging to drive complex multi-dimensional transformations on stacked cards.",

  "main_features": [
    "Horizontal scrollable card stack with paging",
    "3D perspective rotation (rotateY)",
    "Aggressive multi-stage interpolation with 7-point input ranges",
    "Dynamic card scaling, rotation, and translation",
    "Card swap effect with additional translation",
    "Z-index animation for proper layering",
    "Single ScrollView drives all card animations",
    "Pastel color palette with 10 cards"
  ],

  "file_structure": {
    "index.tsx": "Main component with ScrollView setup and card data",
    "card.tsx": "Individual card component with complex transformation logic"
  },

  "core_technologies": {
    "animations": "react-native-reanimated",
    "ui": "react-native",
    "scrolling": "Animated.ScrollView with paging"
  },

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useAnimatedRef",
        "useAnimatedStyle",
        "useScrollViewOffset"
      ],
      "utilities": [
        "interpolate",
        "Extrapolation"
      ],
      "critical_feature": "useScrollViewOffset for tracking scroll position and driving animations"
    },
    "react-native": {
      "version": "0.81.4",
      "components": [
        "View",
        "StyleSheet",
        "Dimensions"
      ],
      "apis": [
        "Dimensions.get('window')"
      ]
    }
  },

  "animation_techniques": {
    "scroll_driven_animation": {
      "pattern": "Single ScrollView offset drives all card transformations",
      "hook": "useScrollViewOffset(scrollRef)",
      "scroll_config": {
        "horizontal": true,
        "pagingEnabled": true,
        "snapToInterval": "CARD_WIDTH",
        "disableIntervalMomentum": true,
        "decelerationRate": "fast",
        "showsHorizontalScrollIndicator": false
      },
      "key_insight": "Invisible spacer Views in ScrollView, actual cards positioned absolutely with inverse translation"
    },
    "aggressive_interpolation": {
      "description": "7-point input ranges for fine-grained control over animation stages",
      "input_range_formula": [
        "(index - 3) * CARD_WIDTH",
        "(index - 2) * CARD_WIDTH",
        "(index - 1) * CARD_WIDTH",
        "index * CARD_WIDTH",
        "(index + 1) * CARD_WIDTH",
        "(index + 2) * CARD_WIDTH",
        "(index + 3) * CARD_WIDTH"
      ],
      "reason": "Allows precise control over all stages of the animation as cards enter, center, and exit",
      "author_comment": "Usually inputRange would be 3 points, but we need huge control over all steps"
    },
    "multi_dimensional_transforms": {
      "scale": {
        "output_range": "[0.75, 0.8, 0.8, 1, 0.8, 0.8, 0.75]",
        "effect": "Center card is full size (1), surrounding cards scaled to 80%, distant cards to 75%"
      },
      "rotate_z": {
        "output_range": "[-Ï€/5, -Ï€/10, -Ï€/20, 0, Ï€/20, Ï€/10, Ï€/5]",
        "effect": "Cards rotate in plane, center card at 0Â°, progressive rotation away from center",
        "units": "radians"
      },
      "translateX": {
        "output_range": "[-CARD_WIDTH*0.3, -CARD_WIDTH*0.25, -CARD_WIDTH*0.2, 0, CARD_WIDTH*0.2, CARD_WIDTH*0.25, CARD_WIDTH*0.3]",
        "effect": "Cards spread horizontally away from center position"
      },
      "translateY": {
        "output_range": "[-CARD_HEIGHT*0.05, -CARD_HEIGHT*0.025, -CARD_HEIGHT*0.04, 0, -CARD_HEIGHT*0.04, -CARD_HEIGHT*0.025, -CARD_HEIGHT*0.02]",
        "effect": "Cards lift slightly above center when not in focus, creating arc effect"
      },
      "rotateY": {
        "input_range": "9 points (includes half-steps at Â±0.5 for smooth transition)",
        "output_range": "[-Ï€/10, -Ï€/10, -Ï€/20, -Ï€/5, 0, Ï€/5, Ï€/20, Ï€/10, Ï€/10]",
        "effect": "3D perspective rotation, creates depth illusion",
        "special_points": "(index Â± 0.5) * CARD_WIDTH for aggressive mid-transition rotation (Â±Ï€/5)"
      },
      "additionalTranslateX": {
        "input_range": "9 points (includes half-steps at Â±0.5)",
        "output_range": "[0, 0, 0, -CARD_WIDTH/2.8, 0, CARD_WIDTH/2.8, 0, 0, 0]",
        "effect": "Creates card swap effect - cards move sideways at transition midpoint",
        "peak_position": "(index Â± 0.5) * CARD_WIDTH"
      }
    },
    "z_index_animation": {
      "pattern": "Separate useAnimatedStyle for z-index control via transformOrigin",
      "output_range": "[0, 200, 300, 400, 300, 200, 0]",
      "implementation": "transformOrigin: ['50%', '50%', zIndex]",
      "purpose": "Ensures center card renders on top, creates proper depth stacking",
      "perspective": 10000000,
      "note": "High perspective value for subtle 3D effect"
    },
    "transform_order": {
      "sequence": [
        "translateX (spread cards)",
        "translateY (lift cards)",
        "additionalTranslateX (swap effect)",
        "scale",
        "rotate (z-axis)",
        "rotateY (perspective)"
      ],
      "importance": "Order matters - transformations compound"
    }
  },

  "architectural_patterns": {
    "clever_scrollview_trick": {
      "problem": "How to scroll through cards without custom gesture handling",
      "solution": "Invisible spacer Views in ScrollView + absolute positioned cards with inverse translation",
      "spacer_views": {
        "count": 10,
        "size": "CARD_WIDTH x CARD_HEIGHT",
        "purpose": "Define scroll area and snap points",
        "visibility": "Invisible (no background, border commented out)",
        "comment": "IMPORTANT: This is the key to the magic ðŸª„"
      },
      "actual_cards": {
        "position": "absolute",
        "container": "Animated.View with inverse translateX",
        "translation": "scrollOffset.value (counteracts ScrollView movement)",
        "result": "Cards stay visually in place while ScrollView scrolls"
      },
      "benefits": [
        "Single ScrollView with paging - no complex gesture coordination",
        "Infinite scalability with single ScrollView",
        "Built-in paging, momentum, and snap behavior",
        "No custom pan gesture handlers needed"
      ]
    },
    "scroll_offset_driver": {
      "pattern": "useScrollViewOffset drives all animations",
      "shared_value": "scrollOffset",
      "propagation": "Passed to each Card component",
      "reactivity": "Each card's useAnimatedStyle reacts to scrollOffset changes",
      "efficiency": "Single shared value, no prop drilling overhead"
    },
    "card_positioning": {
      "absolute_positioning": "Cards positioned absolutely within ScrollView",
      "left_calculation": "(WindowWidth - CARD_WIDTH) / 2",
      "result": "All cards centered horizontally, stacked at same position",
      "movement": "Transformations create apparent position changes"
    }
  },

  "reanimated_patterns": {
    "useScrollViewOffset": {
      "purpose": "Tracks horizontal scroll position in real-time",
      "returns": "SharedValue<number> (scroll offset in pixels)",
      "updates": "Automatically on UI thread as user scrolls",
      "usage": "Primary driver for all card animations"
    },
    "useAnimatedStyle_per_card": {
      "count": 2,
      "rStyle": {
        "purpose": "Main transformations (scale, rotate, translate)",
        "dependencies": "scrollOffset.value",
        "recalculates": "Every scroll frame"
      },
      "zIndexStyle": {
        "purpose": "Z-index control via transformOrigin third value",
        "dependencies": "scrollOffset.value",
        "separate_reason": "Different interpolation, cleaner separation of concerns"
      }
    },
    "interpolation_patterns": {
      "extrapolation": "Extrapolation.CLAMP",
      "effect": "Values don't exceed output ranges, prevents visual glitches at scroll extremes",
      "all_interpolations": "Use same 7-point input range (or 9-point for special effects)"
    },
    "dependency_arrays": {
      "useAnimatedStyle": "Empty [] dependencies",
      "reason": "scrollOffset is SharedValue, changes don't require recreation"
    }
  },

  "mathematical_foundation": {
    "card_dimensions": {
      "CARD_WIDTH": "WindowWidth / 3",
      "CARD_HEIGHT": "(CARD_WIDTH / 3) * 4",
      "aspect_ratio": "3:4 (portrait)",
      "reasoning": "One-third screen width allows side cards visible while centering one card"
    },
    "scroll_metrics": {
      "snapToInterval": "CARD_WIDTH",
      "content_padding": "paddingHorizontal: CARD_WIDTH",
      "effect": "First and last cards can center in viewport",
      "max_scroll": "(CARDS.length - 1) * CARD_WIDTH"
    },
    "input_range_coverage": {
      "range": "Â±3 * CARD_WIDTH from current card",
      "visible_cards": "Typically 3 cards visible at once",
      "animated_cards": "7 cards have active animations at any scroll position",
      "optimization": "Cards outside range clamped to boundary values"
    },
    "perspective_rotation_math": {
      "rotateY": "Rotation around vertical Y-axis",
      "positive_values": "Rotate right side away from viewer",
      "negative_values": "Rotate left side away from viewer",
      "peak_rotation": "Â±Ï€/5 radians (Â±36Â°) at transition midpoints",
      "creates": "3D depth illusion, cards appear to turn like pages"
    },
    "swap_effect_timing": {
      "trigger_points": "(index Â± 0.5) * CARD_WIDTH",
      "meaning": "Halfway between snap points",
      "effect": "Cards aggressively move sideways during transition",
      "magnitude": "Â±CARD_WIDTH / 2.8 (Â±35.7% of card width)",
      "purpose": "Creates dramatic card swapping visual"
    }
  },

  "visual_design": {
    "color_scheme": {
      "background": "#000 (black)",
      "card_colors": [
        "#F1EEE0 (soft beige)",
        "#F3D9BC (light peach)",
        "#F4ACB7 (pale pink)",
        "#F6DFEB (soft lavender)",
        "#E2F0CB (light green)",
        "#C7E3D4 (mint green)",
        "#AFCBFF (soft blue)",
        "#E3DFFF (lavender blue)",
        "#FFE5E0 (light coral)",
        "#FFD1DC (baby pink)"
      ],
      "palette": "Pastel tones, calming, aesthetic",
      "contrast": "High contrast with black background"
    },
    "card_styling": {
      "border_radius": 20,
      "border_curve": "continuous (iOS)",
      "shadow": {
        "color": "rgba(0, 0, 0, 0.3)",
        "offset": "{width: 0, height: 10}",
        "opacity": 0.2,
        "radius": 20
      },
      "effect": "Floating cards with soft shadows"
    },
    "layout": {
      "container": "Centered in screen (flex: 1, justifyContent: center)",
      "vertical_padding": 25,
      "scroll_area": "Horizontal strip in center of screen",
      "height": "CARD_HEIGHT + (VerticalListPadding * 2)"
    },
    "depth_cues": {
      "scale": "Smaller cards appear farther away",
      "shadow": "Consistent shadow creates floating effect",
      "rotation": "Perspective rotation creates 3D depth",
      "layering": "Z-index ensures proper occlusion"
    }
  },

  "performance_optimizations": {
    "single_scrollview": {
      "benefit": "One native scroll component vs multiple gesture detectors",
      "performance": "Native paging, momentum, and deceleration",
      "scalability": "Works with any number of cards without performance degradation"
    },
    "worklet_animations": {
      "pattern": "All interpolations run on UI thread",
      "benefit": "No bridge communication during scrolling",
      "result": "Smooth 60fps even with 10 cards and complex transforms"
    },
    "useAnimatedStyle_optimization": {
      "memoization": "Reanimated automatically memoizes style objects",
      "recalculation": "Only when dependencies change (scrollOffset)",
      "efficiency": "Each card calculates independently, no cascade"
    },
    "transform_combining": {
      "pattern": "Multiple transforms in single style object",
      "benefit": "GPU can apply all transforms in one pass",
      "vs_nested_views": "Much more efficient than nested Animated.Views"
    },
    "view_recycling": {
      "implementation": "10 View components in ScrollView, 10 Card components",
      "total": "20 components, not thousands",
      "vs_flatlist": "No virtualization needed for small list",
      "memory": "Minimal footprint"
    }
  },

  "interaction_design": {
    "gesture": "Horizontal swipe/drag",
    "paging": "Snaps to nearest card",
    "momentum": "Natural deceleration on fling",
    "feedback": {
      "visual": "Cards transform smoothly during scroll",
      "haptic": "Native ScrollView haptics (platform default)",
      "responsive": "Immediate response to touch"
    },
    "edge_behavior": {
      "first_card": "Can scroll left to show first card centered",
      "last_card": "Can scroll right to show last card centered",
      "implementation": "paddingHorizontal: CARD_WIDTH in contentContainerStyle"
    }
  },

  "inspiration": {
    "source": "iMessage photo stack/image viewer",
    "ios_pattern": "Familiar to iOS users",
    "similar_to": [
      "Apple Photos stack view",
      "Safari tab switcher",
      "App Store card transitions"
    ]
  },

  "code_quality": {
    "strengths": [
      "TypeScript with SharedValue type annotations",
      "Clear separation: index.tsx (setup) vs card.tsx (logic)",
      "Extensive inline comments explaining algorithm",
      "Author comments highlight key insights ('IMPORTANT: This is the key to the magic')",
      "Named constants (CARD_WIDTH, CARD_HEIGHT)",
      "Descriptive variable names (rStyle, rListViewStyle, inputRange)",
      "Props interface with SharedValue typing",
      "Clean functional components with hooks",
      "No prop drilling - scrollOffset passed directly to cards"
    ],
    "areas_for_improvement": [
      "Could extract interpolation configs to constants for easier tweaking",
      "Color data could include names for documentation",
      "Could add TypeScript type for card data structure",
      "Magic numbers (0.75, 0.8, Ï€/5, etc.) could be named constants",
      "Could add visual diagram comment explaining coordinate system"
    ]
  },

  "configuration": {
    "adjustable_parameters": {
      "CARD_WIDTH": {
        "current": "WindowWidth / 3",
        "effect": "Card width and scroll snap interval",
        "alternatives": "WindowWidth / 2.5, WindowWidth / 4"
      },
      "aspect_ratio": {
        "current": "3:4",
        "effect": "Card proportions",
        "alternatives": "1:1 (square), 9:16, 4:3"
      },
      "VerticalListPadding": {
        "current": 25,
        "effect": "Vertical space around scroll area"
      },
      "scale_range": {
        "current": "[0.75, 0.8, 0.8, 1, 0.8, 0.8, 0.75]",
        "effect": "How much cards shrink when not centered",
        "impact": "Lower values = more dramatic scaling"
      },
      "rotation_range": {
        "current": "Â±Ï€/5 (Â±36Â°)",
        "effect": "Maximum Z-axis rotation",
        "impact": "Higher values = more dramatic rotation"
      },
      "perspective_rotation": {
        "current": "Â±Ï€/5 at midpoints",
        "effect": "3D depth rotation intensity",
        "impact": "Higher values = more aggressive 3D effect"
      },
      "swap_magnitude": {
        "current": "CARD_WIDTH / 2.8",
        "effect": "How far cards move sideways during swap",
        "impact": "Higher divisor = less dramatic swap"
      },
      "colors": {
        "current": "10 pastel colors",
        "customizable": true,
        "requirement": "Array of valid color strings"
      }
    }
  },

  "use_cases": {
    "primary": [
      "Photo gallery/viewer",
      "Onboarding card stack",
      "Product showcase",
      "Story/article browser",
      "Card deck interfaces",
      "Tutorial steps"
    ],
    "content_types": [
      "Images (like iMessage)",
      "Product cards",
      "Profile cards",
      "Article previews",
      "Feature highlights",
      "Media thumbnails"
    ],
    "suitable_for": [
      "E-commerce apps",
      "Social media",
      "Dating apps",
      "News readers",
      "Portfolio apps",
      "Educational content"
    ]
  },

  "known_limitations": {
    "card_count": {
      "issue": "Fixed array of cards, not dynamic data",
      "enhancement": "Could map over dynamic data array"
    },
    "content_placeholder": {
      "issue": "Cards are just colored rectangles",
      "real_usage": "Would contain images, text, or complex components",
      "consideration": "Card content should be memoized to prevent render overhead"
    },
    "accessibility": {
      "issue": "No screen reader support",
      "missing": "Accessibility labels, haptic feedback, voice control",
      "recommendation": "Add accessibilityLabel to cards"
    },
    "web_support": {
      "consideration": "ScrollView paging behavior may differ on web",
      "testing": "Requires web-specific testing"
    },
    "border_curve": {
      "platform": "borderCurve: 'continuous' is iOS-only",
      "fallback": "Android uses standard border-radius"
    }
  },

  "potential_improvements": {
    "interactivity": [
      "Tap card to expand to fullscreen",
      "Long press for context menu",
      "Pinch to zoom individual cards",
      "Double tap for quick actions"
    ],
    "animation": [
      "Parallax effect within cards",
      "Blur inactive cards",
      "Color shift in background based on active card",
      "Entrance/exit animations for cards"
    ],
    "functionality": [
      "Dynamic data loading",
      "Infinite scroll with data fetching",
      "Card deletion with animation",
      "Card reordering",
      "Search/filter cards"
    ],
    "visual": [
      "Gradient overlays",
      "Image backgrounds instead of colors",
      "Custom card content components",
      "Page indicators/dots",
      "Card counter (e.g., '3 of 10')"
    ],
    "performance": [
      "Lazy loading card content",
      "Image optimization for photo stacks",
      "Virtualization for 100+ cards"
    ]
  },

  "key_insights": {
    "scrollview_trick": "Invisible spacer Views + absolutely positioned cards with inverse translation = leverages native ScrollView while maintaining full control",
    "single_driver": "One scrollOffset SharedValue drives complex multi-dimensional transforms across all cards",
    "aggressive_interpolation": "7-9 point interpolations provide fine-grained control over animation staging",
    "transform_composition": "Combining 6 transforms in specific order creates complex 3D effect from 2D primitives",
    "z_index_via_transform": "transformOrigin third value used for z-index animation is clever workaround",
    "paging_power": "Native ScrollView paging provides snap points, momentum, and haptics for free",
    "no_gestures_needed": "ScrollView handles all gesture detection, no custom PanGestureHandler required",
    "scalability": "Architecture supports infinite cards without performance degradation"
  },

  "learning_opportunities": {
    "for_beginners": [
      "useScrollViewOffset basics",
      "useAnimatedStyle with interpolate",
      "ScrollView paging configuration",
      "Basic transform properties"
    ],
    "for_intermediate": [
      "Advanced interpolation with 7+ point ranges",
      "Combining multiple transforms",
      "Z-index animation techniques",
      "Scroll-driven animations",
      "Extrapolation patterns"
    ],
    "for_advanced": [
      "Architectural pattern: invisible spacers + absolute positioning",
      "3D perspective effects with rotateY",
      "Multi-stage animation timing",
      "Performance optimization with SharedValues",
      "Complex transform sequencing and order dependencies"
    ],
    "concepts_demonstrated": [
      "Scroll offset as animation driver",
      "Transform composition and order",
      "3D CSS transforms in React Native",
      "Native ScrollView integration with Reanimated",
      "Index-based interpolation ranges",
      "Clamped extrapolation"
    ]
  },

  "related_patterns": {
    "similar_animations": [
      "Coverflow carousel",
      "Card carousel with perspective",
      "Swipeable deck (Tinder-style)",
      "Page curl transitions",
      "3D carousel"
    ],
    "architectural_similarities": [
      "FlatList with scroll-driven animations",
      "Parallax scroll effects",
      "Animated headers with scroll",
      "Tab bar animations from scroll"
    ]
  },

  "testing_considerations": {
    "visual_regression": [
      "Snapshot test at each scroll position",
      "Test with different screen sizes",
      "Test with different card counts",
      "Verify shadows render correctly"
    ],
    "interaction_testing": [
      "Swipe left/right",
      "Fast fling gesture",
      "Slow drag",
      "Edge cases (first/last card)",
      "Momentum behavior"
    ],
    "animation_testing": [
      "Verify smooth 60fps scrolling",
      "Test transform calculations at key positions",
      "Verify interpolation ranges",
      "Check z-index correctness"
    ],
    "platform_testing": [
      "iOS paging behavior",
      "Android paging behavior",
      "Web ScrollView differences",
      "Continuous border curve on iOS vs Android"
    ]
  },

  "bundle_size_impact": {
    "code_size": "Very small (~130 lines total)",
    "dependencies": "Only Reanimated (likely already in project)",
    "runtime_memory": "Minimal - 10 static components + shared values",
    "estimated_memory": "< 100KB"
  },

  "tags": [
    "scroll-animation",
    "reanimated",
    "card-stack",
    "3d-transform",
    "perspective",
    "horizontal-scroll",
    "paging",
    "interpolation",
    "imessage",
    "carousel",
    "gallery",
    "ios-inspired"
  ]
}
