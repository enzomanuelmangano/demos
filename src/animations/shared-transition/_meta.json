{
  "animation_name": "Shared Transition",
  "animation_slug": "shared-transition",
  "description": "A native stack navigation implementation showcasing shared element transitions between screens. Features a masonry grid layout on the home screen with dynamic image heights, and smooth fade transitions to a detail screen. Utilizes React Navigation's native stack navigator with fade animations and expo-image for optimized image rendering with memory-disk caching. Demonstrates hero tag implementation (currently disabled) for future shared element transitions between screens.",

  "main_features": [
    "React Navigation native stack implementation",
    "Masonry grid layout with 2 columns using @react-native-seoul/masonry-list",
    "Dynamic image heights (150-250px range) based on item index",
    "Fade transitions between screens (300ms duration)",
    "Hero tag preparation for shared element transitions",
    "Optimized image caching with expo-image (memory-disk policy)",
    "Type-safe navigation with TypeScript param lists",
    "Screen-based navigation between Home and Details",
    "Animated text with FadeIn/FadeOut on details screen",
    "Responsive image sizing based on screen dimensions"
  ],

  "file_structure": {
    "index.tsx": "Main navigation component with native stack navigator setup",
    "screens/home/index.tsx": "Home screen with masonry grid layout of images",
    "screens/details/index.tsx": "Details screen showing full-width image and animated text content",
    "components/animated-image.tsx": "Reanimated-wrapped expo-image component for future shared transitions",
    "constants/images.ts": "Array of 10 local image assets (00.jpg through 09.jpg)",
    "constants/screen-names.ts": "Enum defining screen names (Home, Details)",
    "typings/index.ts": "TypeScript type definitions for navigation params and props",
    "assets/images/": "Local image assets (10 JPG files, ~300-470KB each)"
  },

  "core_technologies": {
    "navigation": "@react-navigation/native-stack",
    "animations": "react-native-reanimated",
    "images": "expo-image",
    "layout": "@react-native-seoul/masonry-list"
  },

  "packages_and_versions": {
    "react-navigation/native-stack": {
      "version": "^7.3.16",
      "components": ["createNativeStackNavigator", "Stack.Navigator", "Stack.Screen"],
      "hooks": ["useNavigation"],
      "critical_feature": "Native stack navigation with configurable transitions"
    },
    "react-navigation/native": {
      "version": "^7.1.8",
      "hooks": ["useNavigation"],
      "types": ["NativeStackScreenProps"],
      "usage": "Navigation state management and hooks"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "components": ["Animated.Text", "Animated.createAnimatedComponent"],
      "layout_animations": ["FadeIn", "FadeOut"],
      "usage": "Text animations on details screen and AnimatedImage component creation"
    },
    "expo-image": {
      "version": "~3.0.8",
      "component": "Image",
      "features": ["cachePolicy: 'memory-disk'"],
      "usage": "Optimized image rendering with memory and disk caching for all grid and detail images"
    },
    "@react-native-seoul/masonry-list": {
      "version": "^1.4.2",
      "component": "MasonryList",
      "features": ["numColumns", "renderItem", "contentContainerStyle"],
      "usage": "Pinterest-style masonry grid layout with dynamic item heights"
    }
  },

  "animation_techniques": {
    "screen_transition": {
      "pattern": "Native stack fade transition",
      "animation": "fade",
      "duration": 300,
      "trigger": "Navigation between Home and Details screens",
      "effect": "Smooth cross-fade between entire screens",
      "note": "Configured at navigator level, applies to all screen transitions"
    },
    "text_fade_in": {
      "pattern": "Staggered FadeIn animations on text elements",
      "title": {
        "animation": "FadeIn.delay(400)",
        "delay": "400ms",
        "effect": "Title fades in after image is visible"
      },
      "paragraph": {
        "animation": "FadeIn.delay(600)",
        "delay": "600ms",
        "effect": "Paragraph fades in after title, creating cascading effect"
      },
      "exiting": "FadeOut (both elements)",
      "purpose": "Staggered content reveal for improved user experience"
    },
    "hero_tag_preparation": {
      "pattern": "Commented sharedTransitionTag prop",
      "implementation": "sharedTransitionTag={heroTag}",
      "status": "Disabled (commented with @@TODO: maybe back in 4.2.0)",
      "tag_generation": "'heroTag' + index (unique per item)",
      "note": "Infrastructure ready for future shared element transitions when re-enabled"
    },
    "dynamic_image_heights": {
      "pattern": "Index-based height calculation",
      "formula": "150 + 50 * ((i ?? 0) % 3)",
      "heights": [
        "index % 3 === 0: 150px",
        "index % 3 === 1: 200px",
        "index % 3 === 2: 250px"
      ],
      "effect": "Creates Pinterest-style staggered masonry layout",
      "cycling": "Repeats every 3 items for visual variety"
    }
  },

  "reanimated_patterns": {
    "animated_component_creation": {
      "pattern": "Animated.createAnimatedComponent(Image)",
      "source": "expo-image Image component",
      "result": "AnimatedImage component",
      "purpose": "Enables Reanimated animations on expo-image (for future shared transitions)",
      "usage": "Used throughout for all image rendering"
    },
    "layout_animations": {
      "FadeIn": {
        "instances": 2,
        "locations": ["Title text", "Paragraph text"],
        "delays": ["400ms", "600ms"],
        "pattern": "FadeIn.delay(ms)",
        "effect": "Sequential text appearance on details screen"
      },
      "FadeOut": {
        "instances": 2,
        "locations": ["Title text", "Paragraph text"],
        "pattern": "exiting={FadeOut}",
        "effect": "Fade out when navigating away from details screen"
      }
    },
    "component_wrapping": {
      "AnimatedImage": {
        "created_from": "Animated.createAnimatedComponent(Image)",
        "file": "components/animated-image.tsx",
        "props_supported": ["sharedTransitionTag (future)", "cachePolicy", "source", "style"],
        "benefit": "Single reusable component for all images with animation support"
      }
    }
  },

  "navigation_architecture": {
    "stack_configuration": {
      "navigator": "createNativeStackNavigator<RootStackParamsList>()",
      "initialRouteName": "Home",
      "screenOptions": {
        "animation": "fade",
        "animationDuration": 300
      },
      "screens": [
        {
          "name": "Home",
          "component": "HomeScreen",
          "params": "undefined"
        },
        {
          "name": "Details",
          "component": "DetailsScreen",
          "params": "{ source: any, heroTag: string }"
        }
      ]
    },
    "type_safety": {
      "RootStackParamsList": {
        "Home": "undefined (no params)",
        "Details": "{ source, heroTag }"
      },
      "RootStackNavigationProp<T>": "Typed navigation prop for screen T",
      "RootStackRouteProp<T>": "Typed route prop for screen T",
      "MainStackNavigationProp": "Generic navigation prop (any screen)",
      "DetailsRouteProp": "Specific route prop for Details screen"
    },
    "navigation_flow": {
      "trigger": "TouchableOpacity onPress in masonry grid item",
      "action": "navigation.navigate(ScreenNames.Details, { source, heroTag })",
      "data_passed": [
        "source: Image require() reference",
        "heroTag: 'heroTag' + index (unique identifier)"
      ],
      "back_navigation": "Native stack back gesture or button"
    },
    "screen_names_enum": {
      "pattern": "const enum ScreenNames",
      "values": {
        "Home": "'Home'",
        "Details": "'Details'"
      },
      "benefit": "Type-safe screen name references, no string literals"
    }
  },

  "component_architecture": {
    "shared_transitions": {
      "type": "Main navigation wrapper",
      "memo": true,
      "responsibility": "Configure and render native stack navigator",
      "children": [
        "Stack.Navigator",
        "Stack.Screen (Home)",
        "Stack.Screen (Details)"
      ]
    },
    "home_screen": {
      "type": "List screen component",
      "memo": true,
      "responsibility": "Render masonry grid of images and handle navigation",
      "navigation_hook": "useNavigation<MainStackNavigationProp>()",
      "list_component": "MasonryList (2 columns)",
      "data": "dataSources (10 images)",
      "renderItem": {
        "wrapper": "TouchableOpacity",
        "navigation": "Navigate to Details with source and heroTag",
        "content": "AnimatedImage with dynamic height"
      }
    },
    "details_screen": {
      "type": "Detail screen component",
      "memo": true,
      "props": "FC<{ route: DetailsRouteProp }>",
      "responsibility": "Display full image and animated text content",
      "data_access": "route.params.source (and heroTag for future use)",
      "layout": [
        "Full-width image (height: 300px)",
        "Text container with padding",
        "Animated title (FadeIn.delay(400))",
        "Animated paragraph (FadeIn.delay(600))"
      ]
    },
    "animated_image": {
      "type": "Utility component",
      "implementation": "Animated.createAnimatedComponent(Image)",
      "purpose": "Reusable animated image component",
      "features": [
        "Supports Reanimated animations",
        "expo-image optimization",
        "Prepared for sharedTransitionTag"
      ]
    }
  },

  "layout_and_positioning": {
    "masonry_grid": {
      "numColumns": 2,
      "item_width": "Dimensions.get('window').width / 2 - 10",
      "item_heights": "150px, 200px, or 250px (based on index % 3)",
      "spacing": {
        "horizontal": "20 / 3 ≈ 6.67px between columns",
        "vertical": "20 / 3 ≈ 6.67px between rows",
        "left_margin": "20 / 3 ≈ 6.67px"
      },
      "borderRadius": 10,
      "contentContainerStyle": {
        "paddingBottom": 100
      }
    },
    "grid_item_margins": {
      "pattern": "Conditional marginRight based on column",
      "calculation": "(i ?? 0) % 2 === 1 ? 20 / 3 : 0",
      "left_column": "marginRight: 0 (no right margin)",
      "right_column": "marginRight: 6.67px (spacing from edge)",
      "all_items": "marginLeft: 6.67px, marginTop: 6.67px"
    },
    "details_layout": {
      "container": "flex: 1 (full screen)",
      "image": {
        "height": 300,
        "width": "Dimensions.get('window').width (full width)"
      },
      "textContainer": {
        "paddingHorizontal": 10,
        "marginTop": 15,
        "spacing_between": 20
      },
      "title": {
        "fontSize": 20,
        "fontWeight": "bold",
        "marginTop": 15
      },
      "paragraph": {
        "fontSize": 16,
        "marginTop": 20
      }
    }
  },

  "visual_design": {
    "home_screen": {
      "layout": "Masonry grid (2 columns)",
      "image_sizing": "Dynamic heights (150-250px) with fixed width",
      "border_radius": 10,
      "spacing": "~6.67px uniform spacing",
      "bottom_padding": 100
    },
    "details_screen": {
      "background": "Implicit (system default)",
      "image": "Full-width, 300px height, no border radius",
      "text_color": "System default (black in light mode)",
      "content": "Lorem ipsum placeholder text"
    },
    "image_assets": {
      "count": 10,
      "format": "JPG",
      "naming": "00.jpg through 09.jpg",
      "sizes": "~200-470KB each",
      "total_size": "~3MB of image assets",
      "loading": "Local requires, cached by expo-image"
    },
    "caching_strategy": {
      "policy": "memory-disk",
      "benefit": "Images cached in memory for instant rendering, fallback to disk",
      "persistence": "Survives app restarts (disk cache)",
      "performance": "No network requests, fast image loading"
    }
  },

  "data_structure": {
    "images_array": {
      "type": "require() references",
      "count": 10,
      "pattern": "require('../assets/images/XX.jpg')",
      "files": [
        "00.jpg (470KB)",
        "01.jpg (307KB)",
        "02.jpg (411KB)",
        "03.jpg (404KB)",
        "04.jpg (366KB)",
        "05.jpg (32KB)",
        "06.jpg (297KB)",
        "07.jpg (388KB)",
        "08.jpg (198KB)",
        "09.jpg (198KB)"
      ],
      "note": "05.jpg is notably smaller (32KB), likely optimized or different content"
    },
    "navigation_params": {
      "Details_screen": {
        "source": {
          "type": "any (require() reference)",
          "note": "Typed as 'any' with :) comment, could be improved",
          "value": "require('../assets/images/XX.jpg')"
        },
        "heroTag": {
          "type": "string",
          "pattern": "'heroTag' + index",
          "examples": ["heroTag0", "heroTag1", "heroTag2"],
          "purpose": "Unique identifier for shared element transitions (future)"
        }
      }
    }
  },

  "performance_optimizations": {
    "memo_components": {
      "SharedTransitions": "Main component memoized",
      "HomeScreen": "Screen component memoized",
      "DetailsScreen": "Screen component memoized with route destructuring",
      "benefit": "Prevents unnecessary re-renders"
    },
    "image_caching": {
      "strategy": "expo-image with memory-disk policy",
      "benefit": "Fast image rendering, no repeated loading",
      "memory": "Recently viewed images in RAM",
      "disk": "All loaded images cached to disk"
    },
    "native_navigation": {
      "stack": "@react-navigation/native-stack",
      "benefit": "Uses native navigation primitives (UINavigationController on iOS)",
      "performance": "Better than JS-based stack navigators",
      "animations": "Native platform animations"
    },
    "masonry_list": {
      "virtualization": "Built-in virtualization from MasonryList",
      "benefit": "Only renders visible items",
      "note": "With 10 items, all likely rendered (small dataset)"
    },
    "type_any_warning": {
      "issue": "source typed as 'any'",
      "current_impact": "Minimal - require() is type-safe enough",
      "improvement": "Could type as ImageSourcePropType or ReturnType<typeof require>"
    }
  },

  "interaction_pattern": {
    "home_screen_tap": {
      "trigger": "TouchableOpacity onPress",
      "action": "navigation.navigate(ScreenNames.Details, { source, heroTag })",
      "feedback": "Default TouchableOpacity opacity change",
      "navigation": "Push Details screen onto stack",
      "transition": "300ms fade animation",
      "data_transfer": "Image source and hero tag passed via route params"
    },
    "details_screen": {
      "entry": "Fade in over 300ms",
      "content_reveal": {
        "image": "Appears immediately with screen",
        "title": "FadeIn after 400ms",
        "paragraph": "FadeIn after 600ms"
      },
      "back_navigation": {
        "gesture": "Native swipe back (iOS)",
        "button": "System back button (Android)",
        "animation": "300ms fade out"
      }
    }
  },

  "use_cases": {
    "primary": [
      "Image galleries with detail views",
      "Photo browsing applications",
      "Portfolio showcases",
      "Product catalogs with detail pages",
      "Content discovery apps"
    ],
    "secondary": [
      "Recipe apps (grid of recipes → recipe details)",
      "Real estate listings (properties grid → property details)",
      "Social media feeds (posts grid → post details)",
      "News apps (article previews → full articles)",
      "E-commerce product galleries"
    ],
    "educational": [
      "Teaching React Navigation basics",
      "Demonstrating masonry layouts",
      "Showing shared element transition preparation",
      "Image optimization patterns",
      "Type-safe navigation implementation"
    ],
    "real_world_examples": [
      "Pinterest (masonry grid → pin details)",
      "Instagram (grid profile → post details)",
      "Unsplash (photo grid → photo details)",
      "Airbnb (listings grid → listing details)",
      "Etsy (products grid → product details)"
    ]
  },

  "code_quality": {
    "typescript": {
      "coverage": "Full TypeScript with explicit types",
      "type_definitions": [
        "RootStackParamsList",
        "RootStackNavigationProp<T>",
        "RootStackRouteProp<T>",
        "MainStackNavigationProp",
        "DetailsRouteProp"
      ],
      "enums": ["ScreenNames (const enum)"],
      "generics": "Navigation types use generics for type safety",
      "any_usage": "One instance on source type (with :) comment)"
    },
    "component_structure": {
      "pattern": "Screen-based architecture",
      "separation": "Clear separation of concerns (screens, components, constants, types)",
      "navigation": "Centralized in index.tsx",
      "screens": "Focused responsibilities",
      "components": "Reusable AnimatedImage"
    },
    "imports": {
      "type_imports": "Proper 'type' keyword for type-only imports",
      "organization": "Grouped by source (react, react-native, navigation, local)",
      "no_unused": "Clean, no unnecessary imports"
    },
    "constants": {
      "ScreenNames": "const enum for compile-time optimization",
      "dataSources": "Centralized image array",
      "organization": "Separate constants directory"
    },
    "naming_conventions": {
      "components": "PascalCase (HomeScreen, DetailsScreen, AnimatedImage)",
      "constants": "camelCase (dataSources) and PascalCase (ScreenNames)",
      "types": "PascalCase with descriptive suffixes (Prop, Type)",
      "files": "kebab-case (screen-names.ts, animated-image.tsx)"
    },
    "best_practices": [
      "memo for component optimization",
      "TypeScript for type safety",
      "Enum for screen names",
      "Destructured route params for clarity",
      "Separate types file",
      "useNavigation hook for navigation access",
      "Native stack for performance"
    ],
    "areas_for_improvement": [
      "source type could be more specific than 'any'",
      "Missing eslint-disable comment justification for 'any'",
      "No error handling for image loading failures",
      "Hardcoded lorem ipsum text (should be from data/constants)",
      "No loading states for navigation transitions",
      "Could extract image dimension calculations to constants"
    ]
  },

  "known_limitations": {
    "shared_transitions_disabled": {
      "issue": "sharedTransitionTag prop commented out",
      "reason": "TODO comment suggests waiting for Reanimated 4.2.0",
      "impact": "No shared element transitions between screens",
      "current_behavior": "Simple fade transition instead",
      "note": "Infrastructure ready for when feature is re-enabled"
    },
    "fixed_image_sizes": {
      "home_screen": "Item width calculated from screen width, not responsive to orientation changes",
      "details_screen": "Image height hardcoded to 300px",
      "improvement": "Could use aspectRatio or percentage-based heights"
    },
    "placeholder_content": {
      "issue": "Lorem ipsum text on details screen",
      "impact": "Not production-ready without real content",
      "improvement": "Should accept content via navigation params or fetch from API"
    },
    "no_error_handling": {
      "image_loading": "No fallback for failed image loads",
      "navigation": "No error boundaries for navigation issues",
      "improvement": "Add error states and fallback UI"
    },
    "image_type_safety": {
      "issue": "source typed as 'any'",
      "impact": "Loses TypeScript type checking for image sources",
      "note": "Intentional based on :) comment, but could be improved"
    },
    "masonry_column_count": {
      "limitation": "Fixed 2 columns",
      "impact": "Not responsive to different screen sizes (tablets)",
      "improvement": "Could be dynamic based on screen width"
    },
    "no_animations_on_mount": {
      "limitation": "Home screen has no entrance animations",
      "impact": "Items appear instantly, no polish",
      "improvement": "Could add staggered FadeIn for grid items"
    }
  },

  "potential_improvements": {
    "shared_element_transitions": [
      "Enable sharedTransitionTag when Reanimated supports it",
      "Custom shared element transition configuration",
      "Multiple shared elements (image + text)",
      "Gesture-based shared transitions"
    ],
    "layout_enhancements": [
      "Responsive column count (2-4 columns based on screen width)",
      "Support for horizontal orientation",
      "Pull to refresh on home screen",
      "Infinite scroll / pagination",
      "Skeleton screens during loading",
      "Empty state for no images"
    ],
    "navigation_features": [
      "Deep linking support",
      "Custom header components",
      "Search functionality",
      "Filter/sort options",
      "Swipe between detail items",
      "Share functionality"
    ],
    "content_improvements": [
      "Real content instead of lorem ipsum",
      "Image metadata (title, description, photographer)",
      "Tags/categories",
      "Related images section",
      "Comments/likes functionality",
      "Save to favorites"
    ],
    "animations": [
      "Staggered grid item entrance animations",
      "Parallax effect on detail image",
      "Gesture-driven navigation",
      "Custom transition animations",
      "Loading shimmer effect",
      "Haptic feedback on interactions"
    ],
    "performance": [
      "Image lazy loading",
      "Progressive image loading (blur-up)",
      "Optimize large images before bundling",
      "Virtual scrolling for large datasets",
      "Preload next/previous detail images"
    ],
    "accessibility": [
      "Alt text for images",
      "Screen reader support",
      "Proper heading hierarchy",
      "Focus management",
      "Reduced motion support",
      "High contrast mode support",
      "Keyboard navigation (web)"
    ],
    "error_handling": [
      "Image load error fallbacks",
      "Network error handling",
      "Error boundaries",
      "Retry mechanisms",
      "User-friendly error messages"
    ]
  },

  "key_insights": {
    "native_stack_benefits": "Using native stack provides better performance than JS-based stacks",
    "masonry_library": "Using dedicated masonry library is simpler than custom FlexBox implementation",
    "hero_tag_preparation": "Code prepared for shared transitions shows forward-thinking architecture",
    "expo_image_optimization": "memory-disk caching policy provides best balance of speed and persistence",
    "type_safety_navigation": "Typed navigation params prevent runtime errors from typos or wrong param types",
    "dynamic_heights_pattern": "Index-based height calculation (% 3) creates predictable visual variety",
    "staggered_text_fade": "Delayed FadeIn animations create professional content reveal sequence",
    "const_enum_optimization": "ScreenNames as const enum provides type safety with zero runtime cost",
    "component_separation": "Separate AnimatedImage component allows easy future enhancement",
    "fade_transition_choice": "Fade is universal transition that works well without shared elements"
  },

  "learning_opportunities": {
    "for_beginners": [
      "React Navigation basics (stack navigator)",
      "Navigation between screens with params",
      "useNavigation hook usage",
      "Masonry list layout",
      "Basic Reanimated animations (FadeIn/FadeOut)",
      "expo-image component usage"
    ],
    "for_intermediate": [
      "TypeScript with React Navigation (typed params)",
      "Navigation prop types and type safety",
      "Const enums in TypeScript",
      "Animated.createAnimatedComponent pattern",
      "Image caching strategies",
      "Staggered animations with delays",
      "Component memoization",
      "Route param destructuring"
    ],
    "for_advanced": [
      "Preparing for shared element transitions",
      "Navigation architecture patterns",
      "Performance optimization with native stacks",
      "Type-safe navigation systems",
      "Custom navigation configurations",
      "Reanimated component wrapping",
      "Migration strategies (disabled features with TODOs)"
    ]
  },

  "testing_considerations": {
    "visual_regression": [
      "Masonry grid renders with correct column count",
      "Images have correct dynamic heights (150/200/250)",
      "Spacing between items is consistent",
      "Detail screen image renders at full width",
      "Text animations appear at correct timing"
    ],
    "navigation_testing": [
      "Navigate from home to details passes correct params",
      "Back navigation returns to home screen",
      "Navigation state persists correctly",
      "Deep linking works (if implemented)",
      "Navigation transitions are smooth"
    ],
    "interaction_testing": [
      "Tapping grid item navigates to details",
      "Correct image appears on detail screen",
      "Back gesture works (iOS)",
      "Back button works (Android)",
      "Rapid navigation doesn't break app"
    ],
    "performance_testing": [
      "Navigation transitions maintain 60fps",
      "Images load quickly from cache",
      "No memory leaks from navigation",
      "Smooth scrolling on home screen",
      "No lag when navigating back"
    ],
    "edge_cases": [
      "Empty images array",
      "Single image",
      "Missing image file",
      "Invalid navigation params",
      "Screen rotation during transition",
      "Low memory devices"
    ],
    "cross_platform": [
      "iOS navigation gestures work",
      "Android back button works",
      "Screen transitions on both platforms",
      "Image rendering consistency",
      "Text rendering and animations"
    ]
  },

  "accessibility_considerations": {
    "current_state": {
      "images": "No alt text or accessibility labels",
      "navigation": "Default React Navigation accessibility",
      "text": "Readable by screen readers (default)",
      "interactions": "TouchableOpacity accessible by default"
    },
    "missing_features": [
      "No image descriptions (accessibilityLabel)",
      "No hint for what tapping image does",
      "No announcement when navigating to details",
      "No reduced motion support",
      "No focus management"
    ],
    "recommendations": [
      "Add accessibilityLabel to images describing content",
      "Add accessibilityHint ('Double tap to view details')",
      "Add accessibilityRole='button' to touchable items",
      "Add accessibilityLabel to detail screen image",
      "Support prefers-reduced-motion (disable fade, instant transitions)",
      "Announce screen changes to screen readers",
      "Ensure text meets contrast ratios",
      "Add semantic heading hierarchy"
    ],
    "implementation_suggestions": {
      "image_labels": "Add descriptive text to each image in dataSources",
      "navigation_announcements": "Use AccessibilityInfo.announceForAccessibility",
      "reduced_motion": "Check AccessibilityInfo.isReduceMotionEnabled(), set animationDuration: 0",
      "focus_management": "useFocusEffect to manage focus on screen enter"
    }
  },

  "comparison_to_similar_patterns": {
    "vs_shared_element_transition": {
      "current": "Fade transition between screens",
      "shared_element": "Hero animation of image from grid to detail",
      "difference": "Shared element provides visual continuity, current is simpler",
      "note": "Code prepared to upgrade to shared element when available"
    },
    "vs_modal_presentation": {
      "stack": "Pushes full screen onto stack",
      "modal": "Overlays content, shows previous screen behind",
      "current_choice": "Stack is better for deep navigation hierarchies"
    },
    "vs_tab_navigation": {
      "stack": "Linear navigation (forward/back)",
      "tabs": "Parallel screens with persistent tab bar",
      "use_case": "Stack is correct for gallery → detail flow"
    },
    "vs_flatlist_grid": {
      "masonry": "Dynamic heights, Pinterest-style staggered grid",
      "flatlist_grid": "Uniform heights with numColumns",
      "advantage": "Masonry creates more interesting visual layout"
    }
  },

  "related_patterns": {
    "navigation_patterns": [
      "Stack navigation",
      "Hero/shared element transitions",
      "Master-detail navigation",
      "Gallery navigation",
      "Drill-down navigation"
    ],
    "layout_patterns": [
      "Masonry grid layout",
      "Pinterest-style boards",
      "Dynamic height grids",
      "Responsive column layouts",
      "Image galleries"
    ],
    "animation_patterns": [
      "Fade transitions",
      "Staggered content reveal",
      "Shared element transitions (prepared)",
      "Hero animations",
      "Screen transitions"
    ]
  },

  "real_world_inspiration": {
    "pinterest": "Masonry grid layout with detail views",
    "instagram": "Profile grid → post detail navigation",
    "unsplash": "Photo grid → photo detail with metadata",
    "google_photos": "Grid view → full screen photo with info",
    "airbnb": "Listing cards → listing details"
  },

  "bundle_size_impact": {
    "code_size": "~150 lines total (index: 28, home: 76, details: 73, components: 4, constants: 20, types: 24)",
    "image_assets": "~3MB (10 JPG files in bundle)",
    "dependencies": "All listed dependencies likely already in project",
    "runtime_memory": "Minimal - navigation state and cached images",
    "optimization_potential": "Images could be optimized/compressed, or moved to remote CDN",
    "estimated_code_impact": "< 10KB (code only, excluding images)"
  },

  "platform_considerations": {
    "ios": {
      "navigation": "Native UINavigationController",
      "back_gesture": "Standard swipe-from-left-edge gesture",
      "animations": "Native platform animations",
      "performance": "Excellent",
      "shared_transitions": "Will work when re-enabled"
    },
    "android": {
      "navigation": "Native Fragment navigation",
      "back_button": "Hardware/software back button",
      "animations": "Native platform animations",
      "performance": "Excellent",
      "shared_transitions": "Will work when re-enabled"
    },
    "web": {
      "compatibility": "Works with react-native-web",
      "navigation": "Browser history API",
      "back_button": "Browser back button",
      "note": "Masonry library may need web-specific testing"
    }
  },

  "migration_notes": {
    "shared_transition_readiness": {
      "status": "Code ready, feature disabled",
      "todo": "Re-enable when Reanimated 4.2.0+ available",
      "changes_needed": [
        "Uncomment sharedTransitionTag props (2 locations)",
        "Test shared element transitions",
        "Possibly adjust transition configuration",
        "Verify performance on both platforms"
      ]
    },
    "reanimated_4_2_0": {
      "feature": "Improved shared element transitions",
      "blocked_functionality": "Hero tag transitions",
      "workaround": "Using fade transitions for now",
      "timeline": "TODO comment suggests waiting for future version"
    }
  },

  "tags": [
    "navigation",
    "stack-navigator",
    "masonry-layout",
    "image-gallery",
    "fade-transition",
    "shared-element-preparation",
    "hero-tag",
    "react-navigation",
    "expo-image",
    "reanimated",
    "type-safe-navigation",
    "detail-view",
    "grid-layout",
    "dynamic-heights",
    "staggered-animation",
    "screen-transition",
    "native-stack",
    "typescript"
  ]
}
