{
  "animation_name": "Skia Color Picker",
  "animation_slug": "skia-color-picker",
  "description": "An interactive color picker built with React Native Skia featuring a custom radial gradient shader, HSV color space conversion, and gesture-based color selection. The picker uses a pin-drop shape that follows user gestures within a circular gradient, computing real-time RGBA values based on position. Demonstrates advanced Skia shader programming, worklet-based calculations, and seamless integration of Reanimated with Skia rendering.",

  "main_features": [
    "Custom GLSL shader for radial gradient color wheel",
    "Real-time HSV to RGB color conversion",
    "Gesture-based color selection with pan gestures",
    "Circular boundary clamping for picker movement",
    "Custom pin-drop picker shape from SVG path",
    "Dynamic color preview on picker shape",
    "Position-based hue and saturation calculation",
    "Blur mask effect for visual enhancement",
    "Sweep gradient as background blur layer",
    "Worklet-based color calculations on UI thread",
    "Real-time color update callbacks",
    "scheduleOnRN for main thread communication",
    "Shadow and stroke effects on picker",
    "Responsive canvas sizing based on window dimensions"
  ],

  "file_structure": {
    "entries": {
      "index.tsx": "Main entry component with ColorPicker integration and window dimensions"
    },
    "components": {
      "components/color-picker/index.tsx": "Core ColorPicker component with gesture handling and Skia rendering"
    },
    "hooks": {},
    "utils": {
      "components/color-picker/utils/clamp-to-circle.ts": "Constrains picker position within circular boundary using polar coordinates",
      "components/color-picker/utils/get-hue-from-position.ts": "Calculates hue angle (0-360°) from cartesian coordinates using atan2",
      "components/color-picker/utils/get-saturation-from-position.ts": "Computes saturation percentage using quadratic distance formula",
      "components/color-picker/utils/hsv-to-rgb.ts": "Converts HSV color space to RGB tuple with sector-based algorithm"
    },
    "assets": {},
    "types": {
      "components/color-picker/types.ts": "Point type definition for x/y coordinates"
    },
    "constants": {},
    "shaders": {
      "components/color-picker/shader.ts": "GLSL shader implementing radial gradient with HSV color space conversion"
    }
  },

  "core_technologies": {
    "rendering": "@shopify/react-native-skia",
    "animations": "react-native-reanimated",
    "gestures": "react-native-gesture-handler",
    "threading": "react-native-worklets",
    "ui": "react-native (View, StyleSheet, useWindowDimensions)"
  },

  "packages_and_versions": {
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "components": [
        "Canvas",
        "Circle",
        "Group",
        "Path",
        "Shader",
        "Shadow",
        "SweepGradient",
        "BlurMask"
      ],
      "utilities": [
        "Skia.RuntimeEffect.Make",
        "Skia.Path.MakeFromSVGString"
      ],
      "types": [
        "SkPath"
      ],
      "critical_feature": "Custom GLSL shader via RuntimeEffect for color wheel rendering",
      "usage": "Canvas-based color picker with real-time shader rendering"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedReaction"
      ],
      "components": [
        "Animated.View"
      ],
      "critical_feature": "useDerivedValue for real-time RGBA color computation from picker position",
      "worklets": true
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": [
        "GestureHandlerRootView",
        "GestureDetector"
      ],
      "utilities": [
        "Gesture.Pan()"
      ],
      "usage": "Pan gesture for dragging color picker within circular boundary"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "utilities": [
        "scheduleOnRN"
      ],
      "usage": "Schedule color updates on React Native thread from worklet context",
      "critical_feature": "Bridge between UI thread worklets and main thread callbacks"
    },
    "react-native": {
      "components": [
        "View",
        "StyleSheet"
      ],
      "hooks": [
        "useWindowDimensions"
      ],
      "usage": "Core UI framework and responsive sizing via window dimensions"
    }
  },

  "animation_techniques": {
    "gesture_tracking": {
      "pattern": "Gesture.Pan() with onBegin and onUpdate",
      "handlers": {
        "onBegin": "Initialize picker position on first touch",
        "onUpdate": "Continuously update picker position during drag"
      },
      "worklet": true,
      "effect": "Smooth real-time tracking of user input"
    },
    "position_clamping": {
      "pattern": "Circular boundary constraint using polar coordinates",
      "algorithm": "If distance > radius, project point onto circle boundary",
      "formula": "x = centerX + radius * cos(angle), y = centerY + radius * sin(angle)",
      "effect": "Picker stays within circular color wheel"
    },
    "transform_animation": {
      "pattern": "useDerivedValue for picker transform based on position",
      "transforms": [
        "translateX: pickerX - pickerBounds.width / 2",
        "translateY: pickerY - pickerBounds.height (offset for pin shape)"
      ],
      "recalculates": "On every pickerX/pickerY change",
      "runs_on": "UI thread"
    },
    "color_computation": {
      "pattern": "Real-time RGBA calculation in useDerivedValue",
      "steps": [
        "1. Calculate dx, dy from picker position to center",
        "2. Compute hue from angle: atan2(dy, dx) converted to degrees",
        "3. Compute saturation from distance: (distance/radius)² * 100",
        "4. Convert HSV(hue, saturation, 100) to RGB",
        "5. Return rgba string with full opacity"
      ],
      "worklet": true,
      "dependencies": ["pickerX", "pickerY"],
      "runs_on": "UI thread"
    },
    "reactive_updates": {
      "pattern": "useAnimatedReaction for side effects",
      "watches": "rgba.value",
      "callback": "scheduleOnRN to invoke onColorUpdate on main thread",
      "purpose": "Bridge between UI thread color calculation and React callback",
      "benefit": "Parent component receives color updates without bridge overhead"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "pickerX",
        "type": "SharedValue<number>",
        "initial": "center.x (canvasSize / 2)",
        "updates": "Pan gesture handlers (onBegin, onUpdate)",
        "purpose": "Tracks horizontal position of color picker",
        "drives": "Hue calculation and picker transform"
      },
      {
        "name": "pickerY",
        "type": "SharedValue<number>",
        "initial": "center.y (canvasSize / 2)",
        "updates": "Pan gesture handlers (onBegin, onUpdate)",
        "purpose": "Tracks vertical position of color picker",
        "drives": "Saturation calculation and picker transform"
      }
    ],
    "derived_values": [
      {
        "name": "pickerTransform",
        "pattern": "useDerivedValue computing transform array",
        "dependencies": ["pickerX", "pickerY", "pickerBounds"],
        "calculation": "translateX and translateY based on picker position and bounds",
        "purpose": "Real-time transform for picker position",
        "recalculates": "On every position change",
        "benefit": "Smooth 60fps picker movement on UI thread"
      },
      {
        "name": "rgba",
        "pattern": "useDerivedValue with complex color calculation",
        "dependencies": ["pickerX", "pickerY", "center", "maxColorPickerSize"],
        "calculation": "Multi-step: dx/dy → hue/saturation → HSV → RGB → rgba string",
        "worklet_functions": [
          "getHueFromPosition",
          "getSaturationFromPosition",
          "hsvToRgb"
        ],
        "output": "rgba(r, g, b, 1) string",
        "purpose": "Real-time color value based on picker position",
        "critical": "Heart of the implementation (lines 98-129)"
      }
    ],
    "useAnimatedReaction": {
      "watches": "rgba.value",
      "effect": "Schedules onColorUpdate callback on React Native thread",
      "pattern": "Bridge UI thread calculation to main thread callback",
      "utility": "scheduleOnRN",
      "runs_on": "UI thread (reaction), main thread (callback)",
      "benefit": "Efficient color updates without blocking UI"
    },
    "worklet_optimization": {
      "all_utils_worklets": true,
      "functions": [
        "onMove (gesture handler)",
        "clampToCircle",
        "getHueFromPosition",
        "getSaturationFromPosition",
        "hsvToRgb"
      ],
      "benefit": "All color calculations run on UI thread for 60fps performance"
    }
  },

  "shader_programming": {
    "radial_gradient_shader": {
      "language": "GLSL (OpenGL Shading Language)",
      "runtime": "Skia RuntimeEffect",
      "uniforms": {
        "size": "Canvas size for coordinate normalization"
      },
      "constants": {
        "PI": "3.1415926535897932384626433832795",
        "TAU": "2.0 * PI",
        "center": "vec2(0.5, 0.5)",
        "radius": "0.5"
      },
      "functions": [
        {
          "name": "quadraticIn",
          "purpose": "Easing function for smooth saturation transitions",
          "formula": "t * t",
          "effect": "Non-linear saturation distribution (more saturated at edges)"
        },
        {
          "name": "hsv2rgb",
          "purpose": "Convert HSV color space to RGB in shader",
          "algorithm": "Fractional hue with clamped RGB mixing",
          "output": "vec3 RGB values"
        },
        {
          "name": "main",
          "type": "Fragment shader entry point",
          "input": "vec2 pos (pixel position)",
          "output": "vec4 RGBA color",
          "steps": [
            "1. Normalize pixel coordinates (0-1 range)",
            "2. Calculate distance from center",
            "3. Render transparent if outside radius",
            "4. Calculate hue from atan2(y, x) angle",
            "5. Calculate saturation from distance (quadratic easing)",
            "6. Convert HSV to RGB",
            "7. Return RGBA with full opacity"
          ]
        }
      ],
      "color_distribution": {
        "hue": "360° sweep around circle (atan2 angle)",
        "saturation": "Quadratic increase from center to edge (0% to 100%)",
        "value": "Constant 100% brightness",
        "formula": "saturation = quadraticIn(distance * 2) = (distance * 2)²"
      },
      "visual_effect": "Radial color wheel with full spectrum hues and increasing saturation towards edges",
      "performance": "GPU-accelerated, renders every frame at 60fps"
    },
    "blur_layer": {
      "technique": "SweepGradient with BlurMask",
      "colors": "['cyan', 'magenta', 'yellow', 'cyan']",
      "blur_amount": "Configurable via blur prop (default: 20)",
      "style": "solid",
      "purpose": "Soft halo effect behind sharp color wheel",
      "conditional": "Only rendered if blur prop provided"
    }
  },

  "mathematical_algorithms": {
    "cartesian_to_polar": {
      "purpose": "Convert (x, y) position to hue angle",
      "function": "getHueFromPosition",
      "formula": "hue = (180 + (atan2(dy, dx) * 180 / PI) + 360) % 360",
      "input": "dx (horizontal offset), dy (vertical offset)",
      "output": "Hue value in degrees (0-360)",
      "normalization": "Ensures hue always in [0, 360) range"
    },
    "distance_to_saturation": {
      "purpose": "Convert distance from center to saturation percentage",
      "function": "getSaturationFromPosition",
      "formula": "saturation = (distance / radius)² * 100",
      "distance_calc": "√(dx² + dy²)",
      "output": "Saturation percentage (0-100)",
      "easing": "Quadratic (distance²) for non-linear distribution",
      "effect": "More dramatic saturation increase near edges"
    },
    "circular_clamping": {
      "purpose": "Constrain point within circular boundary",
      "function": "clampToCircle",
      "algorithm": [
        "1. Calculate distanceSquared = dx² + dy²",
        "2. If distanceSquared > radiusSquared:",
        "   a. Calculate angle = atan2(dy, dx)",
        "   b. Project onto circle: x = centerX + radius * cos(angle)",
        "   c. Project onto circle: y = centerY + radius * sin(angle)",
        "3. Else: keep original position"
      ],
      "optimization": "Uses squared distance comparison to avoid sqrt until necessary",
      "benefit": "Smooth boundary constraint without sudden jumps"
    },
    "hsv_to_rgb_conversion": {
      "function": "hsvToRgb",
      "input": "Hue (0-360°), Saturation (0-100%), Value (0-100%)",
      "output": "[r, g, b] tuple with values 0-255",
      "algorithm": "Sector-based conversion with 6 hue regions",
      "special_case": "If saturation = 0, return grayscale (r = g = b = v)",
      "sectors": [
        "0: Red → Yellow (r=v, g=t, b=p)",
        "1: Yellow → Green (r=q, g=v, b=p)",
        "2: Green → Cyan (r=p, g=v, b=t)",
        "3: Cyan → Blue (r=p, g=q, b=v)",
        "4: Blue → Magenta (r=t, g=p, b=v)",
        "5: Magenta → Red (r=v, g=p, b=q)"
      ],
      "variables": {
        "p": "v * (1 - s) - darkest component",
        "q": "v * (1 - s * fractional) - decreasing component",
        "t": "v * (1 - s * (1 - fractional)) - increasing component"
      },
      "credit": "ChatGPT implementation (per source comment)"
    }
  },

  "component_architecture": {
    "ColorPicker": {
      "type": "Functional component with props",
      "props": {
        "canvasSize": "number (required) - Square canvas dimensions",
        "blur": "number (optional) - Blur mask intensity",
        "pickerShape": "SkPath (optional) - Custom picker shape from SVG",
        "onColorUpdate": "(color: string) => void (optional) - Color change callback"
      },
      "default_shape": "Pin drop SVG path (location marker style)",
      "rendering": "Skia Canvas with nested Groups",
      "gesture_detection": "GestureDetector with Pan gesture",
      "coordinate_system": "Cartesian with origin at canvas center"
    },
    "canvas_layers": {
      "layer_1_optional_blur": {
        "condition": "if blur prop provided",
        "components": ["Circle with SweepGradient", "BlurMask"],
        "purpose": "Soft background glow effect"
      },
      "layer_2_color_wheel": {
        "component": "Circle with custom Shader",
        "shader": "radialGradientShader",
        "purpose": "Main color selection surface"
      },
      "layer_3_picker": {
        "component": "Group with two Path elements",
        "transform": "Dynamic based on picker position",
        "elements": [
          "White stroke path with shadow (outline)",
          "Filled path with dynamic color (preview)"
        ]
      }
    },
    "transform_hierarchy": {
      "root_group": "Scales and positions color wheel with padding for picker bounds",
      "picker_group": "Translates picker to follow gesture position",
      "transforms": [
        "Root: translateX/Y (picker padding), scale (fit to canvas)",
        "Picker: translateX/Y (follow position), offset for pin shape"
      ]
    }
  },

  "performance_optimizations": {
    "gpu_rendering": {
      "technique": "Skia canvas with GPU-accelerated shaders",
      "benefit": "60fps color wheel rendering on GPU",
      "shader_compilation": "One-time at component mount"
    },
    "ui_thread_calculations": {
      "pattern": "All worklet functions run on UI thread",
      "functions": [
        "onMove",
        "clampToCircle",
        "getHueFromPosition",
        "getSaturationFromPosition",
        "hsvToRgb"
      ],
      "benefit": "No bridge crossing for gesture handling or color calculations",
      "result": "Instant response to user input"
    },
    "derived_values": {
      "usage": "pickerTransform and rgba are derived, not stored",
      "benefit": "Automatic dependency tracking, minimal memory usage",
      "recalculation": "Only when dependencies change"
    },
    "callback_optimization": {
      "pattern": "scheduleOnRN for main thread callbacks",
      "benefit": "Doesn't block UI thread with bridge communication",
      "async": true
    },
    "squared_distance": {
      "location": "clampToCircle function",
      "technique": "Compare squared distances to avoid sqrt",
      "benefit": "Faster boundary checking (sqrt only when clamping needed)"
    },
    "single_shader_instance": {
      "pattern": "Shader created once at module level",
      "benefit": "No per-render shader compilation",
      "efficiency": "Minimal memory footprint"
    }
  },

  "gesture_handling": {
    "pan_gesture": {
      "type": "Gesture.Pan()",
      "handlers": {
        "onBegin": "Set initial picker position with clamping",
        "onUpdate": "Continuously update position during drag"
      },
      "coordinates": "Canvas-relative (x, y)",
      "clamping": "Applied on every position update",
      "worklet": true
    },
    "position_updates": {
      "function": "onMove",
      "input": "Point { x, y }",
      "process": [
        "1. Call clampToCircle with point, center, radius",
        "2. Update pickerX.value with clamped x",
        "3. Update pickerY.value with clamped y"
      ],
      "effect": "Smooth dragging constrained to circular boundary",
      "thread": "UI thread (worklet)"
    },
    "no_tap_gesture": {
      "limitation": "Only pan/drag supported, no tap-to-select",
      "improvement": "Could add onBegin to support tap selection"
    }
  },

  "visual_design": {
    "picker_shape": {
      "default": "Location pin / map marker shape",
      "svg_path": "M22 .889C9.943.889.167 10.664.167 22.723C.167 37.127 22 59.111 22 59.111S43.833 37.43 43.833 22.723C43.833 10.664 34.057.889 22 .889z",
      "appearance": "Teardrop/pin with circular top and pointed bottom",
      "customizable": true,
      "outline": "White stroke (5px) with shadow",
      "fill": "Dynamic color based on position"
    },
    "color_wheel": {
      "type": "Circular radial gradient",
      "center": "White (desaturated)",
      "edge": "Full spectrum hues at 100% saturation",
      "hue_distribution": "360° sweep (red → yellow → green → cyan → blue → magenta → red)",
      "saturation_distribution": "Quadratic from center (0%) to edge (100%)"
    },
    "shadow_effects": {
      "picker_outline": {
        "dx": 0,
        "dy": 0,
        "blur": 20,
        "color": "rgba(0,0,0,1)",
        "purpose": "Depth and separation from background"
      }
    },
    "optional_blur": {
      "type": "BlurMask with SweepGradient",
      "colors": "Cyan → Magenta → Yellow → Cyan",
      "blur_radius": "Configurable (default: 20)",
      "style": "solid",
      "effect": "Soft glow behind sharp color wheel"
    },
    "container": {
      "flex": 1,
      "backgroundColor": "black",
      "alignment": "center",
      "justification": "center"
    }
  },

  "use_cases": {
    "primary": [
      "Color selection interfaces",
      "Digital painting/drawing apps",
      "Design tools (UI/graphic design)",
      "Theme customization",
      "RGB/HSV color education",
      "Brand color pickers",
      "Accessibility contrast checkers"
    ],
    "real_world_examples": [
      "Procreate color picker",
      "Photoshop HSV color wheel",
      "Figma color selector",
      "Color palette generators",
      "CSS color picker tools",
      "Theme customization panels"
    ],
    "educational": [
      "Teaching HSV color space",
      "Demonstrating GLSL shaders",
      "Polar coordinate systems",
      "Gesture handling patterns",
      "Skia rendering techniques",
      "Worklet optimization",
      "Color space conversions"
    ]
  },

  "code_quality": {
    "strengths": [
      "Extensive inline documentation explaining algorithms",
      "Clear mathematical formulas in comments",
      "Proper TypeScript typing throughout",
      "Worklet directives on all UI thread functions",
      "Modular utility functions in separate files",
      "Well-structured component architecture",
      "Detailed shader comments explaining GLSL code",
      "Credit attribution (ChatGPT for HSV conversion)",
      "Clean separation of concerns (utils, types, shader)",
      "Excellent educational value with step-by-step explanations"
    ],
    "areas_for_improvement": [
      "No PropTypes or runtime validation",
      "Limited error handling for invalid inputs",
      "No accessibility features (screen reader, keyboard)",
      "Console.log in demo (should use proper callback)",
      "Hard-coded blur value in demo",
      "No unit tests for color conversion functions",
      "Missing JSDoc comments for exported functions",
      "Could extract magic numbers to named constants"
    ],
    "typescript": {
      "coverage": "Full TypeScript with proper types",
      "type_definitions": [
        "ColorPickerProps",
        "Point",
        "CircleParams (in clampToCircle)"
      ],
      "imports": "Type-only imports where appropriate",
      "generics": "FC<ColorPickerProps>"
    },
    "documentation": {
      "inline_comments": "Exceptional - nearly every line explained",
      "educational_comments": [
        "Lines 97-129: Detailed explanation of RGBA computation (called 'the ❤️')",
        "Lines 8-9: useWindowDimensions usage explained",
        "Lines 15-19: ColorPicker props documented inline",
        "Shader comments: Every constant and function explained"
      ],
      "code_readability": "Highly readable with descriptive names and comments"
    }
  },

  "known_limitations": {
    "brightness_control": {
      "issue": "Value (brightness) fixed at 100%",
      "impact": "Cannot select darker shades or black",
      "improvement": "Add secondary slider for value/brightness control"
    },
    "no_alpha_channel": {
      "issue": "Opacity always 1.0 (fully opaque)",
      "improvement": "Add alpha slider for transparency selection"
    },
    "tap_selection": {
      "issue": "Requires drag gesture, tap doesn't work",
      "workaround": "onBegin does set position, so quick tap works",
      "improvement": "Add explicit tap gesture support"
    },
    "no_hex_input": {
      "issue": "No text input for hex color codes",
      "improvement": "Add hex/RGB input fields for precise color entry"
    },
    "preset_colors": {
      "issue": "No preset color swatches",
      "improvement": "Add palette of common/recently used colors"
    },
    "color_history": {
      "issue": "No undo/redo or color history",
      "improvement": "Track color selection history"
    },
    "no_eyedropper": {
      "issue": "Cannot sample colors from screen/images",
      "improvement": "Add eyedropper tool integration"
    }
  },

  "potential_improvements": {
    "features": [
      "Brightness/Value slider for full HSV control",
      "Alpha/opacity slider for transparency",
      "Hex color code input/display",
      "RGB value inputs (0-255)",
      "HSV value displays",
      "Color history/recent colors",
      "Preset color palettes",
      "Eyedropper tool",
      "Copy to clipboard functionality",
      "Multiple picker shapes (circle, square, crosshair)",
      "Color name lookup (CSS color names)",
      "Complementary color suggestions",
      "Color blindness simulation modes"
    ],
    "ux_enhancements": [
      "Haptic feedback on color selection",
      "Animated transitions when changing modes",
      "Double-tap to favorite a color",
      "Swipe gestures for palette switching",
      "Pinch to zoom for precision selection",
      "Visual feedback on touch",
      "Toast message showing color values"
    ],
    "performance": [
      "Memoize shader compilation",
      "Throttle onColorUpdate callbacks",
      "Optimize color conversion calculations",
      "Cache computed transforms"
    ],
    "accessibility": [
      "Screen reader announcements for color values",
      "Keyboard navigation support",
      "High contrast mode",
      "Voice input for color values",
      "Alternative color selection methods",
      "Describe colors in words (light blue, dark red, etc.)"
    ],
    "customization": [
      "Configurable color wheel size",
      "Custom picker shapes via prop",
      "Theming support",
      "Custom gradient colors",
      "Adjustable saturation curve (linear vs quadratic)",
      "Border and shadow customization"
    ]
  },

  "key_insights": {
    "shader_power": "Custom GLSL shaders enable pixel-perfect color wheels rendered entirely on GPU",
    "worklet_efficiency": "All color calculations on UI thread via worklets eliminates bridge bottleneck",
    "polar_coordinates": "Cartesian to polar conversion maps screen position to hue/saturation naturally",
    "quadratic_saturation": "Quadratic easing (distance²) creates more visually pleasing saturation distribution",
    "circular_clamping": "Squared distance comparison avoids expensive sqrt until clamping is needed",
    "hsv_natural": "HSV color space maps perfectly to circular picker (angle=hue, distance=saturation)",
    "scheduleOnRN": "Essential bridge between UI thread worklets and React callbacks",
    "derived_values": "useDerivedValue enables complex transformations without manual dependency tracking",
    "skia_performance": "Skia canvas rendering achieves 60fps for complex gradients on mobile",
    "svg_path_flexibility": "Any SVG path can become picker shape (pins, circles, crosshairs, etc.)"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Understanding HSV color space",
      "Basic pan gesture handling",
      "Shared values and derived values",
      "Canvas rendering with Skia",
      "Worklet basics ('worklet' directive)"
    ],
    "for_intermediate": [
      "GLSL shader programming",
      "Cartesian to polar coordinate conversion",
      "Color space conversions (HSV to RGB)",
      "Gesture clamping and constraints",
      "useAnimatedReaction for side effects",
      "scheduleOnRN threading model",
      "SVG path manipulation in Skia"
    ],
    "for_advanced": [
      "Custom Skia shader development",
      "GPU-accelerated rendering optimization",
      "Complex mathematical algorithms in worklets",
      "Performance optimization techniques",
      "Threading considerations (UI vs main thread)",
      "Advanced Skia rendering techniques",
      "Shader uniform passing and management",
      "Efficient color space algorithms"
    ]
  },

  "comparison_to_alternatives": {
    "vs_native_color_picker": {
      "this_approach": "Custom Skia-based implementation",
      "alternative": "Platform native color picker",
      "pros": "Full customization, consistent cross-platform, educational value",
      "cons": "More code to maintain, larger bundle size"
    },
    "vs_web_color_input": {
      "this_approach": "Interactive circular color wheel",
      "alternative": "HTML5 <input type=\"color\">",
      "pros": "Better UX, visual feedback, touch-optimized",
      "cons": "React Native only, more complex implementation"
    },
    "vs_slider_based": {
      "this_approach": "2D circular picker",
      "alternative": "Separate RGB/HSV sliders",
      "pros": "Intuitive color exploration, faster selection",
      "cons": "No brightness control (fixed at 100%)"
    },
    "vs_preset_palette": {
      "this_approach": "Free-form color selection",
      "alternative": "Limited preset color swatches",
      "pros": "Unlimited colors, creative freedom",
      "cons": "Harder to select specific brand colors precisely"
    }
  },

  "technical_deep_dives": {
    "why_quadratic_saturation": {
      "formula": "(distance / radius)² * 100",
      "reasoning": "Linear saturation (distance/radius) makes edges look washed out",
      "effect": "Quadratic keeps center desaturated longer, more vibrant edges",
      "visual_impact": "Better color distribution matching human perception"
    },
    "atan2_for_hue": {
      "function": "Math.atan2(dy, dx)",
      "output": "Angle in radians (-π to π)",
      "conversion": "(180 + (theta * 180 / π) + 360) % 360",
      "result": "Hue in degrees (0-360)",
      "advantage": "Handles all quadrants correctly, no division by zero"
    },
    "why_hsv_not_rgb": {
      "rgb_challenge": "Mapping 2D position to 3D RGB space is unintuitive",
      "hsv_solution": "Angle = Hue, Distance = Saturation (natural 2D mapping)",
      "benefit": "Circular picker perfectly matches HSV color model"
    },
    "shader_vs_js": {
      "js_approach": "Calculate each pixel color in JavaScript",
      "shader_approach": "GPU calculates all pixels in parallel",
      "performance_diff": "Shader is 100-1000x faster for this use case",
      "scalability": "Shader performance independent of canvas size (up to point)"
    }
  },

  "platform_considerations": {
    "ios": {
      "features": "All features fully supported",
      "performance": "Excellent with Metal backend for Skia",
      "gestures": "Native pan gesture feel"
    },
    "android": {
      "features": "All features fully supported",
      "performance": "Excellent with Vulkan/OpenGL backend",
      "gestures": "Native pan gesture feel",
      "note": "Ensure react-native-skia configured properly"
    },
    "web": {
      "compatibility": "Skia may use CanvasKit backend",
      "performance": "Good but not as optimized as native",
      "considerations": "Test shader compilation, may need WebGL fallbacks"
    }
  },

  "testing_considerations": {
    "visual_tests": [
      "Verify color wheel renders correctly",
      "Check picker shape displays properly",
      "Confirm blur effect (if enabled)",
      "Test on various screen sizes",
      "Verify colors match expected HSV values"
    ],
    "interaction_tests": [
      "Pan gesture moves picker smoothly",
      "Picker stays within circle boundary",
      "Colors update in real-time",
      "Callback receives correct color values",
      "Quick tap sets color at touch point"
    ],
    "unit_tests": [
      "hsvToRgb: Test all 6 color sectors",
      "getHueFromPosition: Test all quadrants (0°, 90°, 180°, 270°)",
      "getSaturationFromPosition: Test center (0%), edge (100%)",
      "clampToCircle: Test inside (unchanged), outside (clamped)"
    ],
    "edge_cases": [
      "Very small canvas sizes",
      "Very large canvas sizes",
      "Rapid gestures",
      "Custom picker shapes with unusual bounds",
      "Zero blur value",
      "No onColorUpdate callback"
    ],
    "color_accuracy": [
      "Red hue (0°/360°) at 3 o'clock position",
      "Green hue (120°) at expected angle",
      "Blue hue (240°) at expected angle",
      "Center color is white (0% saturation)",
      "Edge colors are fully saturated"
    ]
  },

  "bundle_size_impact": {
    "code_size": "~400 lines total including shader",
    "shader_size": "~1.5KB (GLSL shader string)",
    "dependencies": "All dependencies common in RN/Skia projects",
    "runtime_memory": "Minimal - 2 SharedValues, shader compiled once",
    "estimated_impact": "~15KB minified (code only, excluding deps)"
  },

  "accessibility_considerations": {
    "current_state": {
      "screen_readers": "No support",
      "keyboard_navigation": "Not supported",
      "labels": "No accessibility labels",
      "announcements": "No color value announcements"
    },
    "recommendations": [
      "Add accessibilityRole='adjustable' to color picker",
      "Announce current color value on selection",
      "Support keyboard arrow keys for fine-tuning",
      "Add accessibilityValue with color description",
      "Provide alternative input methods (sliders, text input)",
      "Describe colors in accessible terms (light blue, dark red)",
      "Add haptic feedback for color changes",
      "Support voice input for color values"
    ]
  },

  "related_patterns": {
    "similar_components": [
      "Brightness/value slider",
      "RGB/HSV slider sets",
      "Hex color input",
      "Color palette pickers",
      "Gradient editors"
    ],
    "gesture_patterns": [
      "Constrained dragging",
      "Circular boundary clamping",
      "2D position to value mapping",
      "Real-time gesture tracking"
    ],
    "shader_patterns": [
      "Gradient shaders",
      "Radial effects",
      "Distance-based coloring",
      "Polar coordinate effects"
    ]
  },

  "inspirations_and_references": {
    "color_theory": [
      "HSV color space (1978, Alvy Ray Smith)",
      "Color wheels in traditional art",
      "Digital color picker UX patterns"
    ],
    "technical_references": [
      "GLSL shader programming",
      "Skia graphics library documentation",
      "React Native Reanimated worklets",
      "Color space conversion algorithms"
    ],
    "acknowledgments": [
      "ChatGPT for HSV to RGB conversion algorithm (per source comment)"
    ]
  },

  "tags": [
    "color-picker",
    "skia",
    "shader",
    "glsl",
    "hsv",
    "rgb",
    "color-conversion",
    "gesture-handler",
    "pan-gesture",
    "reanimated",
    "worklets",
    "circular-picker",
    "radial-gradient",
    "gpu-rendering",
    "canvas",
    "color-wheel",
    "interactive",
    "real-time",
    "ui-thread",
    "scheduleOnRN"
  ]
}
