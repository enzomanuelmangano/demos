{
  "animation_name": "iOS Home Bouncy",
  "animation_slug": "ios-home-bouncy",
  "description": "A sophisticated recreation of iOS home screen's bouncy app icon animation with interactive spring customization. Features a radial scale animation that emanates from the screen center, with icons scaling up dramatically then settling back. Includes a pull-to-dismiss modal with real-time spring parameter controls (mass, damping, stiffness) for both opening and closing animations. Uses complex transform matrices with center-based scaling for authentic iOS-style physics.",

  "main_features": [
    "iOS-inspired radial bouncy animation for app grid",
    "Center-based scale transformation with distance interpolation",
    "Three-phase animation sequence (reset → open → close)",
    "Interactive spring customizer modal with real-time preview",
    "Separate spring configurations for opening and closing animations",
    "Pull-to-dismiss gesture with blur intensity animation",
    "Custom sliders for mass, damping, and stiffness parameters",
    "Tab switching with smooth keyframe animations",
    "Grid layout with 4 columns and 28 app items",
    "Dynamic zIndex calculation for row stacking",
    "Long press to open customizer interface",
    "Tap to trigger animation sequence",
    "Transform matrix composition for center-based scaling",
    "Distance-based scale interpolation from screen center",
    "Diagonal distance calculation for normalization"
  ],

  "file_structure": {
    "entries": {
      "index.tsx": "Main application wrapper with modal state management"
    },
    "components": {
      "components/bouncy-item/index.tsx": "BouncyView component with transform-based scale animation"
    },
    "screens": {
      "screens/home/index.tsx": "AppsList component with grid layout and scrolling",
      "screens/home/app-item.tsx": "Individual app icon with rounded square design",
      "screens/spring-customizer/index.tsx": "Main customizer modal with tab switching",
      "screens/spring-customizer/components/modal-content.tsx": "Modal container with pull indicator and safe area",
      "screens/spring-customizer/components/pull-to-dismiss.tsx": "Gesture handler for dismissing modal with blur",
      "screens/spring-customizer/components/spring-slider-container.tsx": "Container for three spring parameter sliders",
      "screens/spring-customizer/components/spring-config-slider.tsx": "Custom slider with drag gesture and real-time value display",
      "screens/spring-customizer/components/tab-selector.tsx": "Animated tab switcher for opening/closing configs"
    },
    "hooks": {},
    "utils": {},
    "assets": {},
    "types": {},
    "constants": {
      "constants.ts": "28 light metallic color definitions for app backgrounds",
      "screens/home/constants.ts": "Grid layout calculations (spacing, columns, item size)",
      "screens/spring-customizer/animations.ts": "Keyframe animations for tab content transitions"
    },
    "animations": {
      "animations/bouncy.ts": "Core animation logic with shared values and spring configs"
    }
  },

  "core_technologies": [
    "react-native-reanimated",
    "react-native-gesture-handler",
    "react-native-worklets",
    "react-native-safe-area-context",
    "expo-blur",
    "react-native-redash"
  ],

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle",
        "useAnimatedRef",
        "useDerivedValue",
        "useAnimatedReaction",
        "useAnimatedProps"
      ],
      "functions": [
        "makeMutable",
        "withSpring",
        "withSequence",
        "withDelay",
        "cancelAnimation",
        "measure",
        "interpolate",
        "clamp"
      ],
      "components": [
        "Animated.View",
        "LayoutAnimationConfig"
      ],
      "classes": [
        "Keyframe",
        "Easing"
      ],
      "types": [
        "SharedValue",
        "MeasuredDimensions",
        "Extrapolation"
      ],
      "critical_feature": "makeMutable for creating shared values outside React context, complex transform matrices for center-based scaling",
      "usage": "All animation logic, gesture-driven interactions, and dynamic spring parameter updates"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": [
        "GestureDetector"
      ],
      "functions": [
        "Gesture.Pan()"
      ],
      "usage": "Pan gestures for slider dragging and pull-to-dismiss modal interaction",
      "critical_feature": "onBegin, onUpdate, onEnd callbacks for granular gesture control"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "functions": [
        "scheduleOnUI",
        "scheduleOnRN"
      ],
      "usage": "Thread bridging for layout measurements and callback scheduling",
      "critical_feature": "scheduleOnUI for measuring component dimensions on UI thread"
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "components": [
        "SafeAreaProvider"
      ],
      "hooks": [
        "useSafeAreaInsets"
      ],
      "usage": "Safe area handling for modal and grid layout padding",
      "critical_feature": "Ensures proper spacing on devices with notches and rounded corners"
    },
    "expo-blur": {
      "version": "~15.0.7",
      "components": [
        "BlurView"
      ],
      "usage": "Animated blur effect for modal backdrop",
      "critical_feature": "Animated intensity prop for dynamic blur during pull gesture"
    },
    "react-native-redash": {
      "version": "^18.1.4",
      "components": [
        "ReText"
      ],
      "usage": "Real-time text updates for slider values without re-renders",
      "critical_feature": "UI thread text rendering for smooth value display"
    }
  },

  "animation_techniques": [
    {
      "name": "Center-based scale transformation",
      "description": "Complex transform matrix that scales elements from screen center regardless of their position",
      "implementation": "Five-step transform: translate to center, scale, translate back",
      "formula": {
        "step_1": "translateX: windowWidth/2 - elementCenterX",
        "step_2": "translateY: windowHeight/2 - elementCenterY",
        "step_3": "scale: interpolated based on distance and progress",
        "step_4": "translateX: -translateX (reverse translation)",
        "step_5": "translateY: -translateY (reverse translation)"
      },
      "key_insight": "Transform composition allows scaling from arbitrary origin point"
    },
    {
      "name": "Distance-based scale interpolation",
      "description": "Scale varies based on element's distance from screen center",
      "implementation": "Euclidean distance calculation with diagonal normalization",
      "formula": {
        "distance": "sqrt(translateX² + translateY²)",
        "mainDiagonal": "sqrt(windowWidth² + windowHeight²)",
        "secondExpectedScale": "interpolate(distance, [0, mainDiagonal/2], [1, 0])"
      },
      "parameters": {
        "center_scale": 1,
        "edge_scale": 0
      },
      "purpose": "Creates radial animation pattern from center outward"
    },
    {
      "name": "Three-phase spring sequence",
      "description": "Coordinated animation through reset, opening, and closing phases",
      "implementation": "withSequence combining springs with delay",
      "phases": {
        "phase_0_reset": {
          "progress_value": 0,
          "spring_config": {
            "mass": 80,
            "damping": 120,
            "stiffness": 240
          },
          "purpose": "Quick reset to initial state"
        },
        "phase_1_opening": {
          "progress_value": 1,
          "spring_config": "OpeningSpringConfigShared (customizable)",
          "default": {
            "mass": 20,
            "damping": 80,
            "stiffness": 180
          },
          "delay_before": 800,
          "energyThreshold": 10,
          "purpose": "Dramatic scale-up with heavy spring feel"
        },
        "phase_2_closing": {
          "progress_value": 2,
          "spring_config": "ClosingSpringConfigShared (customizable)",
          "default": {
            "mass": 1.4,
            "damping": 18,
            "stiffness": 100,
            "restDisplacementThreshold": 0.001,
            "restSpeedThreshold": 2
          },
          "purpose": "Bouncy settle back to normal with low damping"
        }
      },
      "scale_mapping": "interpolate(progress, [0, 1, 2], [12, secondExpectedScale, 1])"
    },
    {
      "name": "Pull-to-dismiss gesture",
      "description": "Vertical pan gesture with threshold-based dismissal",
      "implementation": "Pan gesture tracking translateY with velocity consideration",
      "parameters": {
        "trigger_distance": 80,
        "trigger_velocity": 800,
        "animation_trigger_distance": 120,
        "max_progress_distance": 150
      },
      "interactions": [
        "Triggers main animation when pulled > 120px",
        "Dismisses modal if pulled > 80px or velocity > 800",
        "Springs back if threshold not met"
      ]
    },
    {
      "name": "Blur intensity animation",
      "description": "Animated blur backdrop synchronized with pull gesture",
      "implementation": "useAnimatedProps with interpolated intensity",
      "parameters": {
        "max_intensity": 70,
        "min_intensity": 0,
        "input_range": "[0, 150]"
      }
    },
    {
      "name": "Keyframe tab transitions",
      "description": "Opacity and translateX animations for tab content switching",
      "implementation": "Reanimated Keyframe with custom easing",
      "easing": "Bezier(0.25, 0.46, 0.45, 0.94)",
      "duration": 500,
      "patterns": {
        "opening_entering": "Fade in from left (-20px)",
        "opening_exiting": "Fade out to right (+20px)",
        "closing_entering": "Fade in from right (+20px)",
        "closing_exiting": "Fade out to left (-20px)"
      }
    },
    {
      "name": "Slider drag interaction",
      "description": "Pan gesture with clamped translation and stepped values",
      "implementation": "Track start position, clamp translation, convert to value with stepping",
      "parameters": {
        "slider_width": 280,
        "thumb_size": 24,
        "effective_range": 256
      },
      "formula": {
        "progress": "newX / (SLIDER_WIDTH - THUMB_SIZE)",
        "newValue": "minimumValue + progress * (maximumValue - minimumValue)",
        "steppedValue": "round(newValue / step) * step"
      }
    },
    {
      "name": "Tab indicator animation",
      "description": "Smooth spring-based indicator following selected tab",
      "implementation": "useDerivedValue with withSpring on selected index",
      "spring_config": {
        "mass": 0.8,
        "damping": 20,
        "stiffness": 200
      },
      "purpose": "Visual feedback for tab selection"
    }
  ],

  "reanimated_patterns": [
    {
      "type": "makeMutable",
      "name": "BouncyProgressShared",
      "initial_value": 0,
      "scope": "Global animation state",
      "purpose": "Shared progress value for all bouncy items (0 = closed, 1 = opening, 2 = open)",
      "access_pattern": "Read in multiple BouncyView components",
      "note": "Using makeMutable outside React context - convenient but potentially deprecated"
    },
    {
      "type": "makeMutable",
      "name": "OpeningSpringConfigShared",
      "initial_value": {
        "mass": 20,
        "damping": 80,
        "stiffness": 180
      },
      "scope": "Global spring configuration",
      "purpose": "Customizable opening animation parameters",
      "mutable": true,
      "updated_by": "SpringSliderContainer via useAnimatedReaction"
    },
    {
      "type": "makeMutable",
      "name": "ClosingSpringConfigShared",
      "initial_value": {
        "mass": 1.4,
        "damping": 18,
        "stiffness": 100,
        "restDisplacementThreshold": 0.001,
        "restSpeedThreshold": 2
      },
      "scope": "Global spring configuration",
      "purpose": "Customizable closing animation parameters with extra bounce",
      "mutable": true
    },
    {
      "type": "useSharedValue",
      "name": "dimensions",
      "scope": "BouncyView component",
      "initial_value": "null",
      "type": "MeasuredDimensions | null",
      "purpose": "Store measured element position and size for transform calculations",
      "updated_via": "measure(aRef) on UI thread"
    },
    {
      "type": "useAnimatedStyle",
      "name": "rStyle",
      "scope": "BouncyView component",
      "calculation": "Five-step transform matrix for center-based scaling",
      "dependencies": ["dimensions", "BouncyProgressShared"],
      "purpose": "Apply animated scale transformation to each app icon",
      "complexity": "High - complex multi-step transform with distance calculation"
    },
    {
      "type": "useLayoutEffect + scheduleOnUI",
      "scope": "BouncyView component",
      "purpose": "Measure element dimensions after layout on UI thread",
      "pattern": "scheduleOnUI(() => { dimensions.value = measure(aRef) })",
      "critical": "Must run on UI thread for synchronous measurement"
    },
    {
      "type": "useDerivedValue",
      "name": "translateX (slider)",
      "scope": "SpringConfigSlider component",
      "calculation": "Convert value to slider position: ((value - min) / (max - min)) * (width - thumbSize)",
      "dependencies": ["valueSharedValue", "minimumValue", "maximumValue"],
      "purpose": "Calculate thumb position from current value"
    },
    {
      "type": "useDerivedValue",
      "name": "displayText",
      "scope": "SpringConfigSlider component",
      "calculation": "valueSharedValue.value.toFixed(1)",
      "purpose": "Format value for ReText display"
    },
    {
      "type": "useAnimatedReaction",
      "scope": "SpringSliderContainer component",
      "watches": "{ mass: mass.value, damping: damping.value, stiffness: stiffness.value }",
      "action": "mutableConfig.set(config)",
      "purpose": "Propagate slider changes to global spring configuration",
      "critical_feature": "Real-time spring parameter updates while animation runs"
    },
    {
      "type": "useAnimatedProps",
      "name": "animatedBlur",
      "scope": "PullToDismissGesture component",
      "calculation": "interpolate(translateY, [0, 150], [70, 0])",
      "purpose": "Animate blur intensity based on pull distance",
      "applies_to": "AnimatedBlurView"
    },
    {
      "type": "useAnimatedStyle",
      "name": "containerStyle (modal)",
      "scope": "PullToDismissGesture component",
      "calculation": "Opacity fade and translateY based on pull distance",
      "dependencies": ["translateY"],
      "purpose": "Fade and translate modal during pull gesture"
    },
    {
      "type": "useDerivedValue",
      "name": "indicatorPosition",
      "scope": "TabSelector component",
      "calculation": "withSpring(selectedIndex, { mass: 0.8, damping: 20, stiffness: 200 })",
      "dependencies": ["selectedIndex"],
      "purpose": "Smooth spring animation for tab indicator"
    },
    {
      "type": "worklet function",
      "name": "startAnimation",
      "directive": "'worklet'",
      "signature": "() => void",
      "purpose": "Cancel current animation and start new sequence",
      "implementation": "cancelAnimation + withSequence with springs and delays",
      "callable_from": "JS or UI thread"
    },
    {
      "type": "useMemo",
      "name": "itemRows",
      "scope": "AppsList component",
      "calculation": "Group items into rows of NUM_COLUMNS (4)",
      "dependencies": ["items"],
      "benefit": "Avoid recalculating row grouping on every render"
    },
    {
      "type": "IIFE constant",
      "name": "LayoutConfig",
      "scope": "screens/home/constants.ts",
      "calculation": "Calculate itemSize and spacing based on window width",
      "purpose": "Responsive grid layout calculations",
      "computed_once": true
    }
  ],

  "performance_optimizations": [
    "All animations run on UI thread via Reanimated worklets",
    "useLayoutEffect + scheduleOnUI for synchronous dimension measurement",
    "useMemo for row grouping prevents recalculation on re-renders",
    "IIFE for LayoutConfig calculates responsive dimensions once at module load",
    "ReText component avoids JS thread bridge for slider value updates",
    "useAnimatedProps for blur intensity prevents JS bridge crossing",
    "Dynamic zIndex calculation for row stacking without re-layout",
    "makeMutable allows shared values without React context overhead",
    "cancelAnimation prevents animation overlap and resource waste",
    "useDerivedValue for computed values runs on UI thread",
    "Transform matrix composition avoids multiple render passes",
    "scheduleOnRN for minimal JS thread work (only for callbacks)",
    "Gesture handlers with worklet callbacks (no JS thread delay)",
    "Clamped gesture values prevent unnecessary calculations",
    "Step-based slider values reduce update frequency"
  ],

  "use_cases": [
    "iOS home screen animation recreation",
    "App launchers with spring physics",
    "Grid animations with radial effects",
    "Interactive spring physics demonstrations",
    "Educational tools for spring parameter tuning",
    "Onboarding sequences with dramatic reveals",
    "Portfolio showcases with attention-grabbing animations",
    "Design system demonstrations",
    "Animation configuration UIs",
    "Pull-to-dismiss modal patterns",
    "Custom gesture-based interactions",
    "Spring animation experimentation tools",
    "Mobile app icon grids",
    "Launcher replacements",
    "Animation workshops and tutorials"
  ],

  "code_quality": {
    "strengths": [
      "Full TypeScript coverage with explicit interfaces",
      "Comprehensive inline comments explaining complex logic",
      "Well-organized file structure with clear separation of concerns",
      "Custom component extraction (BouncyView, SpringConfigSlider, etc.)",
      "Proper worklet directives on UI thread functions",
      "Educational comments about makeMutable usage and alternatives",
      "Generic TabSelector component with TypeScript generics",
      "Responsive layout calculations with IIFE pattern",
      "Safe area handling for modern devices",
      "Proper gesture lifecycle management (onBegin, onUpdate, onEnd)",
      "Accessibility-friendly component patterns",
      "Platform-specific styling with borderCurve: 'continuous'",
      "Modular spring configuration system",
      "Clean provider pattern with SafeAreaProvider",
      "Proper cleanup with cancelAnimation",
      "Type-safe spring configuration interface"
    ],
    "areas_for_improvement": [
      "Could migrate from makeMutable to Context API with Provider pattern",
      "Missing accessibility labels for modal and interactive elements",
      "No haptic feedback on interactions",
      "Hard-coded color values could be theme constants",
      "Missing keyboard navigation for modal",
      "No reduced motion support for accessibility",
      "Could add error boundaries for gesture failures",
      "Font family 'SF-Pro-Rounded-Bold' hard-coded (needs loading check)",
      "No configuration persistence (spring values reset on reload)",
      "Could add animation presets (bouncy, smooth, stiff, etc.)",
      "Missing screen reader announcements for parameter changes"
    ]
  },

  "known_limitations": [
    "makeMutable usage may become deprecated - author notes Context API as better approach",
    "Requires SF-Pro-Rounded-Bold font - needs expo-font loading or fallback",
    "No configuration persistence - spring values reset between sessions",
    "Fixed grid of 28 items - not dynamic based on data source",
    "No item press interactions (icons are static)",
    "Animation triggers on any screen press - no per-icon control",
    "Pull-to-dismiss only works downward (no upward swipe)",
    "No animation cancellation on rapid repeated taps",
    "Transform calculations assume element stays in initial position",
    "Fixed 4-column grid not responsive to orientation changes",
    "Modal uses React Native Modal (not fully customizable)",
    "No spring visualization or graph for parameter effects",
    "Slider thumb can be dragged beyond track if gesture is fast",
    "No input validation for extreme spring parameter values",
    "Distance calculation doesn't account for scroll position"
  ],

  "potential_improvements": [
    "Migrate to Context API instead of makeMutable for better React patterns",
    "Add haptic feedback on animation trigger and modal interactions",
    "Implement spring animation presets (bouncy, smooth, stiff, playful)",
    "Add configuration persistence with AsyncStorage or MMKV",
    "Create spring visualization graph showing motion curve",
    "Add export/import functionality for spring configurations",
    "Implement per-icon press interactions (app launching simulation)",
    "Add orientation support with responsive column counts",
    "Create animation replay controls (pause, rewind, slow-mo)",
    "Add comparison mode for side-by-side spring configs",
    "Implement gesture recording and playback",
    "Add more animation types (rotation, opacity, color)",
    "Create shareable animation links or QR codes",
    "Add dark mode support",
    "Implement accessibility features (reduced motion, screen reader)",
    "Add keyboard shortcuts for power users",
    "Create tutorial mode explaining spring parameters",
    "Add physics-based simulation visualization",
    "Implement custom icon/image support",
    "Add sound effects synchronized with animations",
    "Create timeline scrubber for animation frames",
    "Add gesture speed influence on animation",
    "Implement multi-finger gestures for advanced controls",
    "Add animation export as video or GIF",
    "Create spring parameter suggestions based on use cases",
    "Add undo/redo for parameter changes",
    "Implement A/B testing mode for comparing animations"
  ],

  "key_insights": [
    "Center-based scaling requires five-step transform matrix: translate to origin, scale, translate back creates natural radial effect",
    "Diagonal distance normalization (mainDiagonal/2) ensures consistent animation regardless of screen aspect ratio",
    "makeMutable enables shared values outside React context but author acknowledges Context API is more maintainable",
    "Three-phase spring sequence (0→1→2) with different configs creates authentic iOS-like weight and bounce",
    "scheduleOnUI for measure() is critical - layout measurements must be synchronous on UI thread",
    "useAnimatedReaction enables real-time spring parameter updates during active animations",
    "Pull gesture threshold at 120px triggers preview animation before actual dismissal at 80px - clever UX pattern",
    "Keyframe animations with 15% initial opacity delay create smoother tab transitions than instant fade",
    "ReText from redash eliminates JS bridge crossing for frequently updating text values",
    "Transform composition order matters: [translateX, translateY, scale, -translateX, -translateY]",
    "Distance-based interpolation creates natural radial pattern where center items scale most dramatically",
    "cancelAnimation before new sequence prevents animation stacking and resource leaks",
    "Blur intensity interpolation synchronized with pull distance creates cohesive dismissal experience",
    "Step-based slider values (0.1 for mass, 1 for damping/stiffness) provide appropriate precision",
    "High initial scale (12) during phase 0→1 creates dramatic 'explosion' effect before settling",
    "zIndex calculation based on distance from center row (itemRows.length/2) creates proper stacking"
  ],

  "learning_opportunities": [
    {
      "level": "beginner",
      "topics": [
        "Basic Reanimated useSharedValue and useAnimatedStyle",
        "ScrollView with grid layout patterns",
        "React Native Modal component usage",
        "useState for local component state",
        "useMemo for performance optimization",
        "Basic gesture handling with GestureDetector",
        "Safe area insets for modern devices",
        "TypeScript interfaces for props"
      ]
    },
    {
      "level": "intermediate",
      "topics": [
        "Complex transform matrices with multiple steps",
        "useLayoutEffect for layout measurements",
        "Euclidean distance calculations for animations",
        "withSequence and withDelay for animation choreography",
        "useAnimatedReaction for reactive updates",
        "useDerivedValue for computed animated values",
        "useAnimatedProps for non-style property animations",
        "Pan gesture lifecycle (onBegin, onUpdate, onEnd)",
        "Interpolation with custom ranges",
        "scheduleOnRN and scheduleOnUI for thread control",
        "ReText for UI thread text rendering",
        "Keyframe animations with custom easing"
      ]
    },
    {
      "level": "advanced",
      "topics": [
        "makeMutable for shared values outside React context",
        "Center-based transform origin manipulation",
        "Multi-phase spring animations with different configs",
        "Real-time spring parameter updates during animations",
        "Complex gesture interactions with thresholds and velocity",
        "Animated blur intensity with useAnimatedProps",
        "Thread-aware animation architecture",
        "Transform matrix composition for custom origins",
        "Distance-based radial animation patterns",
        "Coordinating global animation state across components",
        "Performance optimization with worklet patterns",
        "Generic TypeScript components with type inference",
        "IIFE patterns for responsive calculations",
        "Gesture-triggered animation state management",
        "Building interactive animation configuration tools"
      ]
    }
  ],

  "tags": [
    "ios-animation",
    "spring-physics",
    "radial-animation",
    "center-based-scaling",
    "interactive-config",
    "pull-to-dismiss",
    "gesture-handler",
    "reanimated",
    "transform-matrix",
    "grid-layout",
    "modal-interaction",
    "blur-effect",
    "custom-sliders",
    "spring-customizer",
    "education",
    "makeMutable",
    "worklets",
    "advanced-animation",
    "ios-inspired",
    "bouncy-effect",
    "parameter-tuning",
    "real-time-preview",
    "keyframe-animation",
    "tab-switching",
    "distance-based"
  ]
}
