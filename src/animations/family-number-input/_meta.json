{
  "animation_name": "Family Number Input",
  "animation_slug": "family-number-input",
  "description": "An interactive number input with animated digit display featuring dynamic scaling, comma formatting, and a numeric keypad. Numbers animate with fade-in effects and slide-out transitions while scaling down based on digit count. Features a grid-based button layout with press/long-press gestures for number entry, backspace, and reset functionality.",

  "main_features": [
    "Animated number display with independent digit animations",
    "Dynamic scaling based on total digit count (up to 11 digits)",
    "Automatic comma insertion for thousands separators",
    "Numeric keypad with 0-9 digits and backspace button",
    "Long-press backspace to reset all input",
    "Individual digit entrance animations (fade-in + slide-up)",
    "Layout animations for digit removal (fade-out + slide-down)",
    "Press feedback with scale and opacity on buttons",
    "Gradient overlay for visual depth",
    "Absolute positioning with smooth position interpolation",
    "Custom font support (SF Pro Rounded Bold)"
  ],

  "file_structure": {
    "entries": {
      "index.tsx": "Main export wrapper component with TODO comment about refactoring with Layout Animations"
    },
    "components": {
      "number-input.tsx": "Container component managing input state and UI layout",
      "animated-number/index.tsx": "Orchestrates multiple AnimatedSingleNumber components with comma formatting",
      "animated-number/individual-number.tsx": "Individual digit/comma component with entering/exiting animations",
      "buttons-grid/index.tsx": "Grid of numeric buttons (0-9) and backspace with input logic",
      "buttons-grid/input-button.tsx": "Pressable button with tap/long-press gestures and visual feedback"
    },
    "hooks": {},
    "utils": {
      "get-commas-array.ts": "Utility function to calculate comma positions for number formatting"
    },
    "assets": {},
    "types": {},
    "constants": {}
  },

  "core_technologies": {
    "animations": "react-native-reanimated",
    "gestures": "react-native-gesture-handler",
    "pattern": "SharedValue-based entering animations + Layout animations for exiting",
    "technique": "Absolute positioning with dynamic translateX and scale interpolation"
  },

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "components": ["Animated.View", "Animated.Text"],
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle",
        "useDerivedValue",
        "withTiming"
      ],
      "layout_animations": [
        "LinearTransition",
        "FadeOut",
        "SlideOutDown"
      ],
      "utilities": ["Easing"],
      "critical_feature": "Manual entering animations with SharedValues, automatic exiting with Layout animations"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": ["GestureDetector"],
      "gestures": ["Gesture.Tap()", "Gesture.LongPress()", "Gesture.Simultaneous()"],
      "usage": "Tap for number input, long press for reset"
    },
    "expo-linear-gradient": {
      "version": "~15.0.7",
      "component": "LinearGradient",
      "usage": "Bottom gradient overlay (transparent to black) for visual depth"
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "hooks": ["useSafeAreaInsets"],
      "usage": "Ensures content respects device safe areas (notch, home indicator)"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "component": "FontAwesome5",
      "icon_used": "backspace",
      "usage": "Backspace button icon in numeric keypad"
    },
    "react-native-worklets": {
      "version": "Not directly imported but used via gesture callbacks",
      "function": "scheduleOnRN",
      "usage": "Bridges worklet callbacks to React Native thread for state updates"
    }
  },

  "animation_techniques": {
    "entering_animation": {
      "approach": "Manual control with SharedValues",
      "pattern": "Render with initial values (opacity: 0, bottom: -50), then animate to target (opacity: 1, bottom: 0)",
      "implementation": {
        "step_1": "useSharedValue with initial values (opacity: 0, bottom: -50)",
        "step_2": "useEffect triggers withTiming to animate both values",
        "step_3": "useAnimatedStyle applies values plus position calculations"
      },
      "benefit": "Full control over entrance timing and easing",
      "timing": "Default withTiming duration",
      "reason": "Developer wanted more control than Layout animations provide for entering"
    },
    "exiting_animation": {
      "approach": "Layout animations from Reanimated",
      "implementation": "SlideOutDown.duration(3000).easing(Easing.linear)",
      "outer_wrapper": "FadeOut.duration(100) on outer Animated.View",
      "inner_animation": "SlideOutDown.duration(3000) on inner Animated.View",
      "effect": "Digits fade out quickly then slide down slowly",
      "note": "Developer notes they don't fully understand Layout animations but finds them 'MAGICAL'"
    },
    "position_calculation": {
      "formula": "left = (index - totalNumbersLength / 2) * scaledItemWidth",
      "explanation": "Centers digits by offsetting from middle position",
      "rightSpace": "Additional offset for comma spacing (accumulates based on comma count before digit)",
      "animation": "withTiming(left + rightSpace, { duration: 200 })",
      "effect": "Smooth position transitions when digits are added/removed"
    },
    "dynamic_scaling": {
      "formula": "SCALE = 1 - splittedValue.length * 0.05",
      "example": "1 digit: scale 0.95, 5 digits: scale 0.75, 10 digits: scale 0.50",
      "purpose": "Prevents overflow by scaling down as more digits are added",
      "max_digits": 11,
      "width_offset": "SCALE_WIDTH_OFFSET = 0.08 for width calculation",
      "application": "transform: [{ scale: withTiming(scale) }]"
    },
    "comma_spacing": {
      "base_space": 10,
      "formula": "COMMA_SPACE = 10 * (1 - splittedValue.length * 0.025)",
      "example": "1 digit: 9.75px, 10 digits: 7.5px",
      "purpose": "Proportionally reduce comma spacing as number grows",
      "accumulated": "Each digit gets rightSpace based on comma count before it"
    },
    "button_press_feedback": {
      "gesture": "Gesture.Tap()",
      "onTouchesDown": "progress.value = withTiming(1, { duration: 100 })",
      "onTouchesUp": "Triggers callback with scheduleOnRN",
      "onFinalize": "progress.value = withTiming(0)",
      "visual_effects": {
        "opacity": "interpolate(progress, [0, 1], [0, 0.1])",
        "scale": "interpolate(progress, [0, 1], [1, 0.9])",
        "background": "rgba(255,255,255,${opacity})"
      }
    },
    "long_press_reset": {
      "gesture": "Gesture.LongPress()",
      "minDuration": 500,
      "action": "Resets entire input to 0",
      "simultaneous": "Runs simultaneously with tap gesture"
    }
  },

  "reanimated_patterns": {
    "useSharedValue": {
      "bottom": {
        "location": "individual-number.tsx",
        "initial": -50,
        "target": 0,
        "purpose": "Vertical entrance animation"
      },
      "opacity": {
        "location": "individual-number.tsx",
        "initial": 0,
        "target": 1,
        "purpose": "Fade-in entrance animation"
      },
      "progress": {
        "location": "input-button.tsx",
        "range": "[0, 1]",
        "purpose": "Button press feedback progress"
      }
    },
    "useDerivedValue": {
      "scaledItemWidth": {
        "calculation": "itemWidth * (scale + scaleWidthOffset)",
        "dependencies": ["itemWidth", "scale"],
        "purpose": "Compute width accounting for scale factor",
        "usage": "Position calculations for digit placement"
      }
    },
    "useAnimatedStyle": {
      "digit_position_and_appearance": {
        "location": "individual-number.tsx (rStyle)",
        "properties": ["bottom", "opacity", "left", "transform"],
        "calculations": {
          "left": "withTiming((index - totalNumbersLength/2) * scaledItemWidth + rightSpace, {duration: 200})",
          "transform": "withTiming(scale)"
        },
        "dependencies": ["index", "itemWidth", "totalNumbersLength"],
        "reactivity": "Re-calculates when digit count or scale changes"
      },
      "button_press": {
        "location": "input-button.tsx (rStyle)",
        "properties": ["backgroundColor", "transform"],
        "interpolations": {
          "opacity": "interpolate(progress, [0,1], [0, 0.1]).toFixed(2)",
          "scale": "interpolate(progress, [0,1], [1, 0.9])"
        },
        "effect": "Button becomes slightly opaque and scales down on press"
      }
    },
    "layout_animations": {
      "outer_wrapper": {
        "layout": "LinearTransition",
        "exiting": "FadeOut.duration(100)",
        "purpose": "Quick fade-out when digit removed"
      },
      "inner_wrapper": {
        "layout": "LinearTransition",
        "exiting": "SlideOutDown.duration(3000).easing(Easing.linear)",
        "purpose": "Slow slide-down animation (possibly too slow, seems experimental)"
      },
      "note": "Triple-nested Animated.View structure for layered animation control"
    },
    "withTiming": {
      "entrance_animations": {
        "usage": ["bottom.value = withTiming(0)", "opacity.value = withTiming(1)"],
        "trigger": "useEffect on component mount",
        "config": "Default timing"
      },
      "position_updates": {
        "usage": "left position and scale",
        "duration": 200,
        "purpose": "Smooth repositioning when digit count changes"
      },
      "button_press": {
        "duration": 100,
        "purpose": "Quick press feedback"
      }
    }
  },

  "component_architecture": {
    "FamilyNumberInput": {
      "type": "Root wrapper component",
      "responsibility": "Simple wrapper that renders NumberInput",
      "note": "Contains TODO suggesting rewrite with Layout Animations"
    },
    "NumberInput": {
      "type": "Main container component",
      "state": {
        "input": {
          "type": "number",
          "initial": 0,
          "updates": "Via onUpdate, onBackspace, reset callbacks"
        }
      },
      "hooks": ["useState", "useCallback", "useSafeAreaInsets"],
      "layout": {
        "top_section": "AnimatedNumber display (centered, flex: 1)",
        "bottom_section": "ButtonsGrid (flex: 1)",
        "gradient": "LinearGradient overlay on top section"
      },
      "callbacks": {
        "reset": "Sets input to 0",
        "onMaxReached": "Placeholder for toast notification (currently no-op)"
      },
      "styling": "Black background, full-screen, respects safe areas"
    },
    "AnimatedNumber": {
      "type": "Number display orchestrator",
      "memo": false,
      "props": {
        "value": {
          "type": "number",
          "required": true,
          "description": "The number to display with animation"
        }
      },
      "responsibilities": [
        "Split number into digit array",
        "Calculate comma positions",
        "Compute dynamic scale based on digit count",
        "Calculate comma spacing",
        "Render all digits with individual animations",
        "Render commas at correct positions"
      ],
      "memoization": {
        "splittedValue": "useMemo(() => value.toString().split(''), [value])",
        "commas": "useMemo(() => getCommasArray(value), [value])",
        "buildIndividualNumber": "useCallback for digit rendering function"
      },
      "constants": {
        "ITEM_WIDTH": 55,
        "ITEM_HEIGHT": 100,
        "SCALE_WIDTH_OFFSET": 0.08
      },
      "layout": "flexDirection: 'row', offset right by comma spacing"
    },
    "AnimatedSingleNumber": {
      "type": "Individual digit/comma renderer",
      "memo": false,
      "props": {
        "value": "number | string (0-9 or ',')",
        "index": "Position in array",
        "itemWidth": "Base width",
        "itemHeight": "Base height",
        "totalNumbersLength": "Total digit count",
        "rightSpace": "Accumulated comma spacing offset",
        "scale": "Scale factor",
        "scaleWidthOffset": "Width calculation offset",
        "containerStyle": "Optional style overrides",
        "style": "Text style"
      },
      "animation_strategy": {
        "pattern": "Manual entering with SharedValues",
        "entering": "Start with opacity: 0, bottom: -50, then animate to opacity: 1, bottom: 0",
        "exiting": "Triple-nested Layout animations (FadeOut + SlideOutDown)",
        "positioning": "Absolute positioning with dynamic left calculation",
        "rationale": "More control over entering animation than Layout animations provide"
      },
      "key_generation": "index + value.toString() (position + value based)"
    },
    "ButtonsGrid": {
      "type": "Numeric keypad",
      "memo": true,
      "layout": "3x4 grid (buttons 1-9, null, 0, backspace)",
      "props": {
        "input": "Current input value",
        "onUpdate": "Callback for new value",
        "onBackspace": "Callback for backspace action",
        "onReset": "Callback for reset action",
        "onMaxReached": "Callback when 11-digit limit reached"
      },
      "button_actions": {
        "numbers": "Append digit: +`${input}${label}`",
        "backspace_tap": "Math.floor(input / 10) removes last digit",
        "backspace_long": "Calls onReset to clear all",
        "max_check": "Prevents input if newValue.toString().length > 11"
      },
      "grid_layout": {
        "flexDirection": "row",
        "flexWrap": "wrap",
        "button_size": "width: 30%, height: 20%",
        "margins": "marginLeft: ~2.33%, marginBottom: ~2.33%"
      }
    },
    "InputButton": {
      "type": "Pressable button component",
      "memo": true,
      "gestures": {
        "tap": {
          "maxDuration": 10000,
          "onTouchesDown": "Start press animation",
          "onTouchesUp": "Trigger onTap callback",
          "onFinalize": "End press animation"
        },
        "longPress": {
          "minDuration": 500,
          "onStart": "Trigger onLongTap callback"
        },
        "composition": "Gesture.Simultaneous(tap, longPress)"
      },
      "visual_feedback": {
        "opacity": "0 to 0.1 white overlay",
        "scale": "1.0 to 0.9",
        "borderRadius": 20
      },
      "threading": "Uses scheduleOnRN to call callbacks on RN thread"
    }
  },

  "number_formatting_logic": {
    "digit_splitting": {
      "process": "value.toString().split('')",
      "example": "12345 → ['1', '2', '3', '4', '5']",
      "storage": "Array of strings"
    },
    "comma_insertion": {
      "function": "getCommasArray(number)",
      "algorithm": {
        "step_1": "Reverse number string digits",
        "step_2": "Iterate through digits",
        "step_3": "Insert ',' at every 3rd position (i % 3 === 0 && i > 0)",
        "step_4": "Reverse result array",
        "example": "1234567 → ['', '', ',', '', '', ',', ''] → positions for commas after digits 1 and 4"
      },
      "return_type": "Array of ',' or '' matching digit array length",
      "rendering": "Commas rendered as separate AnimatedSingleNumber components with marginLeft offset"
    },
    "position_calculation": {
      "comma_count": "commas.slice(0, index).filter(v => v === ',').length",
      "rightSpace": "commaCount * COMMA_SPACE",
      "accumulated_offset": "Each digit's rightSpace includes all previous commas",
      "global_offset": "Container offset right by: commas.filter(v => v === ',').length * COMMA_SPACE"
    },
    "scaling_strategy": {
      "purpose": "Prevent overflow with large numbers",
      "formula": "1 - splittedValue.length * 0.05",
      "range": "11 digits max (scale 0.45 minimum)",
      "coordinated": "Both scale and COMMA_SPACE reduce proportionally"
    }
  },

  "input_logic": {
    "number_append": {
      "operation": "+`${input}${label}`",
      "example": "input: 12, label: 3 → +`123` → 123",
      "casting": "Unary + operator converts string to number"
    },
    "backspace": {
      "operation": "Math.floor(input / 10)",
      "example": "input: 123 → Math.floor(123/10) → 12",
      "edge_case": "input: 5 → Math.floor(5/10) → 0"
    },
    "reset": {
      "operation": "updateInput(0)",
      "trigger": "Long press on backspace button (500ms)"
    },
    "max_limit": {
      "check": "newValue.toString().length > 11",
      "action": "Prevent update, call onMaxReached",
      "note": "Developer intended to use burnt toast but skipped due to prebuild requirement"
    },
    "initial_value": "0 (displayed as single digit)"
  },

  "gesture_patterns": {
    "simultaneous_gestures": {
      "pattern": "Gesture.Simultaneous(tapGesture, longTapGesture)",
      "benefit": "Both tap and long press can be detected on same button",
      "use_case": "Backspace: tap to delete one digit, long press to reset all"
    },
    "worklet_callbacks": {
      "pattern": "scheduleOnRN(callback)",
      "location": "onTouchesUp and longPress.onStart",
      "purpose": "Bridge from UI thread (worklet) to JS thread for React state updates",
      "necessity": "React setState cannot be called from worklets"
    },
    "maxDuration": {
      "value": 10000,
      "purpose": "Prevents tap gesture from timing out during extended press",
      "allows": "Long press detection while tap is active"
    }
  },

  "visual_design": {
    "color_scheme": {
      "background": "#000 (black)",
      "text_numbers": "white",
      "button_overlay": "rgba(255,255,255,0-0.1)",
      "gradient": "['transparent', '#000', '#000', '#000']"
    },
    "typography": {
      "numbers": {
        "fontFamily": "SF-Pro-Rounded-Bold",
        "fontSize": 90,
        "fontWeight": "bold",
        "color": "white",
        "textAlign": "center"
      },
      "buttons": {
        "fontFamily": "SF-Pro-Rounded-Bold",
        "fontSize": 30,
        "color": "white",
        "textAlign": "center"
      }
    },
    "dimensions": {
      "digit": {
        "width": 60,
        "height": 100,
        "fontSize": 90
      },
      "button": {
        "width": "30%",
        "height": "20%",
        "borderRadius": 20
      }
    },
    "spacing": {
      "number_display": "centered, paddingTop: 50",
      "button_margins": "marginLeft: ~2.33%, marginBottom: ~2.33%",
      "safe_areas": "Respects top and bottom insets"
    },
    "effects": {
      "gradient_overlay": {
        "position": "absolute bottom 0, height 50%",
        "colors": "transparent → black",
        "purpose": "Creates depth, fades number display into button area"
      },
      "button_press": {
        "opacity_change": "0 → 0.1 white overlay",
        "scale_change": "1.0 → 0.9",
        "timing": "100ms"
      }
    }
  },

  "react_patterns": {
    "memo": {
      "ButtonsGrid": "Prevents re-render when parent updates",
      "InputButton": "Prevents re-render of individual buttons"
    },
    "useCallback": {
      "reset": "Stable reference for reset function",
      "buildIndividualNumber": "Stable reference for rendering function in map"
    },
    "useMemo": {
      "splittedValue": "Only recalculate when value changes",
      "commas": "Only recalculate when value changes"
    },
    "useState": {
      "input": "Tracks current number value"
    },
    "useEffect": {
      "entrance_animation": "Triggers animation after component mount",
      "dependencies": ["bottom", "opacity"]
    }
  },

  "key_generation_strategy": {
    "approach": "Hybrid: index + value",
    "implementation": "key={index + item.toString()}",
    "rationale": {
      "position_tracking": "Index ensures position-based identity",
      "value_tracking": "Value ensures different values get new keys",
      "combined": "Position + value creates unique, stable keys"
    },
    "example": {
      "number_123": {
        "digit_1": "key='01'",
        "digit_2": "key='12'",
        "digit_3": "key='23'"
      },
      "number_111": {
        "digit_1": "key='01'",
        "digit_2": "key='11'",
        "digit_3": "key='21'"
      }
    },
    "benefit": "Prevents key conflicts while maintaining position stability"
  },

  "performance_optimizations": [
    "useMemo for digit and comma array calculations",
    "useCallback for buildIndividualNumber function",
    "memo on ButtonsGrid to prevent unnecessary re-renders",
    "memo on InputButton for individual button optimization",
    "useDerivedValue for scaledItemWidth calculation (runs on UI thread)",
    "Worklet functions for gesture callbacks (UI thread execution)",
    "scheduleOnRN only when needed for React state updates",
    "Pre-calculated constants (ITEM_WIDTH, ITEM_HEIGHT) outside render"
  ],

  "use_cases": {
    "primary": [
      "Numeric input fields",
      "Calculator interfaces",
      "PIN entry screens",
      "Phone number input",
      "Amount entry (payments, transfers)",
      "Quantity selectors"
    ],
    "secondary": [
      "Budget trackers",
      "Expense logging",
      "Weight/measurement input",
      "Age/year input",
      "Counting interfaces",
      "Inventory management"
    ],
    "real_world_examples": [
      "Banking apps (transfer amount)",
      "Point-of-sale systems",
      "Calculator apps",
      "Tip calculators",
      "Currency converters",
      "Fitness apps (weight entry)",
      "Family/household management apps"
    ],
    "educational": [
      "Teaching number input patterns",
      "Demonstrating gesture handling",
      "Learning SharedValue-based animations",
      "Understanding position calculations",
      "Layout animation patterns"
    ]
  },

  "code_quality": {
    "strengths": [
      "Full TypeScript with explicit type annotations",
      "Well-organized component structure",
      "Separated concerns (display vs input logic)",
      "Good use of memo and useCallback",
      "Comprehensive gesture handling (tap + long press)",
      "Clear utility function (getCommasArray) with JSDoc",
      "Proper safe area handling",
      "Thoughtful scaling algorithm for overflow prevention",
      "Detailed inline comments explaining animation approach",
      "Custom font integration (SF Pro Rounded Bold)"
    ],
    "areas_for_improvement": [
      "TODO comment suggests refactoring with Layout Animations",
      "Triple-nested Animated.View structure seems overly complex",
      "SlideOutDown duration of 3000ms seems experimental/too slow",
      "No TypeScript types for some component props (AnimatedNumber)",
      "Magic numbers could be extracted to constants (50, -50, 0.05, 0.08)",
      "onMaxReached has no implementation (commented out toast)",
      "No error boundaries",
      "No accessibility labels",
      "Key generation could be more robust (position-only might be better)",
      "No support for decimal numbers despite financial use case"
    ]
  },

  "known_limitations": {
    "integer_only": {
      "limitation": "Only supports whole numbers",
      "no_support": "Decimals, negative numbers, currency symbols",
      "impact": "Limited for financial applications requiring cents"
    },
    "max_digits": {
      "limitation": "Hardcoded 11-digit maximum",
      "reason": "Scale formula becomes too small beyond this",
      "current_min_scale": "0.45 at 11 digits"
    },
    "no_error_feedback": {
      "limitation": "onMaxReached is a no-op",
      "intended": "Toast notification (burnt package)",
      "reason": "Requires prebuild, doesn't work with Expo Go"
    },
    "complex_animation_structure": {
      "limitation": "Triple-nested Animated.View for exiting",
      "impact": "Hard to maintain and understand",
      "developer_note": "Developer admits not fully understanding Layout animations"
    },
    "font_dependency": {
      "limitation": "Requires SF-Pro-Rounded-Bold font",
      "fallback": "Will fall back to system font if unavailable",
      "impact": "Visual design may differ on some devices"
    },
    "accessibility": {
      "limitation": "No screen reader support",
      "issues": [
        "No accessibility labels on buttons or input",
        "No announcement of number changes",
        "No support for keyboard input",
        "No focus management"
      ]
    },
    "comma_formatting": {
      "limitation": "Only US-style thousand separators",
      "no_support": "International formatting (European: 1.234.567,89)",
      "hardcoded": "Comma every 3 digits from right"
    }
  },

  "potential_improvements": [
    "Refactor to use Layout Animations for entering as suggested in TODO",
    "Simplify triple-nested Animated.View structure",
    "Add decimal point support for currency",
    "Implement onMaxReached toast with conditional rendering",
    "Add currency symbol prefix/suffix",
    "Support negative numbers with minus button",
    "Extract magic numbers to named constants",
    "Add accessibility labels and screen reader support",
    "Support keyboard input for web/desktop",
    "Add haptic feedback on button press",
    "Implement undo/redo functionality",
    "Add number formatting options (European, Indian, etc.)",
    "Support paste from clipboard",
    "Add configurable max digits as prop",
    "Implement reduced motion support",
    "Add unit tests for input logic and formatting",
    "Create reusable component with props API",
    "Add error states and validation",
    "Support different color themes",
    "Add sound effects option"
  ],

  "key_insights": {
    "manual_vs_layout_animations": "Developer chose manual SharedValue control for entering to have precise control, despite Layout animations being simpler",
    "triple_nesting_pattern": "Three nested Animated.Views with different layout animations creates complex layered effects",
    "position_based_layout": "Absolute positioning with calculated left offset provides precise digit placement",
    "scaling_algorithm": "Linear scale reduction (1 - length * 0.05) elegantly handles variable digit counts",
    "comma_rendering_approach": "Rendering commas as separate components with margin is more flexible than string concatenation",
    "gesture_composition": "Simultaneous gesture pattern enables multiple interaction types on one button",
    "worklet_bridging": "scheduleOnRN is critical for calling React setState from gesture worklets",
    "dynamic_spacing": "Both scale and comma spacing reduce proportionally for visual consistency",
    "gradient_overlay": "Subtle gradient creates depth and separates display from input areas",
    "math_based_input": "Using Math.floor(input/10) for backspace is elegant integer manipulation"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Basic useState for number state",
      "String to array manipulation (.split(''))",
      "Simple gesture handling (Tap)",
      "useCallback and useMemo optimization",
      "Safe area handling with useSafeAreaInsets",
      "LinearGradient usage"
    ],
    "for_intermediate": [
      "Manual entering animations with SharedValues and useEffect",
      "Complex position calculations with absolute positioning",
      "Dynamic scaling based on content",
      "useAnimatedStyle with multiple properties",
      "useDerivedValue for computed values",
      "Gesture.Simultaneous pattern",
      "scheduleOnRN for thread bridging",
      "Interpolation for visual feedback",
      "memo optimization patterns"
    ],
    "for_advanced": [
      "Comparing manual vs Layout animations approaches",
      "Complex multi-layered animation nesting",
      "Building numeric input systems",
      "Dynamic layout with absolute positioning",
      "Gesture worklet optimization",
      "Performance with many animated components",
      "Algorithm design for number formatting",
      "Creating reusable animation patterns"
    ]
  },

  "tags": [
    "number-input",
    "numeric-keypad",
    "animated-input",
    "calculator",
    "gesture-input",
    "tap-gesture",
    "long-press",
    "digit-animation",
    "comma-formatting",
    "dynamic-scaling",
    "layout-animations",
    "reanimated",
    "gesture-handler",
    "absolute-positioning",
    "backspace",
    "family",
    "input-feedback"
  ]
}
