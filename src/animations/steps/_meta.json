{
  "animation_name": "Steps",
  "animation_slug": "steps",
  "description": "A multi-step progress indicator with animated dots and dynamic buttons. Features an animated progress bar that grows with spring animations, color-transitioning dots, dynamic button width animations with interpolation, and adaptive button labels. Perfect for onboarding flows, forms, and wizard-style interfaces.",
  "main_features": [
    "Animated progress bar with spring animation",
    "Color-transitioning dots based on step completion",
    "Dynamic back button width animation (0 to 25% width)",
    "Interpolated button width and margin animations",
    "Adaptive button labels (Continue/Finish based on step)",
    "Check icon animation on final step",
    "Spring-based smooth transitions",
    "Animated reaction to sync UI thread and JS thread state",
    "PressableScale interactions for buttons",
    "Continuous border curve for iOS-style UI"
  ],
  "file_structure": {
    "index.tsx": "Main demo wrapper with GestureHandlerRootView",
    "src/index.tsx": "Core App component with step state management",
    "src/steps/dots/index.tsx": "Dots progress indicator with animated bar",
    "src/steps/dots/dot.tsx": "Individual dot with color animation",
    "src/steps/step-buttons/index.tsx": "Step navigation buttons with animations"
  },
  "core_technologies": {
    "animations": "react-native-reanimated",
    "gestures": "react-native-gesture-handler",
    "interactions": "pressto",
    "threading": "react-native-worklets"
  },
  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle",
        "useAnimatedReaction",
        "useDerivedValue",
        "interpolate",
        "withSpring",
        "withTiming"
      ],
      "functions": [
        "withSpring",
        "withTiming",
        "interpolate"
      ],
      "components": [
        "Animated.View",
        "Animated.Text"
      ],
      "critical_feature": "useAnimatedReaction for syncing worklet and JS thread state"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": [
        "GestureHandlerRootView"
      ],
      "usage": "Wrapper for gesture-based interactions"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "imports": [
        "scheduleOnRN"
      ],
      "usage": "Bridge worklet callbacks to JS thread for state updates"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "component": "PressableScale",
      "usage": "Buttons with scale press animation"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "component": "AntDesign",
      "icons_used": [
        "check-circle"
      ]
    }
  },
  "animation_techniques": {
    "progress_bar_width": {
      "pattern": "Dynamic width calculation with spring animation",
      "formula": "(activeIndex + 1) * dotSize + activeIndex * dotSpacing + externalSpacing",
      "animation": "withSpring(activeWidth)",
      "effect": "Bar smoothly grows to encompass completed dots",
      "spring_config": "Default spring (natural bounce)"
    },
    "dot_color_transition": {
      "pattern": "Color animation based on step completion",
      "animation": "withTiming(activeIndex >= index ? 'white' : 'rgba(0,0,0,0.15)')",
      "duration": "200ms",
      "effect": "Dots turn white when reached, gray when not",
      "timing": "Fast for immediate visual feedback"
    },
    "back_button_reveal": {
      "pattern": "Width interpolation from 0 to configured width",
      "trigger": "activeIndex > 0",
      "animation": "withSpring(activeIndex > 0 ? 1 : 0)",
      "spring_config": "{ duration: 250, dampingRatio: 1.5 }",
      "width_interpolation": "interpolate([0, 1], [0, backButtonWidth])",
      "margin_interpolation": "interpolate([0, 1], [0, GAP])",
      "opacity_interpolation": "interpolate([0, 1], [0, 1])",
      "effect": "Back button slides in from left with margin spacing"
    },
    "finish_icon_animation": {
      "pattern": "Icon width and opacity interpolation on final step",
      "trigger": "activeIndex === 2",
      "animation": "withSpring(activeIndex === 2 ? 1 : 0)",
      "spring_config": "{ duration: 250, dampingRatio: 1.5 }",
      "width_interpolation": "interpolate([0, 1], [0, 22px])",
      "opacity_interpolation": "interpolate([0, 1], [0, 1])",
      "margin_interpolation": "interpolate([0, 1], [0, 6px])",
      "effect": "Check icon fades in with margin on final step"
    },
    "button_label_change": {
      "pattern": "Conditional label based on step state",
      "values": "'Continue' or 'Finish'",
      "condition": "isLastStep ? 'Finish' : 'Continue'",
      "effect": "Button text changes on final step"
    },
    "animated_reaction_sync": {
      "pattern": "useAnimatedReaction to sync worklet and JS state",
      "watches": "activeIndex.get()",
      "action": "scheduleOnRN(setIsLastStep, index === 2)",
      "purpose": "Update React state from worklet thread",
      "benefit": "Enables conditional rendering based on shared value"
    }
  },
  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "activeIndex",
        "type": "SharedValue<number>",
        "initial": 0,
        "range": "0-2 (3 steps)",
        "updates": "On button press",
        "scope": "App component",
        "purpose": "Track current step index"
      },
      {
        "name": "backButtonProgress",
        "type": "useDerivedValue<number>",
        "calculation": "withSpring(activeIndex > 0 ? 1 : 0)",
        "purpose": "Animated progress value for back button reveal",
        "spring_config": "{ duration: 250, dampingRatio: 1.5 }"
      },
      {
        "name": "iconProgress",
        "type": "useDerivedValue<number>",
        "calculation": "withSpring(activeIndex === 2 ? 1 : 0)",
        "purpose": "Animated progress value for finish icon",
        "spring_config": "{ duration: 250, dampingRatio: 1.5 }"
      }
    ],
    "useAnimatedReaction": {
      "usage_count": 1,
      "watches": "activeIndex.get()",
      "callback": "scheduleOnRN(setIsLastStep, index === 2)",
      "purpose": "Sync shared value to React state for conditional rendering",
      "pattern": "Worklet-to-JS state bridging",
      "benefit": "Enables React re-renders from worklet updates"
    },
    "useDerivedValue": {
      "usage_count": 2,
      "instances": [
        {
          "name": "backButtonProgress",
          "calculation": "withSpring(activeIndex.value > 0 ? 1 : 0, SPRING_CONFIG)",
          "dependencies": [
            "activeIndex.value"
          ],
          "purpose": "Progress value for back button reveal animation"
        },
        {
          "name": "iconProgress",
          "calculation": "withSpring(activeIndex.value === 2 ? 1 : 0, SPRING_CONFIG)",
          "dependencies": [
            "activeIndex.value"
          ],
          "purpose": "Progress value for check icon reveal animation"
        }
      ]
    },
    "useAnimatedStyle": {
      "usage_count": 5,
      "instances": [
        {
          "name": "rBarStyle (Dots)",
          "animated_properties": {
            "width": "withSpring(calculated width based on activeIndex)"
          },
          "purpose": "Animate progress bar width"
        },
        {
          "name": "rDotStyle (Dot)",
          "animated_properties": {
            "backgroundColor": "withTiming(activeIndex >= index ? 'white' : 'rgba(0,0,0,0.15)', { duration: 200 })"
          },
          "purpose": "Animate dot color on completion"
        },
        {
          "name": "rBackButtonStyle (StepButtons)",
          "animated_properties": {
            "width": "interpolate(backButtonProgress, [0, 1], [0, backButtonWidth])",
            "marginRight": "interpolate(backButtonProgress, [0, 1], [0, GAP])",
            "overflow": "hidden"
          },
          "purpose": "Animate back button width and margin"
        },
        {
          "name": "rBackButtonInnerStyle (StepButtons)",
          "animated_properties": {
            "opacity": "interpolate(backButtonProgress, [0, 1], [0, 1])"
          },
          "purpose": "Fade in back button content"
        },
        {
          "name": "rIconStyle (StepButtons)",
          "animated_properties": {
            "width": "interpolate(iconProgress, [0, 1], [0, 22px])",
            "opacity": "interpolate(iconProgress, [0, 1], [0, 1])",
            "marginRight": "interpolate(iconProgress, [0, 1], [0, 6px])"
          },
          "purpose": "Animate check icon reveal on final step"
        }
      ]
    },
    "useCallback": {
      "usage_count": 2,
      "callbacks": [
        {
          "name": "increaseActiveIndex",
          "dependencies": "[activeIndex]",
          "action": "activeIndex.set((activeIndex.get() + 1) % 3)",
          "purpose": "Advance to next step (cycles back to 0 after step 2)"
        },
        {
          "name": "decreaseActiveIndex",
          "dependencies": "[activeIndex]",
          "action": "activeIndex.set(Math.max(0, activeIndex.get() - 1))",
          "purpose": "Go back to previous step (minimum 0)"
        }
      ]
    },
    "memo_pattern": {
      "component": "Dots",
      "purpose": "Prevent unnecessary re-renders",
      "benefit": "Dots only re-render when props change"
    }
  },
  "component_architecture": {
    "steps": {
      "type": "Main wrapper component",
      "purpose": "Provides GestureHandlerRootView context",
      "children": [
        "App"
      ]
    },
    "app": {
      "type": "Container component",
      "state": {
        "isLastStep": {
          "type": "boolean",
          "initial": false,
          "updates": "Via useAnimatedReaction when activeIndex === 2"
        }
      },
      "shared_values": {
        "activeIndex": {
          "type": "SharedValue<number>",
          "initial": 0
        }
      },
      "children": [
        "Dots",
        "StepButtons"
      ],
      "layout": "Flex column, centered, bottom-aligned"
    },
    "dots": {
      "type": "Progress indicator component",
      "memo": true,
      "props": {
        "count": {
          "type": "number",
          "value": 3,
          "usage": "Number of steps"
        },
        "activeIndex": {
          "type": "SharedValue<number>",
          "required": true,
          "usage": "Current step index"
        },
        "dotSize": {
          "type": "number",
          "value": 10,
          "usage": "Dot diameter in pixels"
        }
      },
      "rendering": "Animated progress bar + array of Dot components"
    },
    "dot": {
      "type": "Individual dot component",
      "props": {
        "index": {
          "type": "number",
          "required": true,
          "usage": "Dot position index"
        },
        "activeIndex": {
          "type": "SharedValue<number>",
          "required": true,
          "usage": "Current step index for comparison"
        },
        "dotSize": {
          "type": "number",
          "required": true,
          "usage": "Dot diameter"
        }
      },
      "animation": "Background color based on completion"
    },
    "step_buttons": {
      "type": "Navigation buttons component",
      "props": {
        "activeIndex": {
          "type": "SharedValue<number>",
          "required": true,
          "usage": "Current step for UI state"
        },
        "rightLabel": {
          "type": "string",
          "values": "'Continue' | 'Finish'",
          "usage": "Dynamic label for continue button"
        },
        "backButtonLabel": {
          "type": "string",
          "value": "'Back'",
          "usage": "Label for back button"
        },
        "onBack": {
          "type": "() => void",
          "required": true,
          "usage": "Back button press handler"
        },
        "onContinue": {
          "type": "() => void",
          "required": true,
          "usage": "Continue button press handler"
        }
      },
      "rendering": "Back button (conditional) + Continue button with icon"
    }
  },
  "layout_and_positioning": {
    "container": {
      "alignment": "center",
      "justifyContent": "flex-end",
      "paddingBottom": 64,
      "background": "#fff"
    },
    "dots_container": {
      "flexDirection": "row",
      "alignItems": "center",
      "paddingHorizontal": "externalSpacing / 2 (10px)",
      "gap": 20
    },
    "progress_bar": {
      "position": "absolute",
      "backgroundColor": "#66e070 (green)",
      "borderRadius": 100,
      "borderCurve": "continuous",
      "height": "dotSize + 20 (30px)",
      "width": "Animated based on activeIndex",
      "effect": "Pill-shaped bar behind dots"
    },
    "dots_layout": {
      "count": 3,
      "dotSize": 10,
      "spacing": 20,
      "arrangement": "Horizontal row with 20px gap"
    },
    "buttons_container": {
      "flexDirection": "row",
      "height": 60,
      "marginTop": 48,
      "paddingHorizontal": 20,
      "width": "100%"
    },
    "back_button": {
      "width": "Animated (0 to 25% of available width)",
      "calculation": "(windowWidth - 40 - 10) * 0.25",
      "height": 60,
      "borderRadius": 30,
      "marginRight": "Animated (0 to 10px)",
      "backgroundColor": "rgba(0,0,0,0.08)"
    },
    "continue_button": {
      "flex": 1,
      "height": 60,
      "borderRadius": 30,
      "backgroundColor": "#0c86f7 (blue)",
      "layout": "Flex row with centered icon and label"
    },
    "check_icon": {
      "size": 16,
      "color": "white",
      "width": "Animated (0 to 22px container)",
      "marginRight": "Animated (0 to 6px)"
    }
  },
  "calculation_formulas": {
    "progress_bar_width": {
      "formula": "(activeIndex + 1) * dotSize + activeIndex * dotSpacing + externalSpacing",
      "example_step_0": "(0 + 1) * 10 + 0 * 20 + 10 = 20px",
      "example_step_1": "(1 + 1) * 10 + 1 * 20 + 10 = 50px",
      "example_step_2": "(2 + 1) * 10 + 2 * 20 + 10 = 80px",
      "purpose": "Calculate exact width to cover completed dots with spacing"
    },
    "back_button_width": {
      "formula": "(windowWidth - PADDING_HORIZONTAL * 2 - GAP) * BACK_BUTTON_WIDTH_RATIO",
      "constants": {
        "PADDING_HORIZONTAL": 20,
        "GAP": 10,
        "BACK_BUTTON_WIDTH_RATIO": 0.25
      },
      "example_375px_screen": "(375 - 40 - 10) * 0.25 = 81.25px",
      "purpose": "25% of available button space"
    }
  },
  "visual_design": {
    "color_scheme": {
      "background": "#fff (white)",
      "progress_bar": "#66e070 (green)",
      "active_dot": "white",
      "inactive_dot": "rgba(0,0,0,0.15) (light gray)",
      "back_button_bg": "rgba(0,0,0,0.08) (light gray)",
      "continue_button_bg": "#0c86f7 (blue)",
      "back_button_text": "black",
      "continue_button_text": "white",
      "icon_color": "white"
    },
    "typography": {
      "font_family": "SF-Pro-Rounded-Bold",
      "button_font_size": 18,
      "letter_spacing": 0.5,
      "text_color_back": "black",
      "text_color_continue": "white"
    },
    "spacing_constants": {
      "BUTTON_HEIGHT": 60,
      "PADDING_HORIZONTAL": 20,
      "GAP": 10,
      "ICON_WIDTH": 22,
      "ICON_MARGIN_RIGHT": 6,
      "dotSize": 10,
      "dotSpacing": 20,
      "externalSpacing": 20,
      "marginTop": 48,
      "paddingBottom": 64
    },
    "border_radius": {
      "buttons": 30,
      "progress_bar": 100,
      "dots": "dotSize / 2 (5px)",
      "border_curve": "continuous (iOS squircle)"
    },
    "spring_config": {
      "duration": 250,
      "dampingRatio": 1.5,
      "effect": "Slightly overdamped for smooth, controlled motion"
    }
  },
  "step_flow": {
    "total_steps": 3,
    "step_indices": [
      0,
      1,
      2
    ],
    "navigation": {
      "forward": "increaseActiveIndex() - cycles to 0 after step 2",
      "backward": "decreaseActiveIndex() - minimum 0",
      "cycle_behavior": "(activeIndex + 1) % 3"
    },
    "ui_changes_per_step": {
      "step_0": {
        "activeIndex": 0,
        "dots_completed": 1,
        "bar_width": "20px",
        "back_button": "hidden (width: 0)",
        "continue_label": "Continue",
        "check_icon": "hidden (width: 0)"
      },
      "step_1": {
        "activeIndex": 1,
        "dots_completed": 2,
        "bar_width": "50px",
        "back_button": "visible (width: 81.25px on 375px screen)",
        "continue_label": "Continue",
        "check_icon": "hidden (width: 0)"
      },
      "step_2": {
        "activeIndex": 2,
        "dots_completed": 3,
        "bar_width": "80px",
        "back_button": "visible (width: 81.25px on 375px screen)",
        "continue_label": "Finish",
        "check_icon": "visible (width: 22px)"
      }
    }
  },
  "interaction_patterns": {
    "button_press": {
      "component": "PressableScale",
      "effect": "Scale animation on press",
      "library": "pressto",
      "benefit": "Tactile feedback without custom animation"
    },
    "step_advancement": {
      "trigger": "Continue button press",
      "action": "(activeIndex + 1) % 3",
      "result": "Advances to next step, cycles to 0 after step 2"
    },
    "step_regression": {
      "trigger": "Back button press",
      "action": "Math.max(0, activeIndex - 1)",
      "result": "Goes back one step, stops at 0"
    },
    "reactive_ui_updates": {
      "pattern": "useAnimatedReaction monitors activeIndex",
      "bridge": "scheduleOnRN to update React state",
      "purpose": "Update button label when reaching final step"
    }
  },
  "performance_optimizations": {
    "memo": {
      "component": "Dots",
      "benefit": "Prevents re-renders when parent state changes (isLastStep)"
    },
    "shared_values": {
      "usage": "activeIndex as SharedValue",
      "benefit": "No re-renders on step change, all animations on UI thread"
    },
    "derived_values": {
      "count": 2,
      "instances": [
        "backButtonProgress",
        "iconProgress"
      ],
      "benefit": "Automatic recalculation, optimized dependency tracking"
    },
    "useCallback": {
      "functions": [
        "increaseActiveIndex",
        "decreaseActiveIndex"
      ],
      "benefit": "Stable references, prevents child re-renders"
    },
    "ui_thread_execution": {
      "animations": "All withSpring, withTiming, interpolate on UI thread",
      "benefit": "No bridge crossing for smooth 60fps animations"
    },
    "minimal_components": {
      "total": "6 components (App, Dots, 3 Dot instances, StepButtons)",
      "overhead": "Very low, suitable for any device"
    }
  },
  "use_cases": {
    "primary": [
      "Onboarding flows",
      "Multi-step forms",
      "Wizard-style interfaces",
      "Tutorial sequences",
      "Checkout processes",
      "Survey/questionnaire flows"
    ],
    "secondary": [
      "Progress tracking indicators",
      "Achievement unlocking sequences",
      "Setup wizards",
      "Configuration flows",
      "Registration processes"
    ],
    "educational": [
      "Teaching step-based navigation",
      "Demonstrating progress indicators",
      "Showing dynamic button animations",
      "useAnimatedReaction pattern demonstration"
    ],
    "real_world_examples": [
      "App onboarding (Instagram, Twitter)",
      "E-commerce checkout (Amazon, Shopify)",
      "Form wizards (SurveyMonkey)",
      "Setup flows (Notion, Slack)",
      "Tutorial sequences (Duolingo)"
    ]
  },
  "code_quality": {
    "strengths": [
      "Full TypeScript with explicit types",
      "Clear component separation (Dots, Dot, StepButtons)",
      "Reusable components with props",
      "Clean calculation formulas with comments",
      "Constants for configuration (BUTTON_HEIGHT, GAP, etc)",
      "useAnimatedReaction for worklet-JS bridging",
      "Memo optimization on Dots component",
      "useCallback for stable function references",
      "Modular file structure",
      "Clear naming conventions"
    ],
    "areas_for_improvement": [
      "Could add prop types for step count (currently hardcoded to 3)",
      "Button labels could be configurable props",
      "Spring config could be customizable",
      "Color scheme could be themeable",
      "No accessibility labels",
      "Could add completion callback",
      "Font family hardcoded (SF-Pro-Rounded-Bold)"
    ],
    "typescript_usage": {
      "coverage": "Full TypeScript",
      "type_definitions": [
        "DotsProps",
        "DotProps",
        "StepButtonsProps"
      ],
      "type_imports": "SharedValue from react-native-reanimated",
      "best_practices": "Type annotations on all props and components"
    },
    "component_structure": {
      "pattern": "Composition with clear hierarchy",
      "main": "Steps wrapper",
      "container": "App with state management",
      "presentational": "Dots, Dot, StepButtons",
      "separation": "Clear separation of concerns"
    },
    "constants_pattern": {
      "button_constants": "BUTTON_HEIGHT, PADDING_HORIZONTAL, GAP, etc.",
      "spring_config": "SPRING_CONFIG object",
      "ratios": "BACK_BUTTON_WIDTH_RATIO, ICON_WIDTH",
      "benefit": "Easy to adjust and maintain"
    },
    "best_practices": [
      "useAnimatedReaction for syncing threads",
      "scheduleOnRN for JS callbacks from worklets",
      "Memo for performance",
      "useCallback for stable references",
      "SharedValue for animation without re-renders",
      "Continuous border curve for iOS polish"
    ]
  },
  "known_limitations": {
    "hardcoded_step_count": {
      "issue": "Step count fixed at 3",
      "impact": "Not reusable for different step counts",
      "enhancement": "Make step count a prop"
    },
    "no_step_validation": {
      "issue": "Cycles back to 0 after final step",
      "impact": "Continue button on step 2 goes to step 0",
      "enhancement": "Could disable or trigger onComplete callback"
    },
    "no_accessibility": {
      "issue": "No accessibility labels or hints",
      "impact": "Not screen reader friendly",
      "enhancement": "Add accessibilityLabel, accessibilityHint, accessibilityRole"
    },
    "fixed_colors": {
      "issue": "Colors hardcoded in components",
      "impact": "Not themeable",
      "enhancement": "Accept color props or theme context"
    },
    "no_keyboard_navigation": {
      "issue": "Touch-only interaction",
      "impact": "Not keyboard accessible",
      "enhancement": "Add keyboard shortcuts"
    },
    "font_dependency": {
      "issue": "Requires SF-Pro-Rounded-Bold font",
      "impact": "May not render correctly if font missing",
      "enhancement": "Fallback to system font or make configurable"
    }
  },
  "potential_improvements": {
    "customization": [
      "Configurable step count",
      "Custom button labels per step",
      "Themeable color scheme",
      "Configurable spring animations",
      "Custom icons (not just check-circle)",
      "Adjustable dot size and spacing",
      "Custom progress bar color per step"
    ],
    "functionality": [
      "Step validation before advancing",
      "onComplete callback when finishing",
      "onStepChange callback with step data",
      "Skip step functionality",
      "Direct step navigation (tap dot to jump)",
      "Progress percentage display",
      "Step titles/descriptions"
    ],
    "animations": [
      "Staggered dot animations",
      "Pulse animation on active dot",
      "Confetti or success animation on completion",
      "Slide transitions for content",
      "Number indicators inside dots",
      "Progress bar gradient animation"
    ],
    "accessibility": [
      "Screen reader announcements",
      "Keyboard navigation (Tab, Enter, Escape)",
      "Focus indicators",
      "Reduce motion support",
      "accessibilityRole='progressbar'",
      "accessibilityValue with step info",
      "High contrast mode support"
    ],
    "ux_enhancements": [
      "Haptic feedback on step change",
      "Swipe gestures for navigation",
      "Long press to skip multiple steps",
      "Step history/breadcrumbs",
      "Error states on steps",
      "Loading states during transitions"
    ]
  },
  "key_insights": {
    "width_calculation_formula": "Mathematical formula for progress bar width accounts for dots and spacing perfectly",
    "animated_reaction_pattern": "useAnimatedReaction + scheduleOnRN enables worklet-to-React state syncing",
    "derived_value_spring": "useDerivedValue with withSpring creates smooth animated progress values",
    "interpolate_for_reveals": "Interpolating width, opacity, and margin creates smooth reveal animations",
    "shared_value_performance": "Using SharedValue for activeIndex prevents re-renders while enabling animations",
    "cyclic_step_logic": "Modulo operator (%) creates circular navigation pattern",
    "spring_damping": "dampingRatio: 1.5 creates slightly overdamped, controlled motion",
    "continuous_border_curve": "borderCurve: 'continuous' gives iOS-style squircle appearance",
    "overflow_hidden_trick": "overflow: 'hidden' on button container enables width-based reveal",
    "memo_optimization": "Memoizing Dots prevents unnecessary re-renders from parent state changes"
  },
  "learning_opportunities": {
    "for_beginners": [
      "Basic step-based navigation",
      "Progress indicator patterns",
      "Conditional rendering based on state",
      "SharedValue basics",
      "Simple spring animations",
      "useCallback usage"
    ],
    "for_intermediate": [
      "useAnimatedReaction for thread syncing",
      "scheduleOnRN for JS callbacks from worklets",
      "useDerivedValue for computed animations",
      "Interpolation for reveal animations",
      "Dynamic width calculations",
      "Component memoization patterns",
      "Multi-component coordination"
    ],
    "for_advanced": [
      "Worklet-to-JS state bridging techniques",
      "Mathematical formula-based animations",
      "Complex interpolation patterns (width, opacity, margin)",
      "Performance optimization strategies",
      "Reusable animation patterns",
      "Spring configuration tuning",
      "Coordinating multiple animated elements"
    ]
  },
  "testing_considerations": {
    "visual_regression": [
      "Progress bar grows correctly on each step",
      "Dots change color at correct timing",
      "Back button reveals smoothly from step 1",
      "Check icon appears only on final step",
      "Button labels change correctly (Continue/Finish)",
      "Border radius animation smooth"
    ],
    "interaction_testing": [
      "Continue button advances step",
      "Back button decreases step (minimum 0)",
      "Step 2 Continue cycles to step 0",
      "Back button hidden on step 0",
      "PressableScale animations work",
      "Rapid clicking handled correctly"
    ],
    "calculation_testing": [
      "Progress bar width matches formula",
      "Back button width calculated correctly for different screen sizes",
      "Icon width and margin interpolate correctly",
      "Dot spacing consistent across steps"
    ],
    "edge_cases": [
      "Screen rotation during animation",
      "Very small screens (< 320px)",
      "Very large screens (tablets)",
      "Font not loaded",
      "Rapid step changes",
      "Animation interruption"
    ],
    "performance_testing": [
      "60fps animations on all steps",
      "No frame drops during transitions",
      "Memory stable across step changes",
      "UI thread execution verified"
    ],
    "accessibility_testing": [
      "Screen reader announces step changes",
      "Keyboard navigation works",
      "Focus indicators visible",
      "Reduced motion respected",
      "Color contrast sufficient"
    ]
  },
  "accessibility_considerations": {
    "current_state": {
      "screen_readers": "No accessibility labels",
      "keyboard_navigation": "Not implemented",
      "reduced_motion": "No support",
      "color_contrast": "Good (sufficient contrast ratios)",
      "focus_management": "None"
    },
    "recommendations": [
      "Add accessibilityRole='progressbar' to progress indicator",
      "Add accessibilityValue with current and max steps",
      "Add accessibilityLabel to buttons ('Back', 'Continue to step 2', 'Finish')",
      "Add accessibilityHint for context",
      "Announce step changes to screen reader",
      "Support keyboard navigation (Tab, Enter, Escape, Arrow keys)",
      "Disable animations when prefers-reduced-motion is enabled",
      "Add focus indicators for keyboard users",
      "Ensure 4.5:1 contrast ratio for text",
      "Make dots tappable for direct navigation with proper labels"
    ],
    "implementation_suggestions": {
      "reduced_motion": "Check AccessibilityInfo.isReduceMotionEnabled(), use timing(0) instead of spring",
      "screen_reader": "AccessibilityInfo.announceForAccessibility('Step 2 of 3')",
      "keyboard": "Handle onKeyPress events, maintain focus state",
      "progress_info": "accessibilityValue={{ now: activeIndex + 1, min: 1, max: 3 }}"
    }
  },
  "comparison_to_similar_patterns": {
    "vs_tab_indicators": {
      "similarity": "Both show current position in sequence",
      "difference": "This is linear progression, tabs allow random access",
      "advantage": "Clearer progress visualization with bar"
    },
    "vs_stepper_components": {
      "similarity": "Both track multi-step flows",
      "difference": "This has animated bar, steppers often use numbers/lines",
      "unique": "Spring-animated progress bar growing over dots"
    },
    "vs_pagination_dots": {
      "similarity": "Both use dots to show position",
      "difference": "This has progress bar overlay, pagination is static dots",
      "advantage": "Progress bar provides stronger visual feedback"
    }
  },
  "related_patterns": {
    "progress_indicators": [
      "Linear progress bars",
      "Circular progress indicators",
      "Step counters (1/3, 2/3, etc)",
      "Breadcrumb navigation"
    ],
    "navigation_patterns": [
      "Wizard flows",
      "Carousel navigation",
      "Tab navigation",
      "Accordion expansion"
    ],
    "button_animations": [
      "Reveal animations",
      "Morph buttons",
      "Icon transitions",
      "Label changes"
    ]
  },
  "real_world_inspiration": {
    "ios_onboarding": "iOS app onboarding flows with dot indicators",
    "material_stepper": "Material Design stepper pattern",
    "form_wizards": "Multi-step form patterns across web/mobile",
    "checkout_flows": "E-commerce checkout progress indicators"
  },
  "bundle_size_impact": {
    "code_size": "~200 lines total (main + components)",
    "dependencies": "Reanimated, gesture-handler, pressto, vector-icons (likely already in project)",
    "runtime_memory": "Minimal - 3 SharedValues, 5 animated styles",
    "estimated_size": "< 8KB"
  },
  "tags": [
    "steps",
    "progress-indicator",
    "onboarding",
    "wizard",
    "multi-step",
    "dots-indicator",
    "progress-bar",
    "spring-animation",
    "button-reveal",
    "interpolation",
    "reanimated",
    "animated-reaction",
    "worklets",
    "step-navigation",
    "form-wizard"
  ],
  "content_hash": "6ba1f4d52551fcccc694587f261a12366c2a3c3e4ee23b1e54283b31c95c776f",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.462Z",
  "last_validated": "2025-10-12T09:19:28.462Z"
}
