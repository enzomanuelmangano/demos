{
  "animation_name": "Coverflow Carousel",
  "animation_slug": "coverflow-carousel",
  "description": "A horizontal carousel component with Apple-inspired coverflow effect featuring 3D perspective transforms, dynamic scaling, translation, and opacity interpolation. Items scale and rotate in 3D space as they move through the carousel, with the center item at full size and surrounding items progressively smaller and translated.",
  "main_features": [
    "Apple-style coverflow carousel with 3D transforms",
    "Horizontal scrolling with snap-to-item behavior",
    "Dynamic scale interpolation (scaleX and scaleY)",
    "Smooth horizontal translation for card stacking",
    "Border radius animation based on item position",
    "Opacity fade for distant items",
    "Paging enabled with precise snap intervals",
    "Scroll offset tracking with useScrollViewOffset",
    "Responsive padding calculation for centering",
    "Optimized image rendering with expo-image caching",
    "Seven-point interpolation for smooth transitions"
  ],
  "file_structure": {
    "index.tsx": "Main CoverflowCarousel component with demo setup and styling",
    "components/coverflow-carousel/index.tsx": "Core CoverFlowCarousel component with FlatList and scroll handling",
    "components/coverflow-carousel/carousel-item.tsx": "Individual carousel item with interpolation logic and 3D transforms",
    "constants.ts": "Image URLs array for demo content"
  },
  "core_technologies": {
    "animations": "react-native-reanimated",
    "images": "expo-image",
    "list": "Animated.FlatList"
  },
  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useAnimatedRef",
        "useScrollViewOffset",
        "useAnimatedStyle",
        "interpolate"
      ],
      "components": [
        "Animated.FlatList",
        "Animated.View"
      ],
      "utilities": [
        "Extrapolation"
      ],
      "critical_feature": "useScrollViewOffset for tracking scroll position without bridge crossing"
    },
    "expo-image": {
      "version": "~3.0.8",
      "components": [
        "Image"
      ],
      "features": [
        "cachePolicy: 'memory-disk'",
        "contentFit: 'cover'"
      ],
      "usage": "Optimized image rendering with memory and disk caching"
    },
    "react-native": {
      "hooks": [
        "useWindowDimensions",
        "useCallback"
      ],
      "components": [
        "View",
        "StyleSheet"
      ],
      "utilities": [
        "Dimensions"
      ]
    }
  },
  "animation_techniques": {
    "scale_interpolation": {
      "scaleX": {
        "input_range": "[index-3, index-2, index-1, index, index+1, index+2, index+3] * itemWidth",
        "output_range": "[0.1, 0.125, 0.2, 1, 0.2, 0.125, 0.1]",
        "effect": "Center item at full width (scale 1), side items progressively smaller",
        "extrapolation": "CLAMP",
        "note": "Horizontal scale creates dramatic width reduction for off-center items"
      },
      "scaleY": {
        "input_range": "[index-3, index-2, index-1, index, index+1, index+2, index+3] * itemWidth",
        "output_range": "[0.6, 0.8, 0.9, 1, 0.9, 0.8, 0.6]",
        "effect": "Vertical scale creates depth perception",
        "note": "More gradual than scaleX to maintain readability"
      },
      "width_calculation": {
        "formula": "Math.round(itemWidth * scaleX)",
        "purpose": "Calculate final width based on scale for consistent sizing",
        "type": "Derived from scaleX interpolation"
      }
    },
    "translation_effect": {
      "pattern": "Horizontal translation to create card stacking",
      "input_range": "[index-3, index-2, index-1, index, index+1, index+2, index+3] * itemWidth",
      "output_range": [
        "-itemWidth * 1.9",
        "-itemWidth / 0.93",
        "-itemWidth / 3.3",
        "0",
        "itemWidth / 3.3",
        "itemWidth / 0.93",
        "itemWidth * 1.9"
      ],
      "effect": "Items shift horizontally creating coverflow stacking appearance",
      "center_item": "translateX: 0 (no translation)",
      "key_insight": "Asymmetric translation values create visual separation between cards"
    },
    "border_radius_animation": {
      "input_range": "[MAX_TRANSLATE_Y + 50, MAX_TRANSLATE_Y]",
      "output_range": "[25, 15]",
      "max_radius": 25,
      "center_radius": 15,
      "effect": "Border radius reduces when item centered for emphasis",
      "purpose": "Visual emphasis on active/centered item",
      "note": "Subtle detail that enhances focus on center card"
    },
    "opacity_fade": {
      "input_range": "[index-3-100, index-3, index-2, index-1, index, index+1, index+2, index+3, index+3+100]",
      "output_range": "[0, 1, 1, 1, 1, 1, 1, 1, 0]",
      "extrapolation": "CLAMP",
      "effect": "Items fade in/out at carousel edges",
      "transition_zone": "100px before/after the 3-item visible range",
      "purpose": "Smooth appearance/disappearance of items"
    },
    "seven_point_interpolation": {
      "pattern": "Seven input/output values for each interpolation",
      "range": "Â±3 items from center (index-3 to index+3)",
      "benefit": "Smooth transitions across visible range with gradual falloff",
      "visible_range": "~7 items simultaneously affected by animations",
      "key_insight": "Wide interpolation range ensures smooth transitions between states"
    }
  },
  "reanimated_patterns": {
    "scroll_tracking": {
      "hook": "useScrollViewOffset(animatedRef)",
      "ref": "useAnimatedRef<any>()",
      "returns": "SharedValue<number>",
      "purpose": "Track scroll position on UI thread without bridge crossing",
      "worklet": true,
      "performance": "No JS thread involvement for scroll position updates"
    },
    "useAnimatedStyle": {
      "component": "CarouselItem",
      "calculations": [
        "scaleX interpolation",
        "scaleY interpolation",
        "translateX interpolation",
        "borderRadius interpolation",
        "opacity interpolation",
        "width calculation (itemWidth * scaleX)"
      ],
      "dependencies": [
        "scrollOffset",
        "inputRange"
      ],
      "transform_array": [
        "{ translateX }",
        "{ scaleY }"
      ],
      "note": "ScaleX applied as width property for better control"
    },
    "input_range_calculation": {
      "pattern": "Per-item input range based on index and width",
      "formula": [
        "(index - 3) * itemWidth",
        "(index - 2) * itemWidth",
        "(index - 1) * itemWidth",
        "index * itemWidth",
        "(index + 1) * itemWidth",
        "(index + 2) * itemWidth",
        "(index + 3) * itemWidth"
      ],
      "purpose": "Map scroll position to item-specific animation states",
      "dependencies": [
        "index",
        "itemWidth"
      ],
      "recalculation": "Computed once per item, stable across renders"
    },
    "interpolate_usage": {
      "instances": 5,
      "properties": [
        "scaleX",
        "scaleY",
        "translateX",
        "borderRadius",
        "opacity"
      ],
      "common_config": {
        "extrapolation": "Extrapolation.CLAMP (where specified)",
        "input_source": "scrollOffset.value",
        "worklet_context": true
      }
    },
    "useCallback": {
      "renderItem": {
        "dependencies": [
          "scrollOffset"
        ],
        "purpose": "Stable renderItem function for FlatList optimization",
        "pattern": "Wraps CarouselItem component creation",
        "benefit": "Prevents FlatList re-renders when scrollOffset changes"
      }
    }
  },
  "flatlist_configuration": {
    "horizontal": {
      "value": true,
      "effect": "Horizontal scrolling carousel"
    },
    "pagingEnabled": {
      "value": true,
      "effect": "Snap to page boundaries on scroll end"
    },
    "snapToInterval": {
      "value": "ItemWidth (160)",
      "effect": "Snaps to individual items with precise alignment",
      "calculation": "Matches item width for perfect snapping"
    },
    "decelerationRate": {
      "value": "fast",
      "effect": "Quick deceleration for responsive snapping"
    },
    "showsHorizontalScrollIndicator": {
      "value": false,
      "effect": "Clean UI without scroll indicators"
    },
    "contentContainerStyle": {
      "alignItems": "center",
      "paddingHorizontal": "calculated dynamically",
      "purpose": "Center first and last items in viewport"
    },
    "padding_calculation": {
      "formula": "Math.round((windowWidth - ItemWidth) / 2)",
      "purpose": "Centers items horizontally when scrolled to edges",
      "responsive": true,
      "depends_on": "useWindowDimensions()"
    }
  },
  "component_patterns": {
    "item_dimensions": {
      "width": "160px (ItemWidth constant)",
      "height": "Calculated from aspect ratio (4:3)",
      "aspect_ratio": "4 / 3",
      "image_sizing": "{ width: itemWidth, aspectRatio: 4/3 }"
    },
    "ref_forwarding": {
      "hook": "useAnimatedRef<any>()",
      "passed_to": "Animated.FlatList ref prop",
      "usage": "useScrollViewOffset(animatedRef)",
      "pattern": "Reanimated ref for scroll tracking"
    },
    "renderItem_pattern": {
      "wrapped_in": "useCallback",
      "parameters": "{ item, index }",
      "returns": "CarouselItem component",
      "props_passed": [
        "image",
        "index",
        "scrollOffset",
        "itemWidth"
      ],
      "key": "Implicit from FlatList (item index)"
    },
    "responsive_layout": {
      "hook": "useWindowDimensions()",
      "calculated_values": [
        "paddingHorizontal"
      ],
      "benefit": "Works on all screen sizes",
      "adaptation": "Dynamic padding based on screen width"
    }
  },
  "mathematical_algorithms": {
    "interpolation_math": {
      "function": "interpolate(value, inputRange, outputRange, extrapolation?)",
      "linear_interpolation": "output = outputStart + (value - inputStart) / (inputEnd - inputStart) * (outputEnd - outputStart)",
      "clamping": "Extrapolation.CLAMP prevents values outside output range",
      "seven_point_curve": "Creates smooth S-curve across 7 discrete points"
    },
    "scale_width_relationship": {
      "scaleX_to_width": "width = itemWidth * scaleX",
      "example_center": "160 * 1 = 160px (full width)",
      "example_side": "160 * 0.2 = 32px (80% reduction)",
      "example_far": "160 * 0.1 = 16px (90% reduction)",
      "rounding": "Math.round() for pixel-perfect rendering"
    },
    "scroll_position_mapping": {
      "pattern": "Scroll offset (pixels) â item index â animation state",
      "formula": "index * itemWidth = scroll position where item is centered",
      "example": "Item 0 centered at 0px, item 1 at 160px, item 2 at 320px",
      "interpolation": "Smooth transition between these discrete positions"
    },
    "translation_ratios": {
      "far_items": "Â±itemWidth * 1.9 (large offset)",
      "mid_items": "Â±itemWidth / 0.93 â Â±1.075 * itemWidth (slight offset)",
      "near_items": "Â±itemWidth / 3.3 â Â±0.303 * itemWidth (small offset)",
      "center": "0 (no offset)",
      "asymmetry": "Creates visual separation and depth"
    },
    "padding_calculation_math": {
      "formula": "(windowWidth - ItemWidth) / 2",
      "purpose": "Equal padding on both sides",
      "example": "Screen 390px wide: (390 - 160) / 2 = 115px padding",
      "rounding": "Math.round() for consistent pixel values"
    }
  },
  "performance_optimizations": {
    "useScrollViewOffset": {
      "benefit": "Scroll tracking on UI thread, no bridge crossing",
      "vs_onScroll": "More performant than onScroll event handler",
      "worklet": "All calculations run on UI thread",
      "update_frequency": "Every frame during scroll"
    },
    "useCallback_renderItem": {
      "benefit": "Prevents FlatList re-render on scrollOffset change",
      "dependencies": [
        "scrollOffset"
      ],
      "stable_reference": "FlatList doesn't re-render when scrollOffset updates",
      "critical": "Important for smooth scrolling performance"
    },
    "interpolate_efficiency": {
      "worklet_context": "All interpolations run on UI thread",
      "native_performance": "Native-level calculation speed",
      "caching": "Reanimated caches interpolation configurations",
      "benefit": "60fps smooth animations"
    },
    "image_caching": {
      "component": "expo-image",
      "cachePolicy": "memory-disk",
      "contentFit": "cover",
      "benefit": "Images cached for instant rendering on scroll",
      "performance": "Reduces network requests and memory usage"
    },
    "snapToInterval": {
      "benefit": "Native scroll snapping, no JavaScript calculations",
      "performance": "Handled by native scroll view",
      "precision": "Exact item width for perfect alignment"
    },
    "transform_optimization": {
      "pattern": "Minimal transform array [translateX, scaleY]",
      "scaleX_as_width": "Applied as width property for better control",
      "benefit": "Reduces transform calculations",
      "note": "Fewer transforms = better performance"
    },
    "extrapolation_clamp": {
      "usage": "Extrapolation.CLAMP on most interpolations",
      "benefit": "Prevents unnecessary calculations outside range",
      "performance": "Values capped at min/max, no extrapolation math"
    }
  },
  "visual_design": {
    "color_scheme": {
      "background": "#fff (white)",
      "container_bg": "#fff (white)",
      "card_shadow": "Shadow effects on cards",
      "image_content": "Dynamic based on images"
    },
    "card_styling": {
      "border_radius": "5-25px (dynamic based on position)",
      "border_curve": "continuous",
      "overflow": "hidden",
      "shadow": {
        "shadowColor": "#000",
        "shadowOffset": "{ width: 0, height: 2 }",
        "shadowOpacity": 0.15,
        "shadowRadius": 3.84
      },
      "aspect_ratio": "4:3",
      "image_fit": "cover"
    },
    "layout": {
      "container_height": "250px (demo)",
      "item_width": "160px",
      "item_height": "120px (from 4:3 aspect ratio)",
      "alignment": "Centered vertically and horizontally"
    },
    "depth_cues": [
      "Scale (primary depth cue)",
      "Horizontal translation (card stacking)",
      "Opacity fade (atmospheric perspective)",
      "Border radius change (focus indicator)",
      "Shadow (elevation cue)"
    ],
    "continuous_border_curve": {
      "property": "borderCurve: 'continuous'",
      "platform": "iOS",
      "effect": "Apple-style squircle corners",
      "benefit": "Premium, native-like appearance"
    }
  },
  "layout_and_positioning": {
    "container_hierarchy": {
      "level_1": "Main container (flex: 1, centered, white background)",
      "level_2": "Coverflow container (height: 250, centered)",
      "level_3": "Animated.FlatList (horizontal, paging enabled)",
      "level_4": "CarouselItem wrapper (width: ItemWidth)",
      "level_5": "Animated card view (dynamic width from scaleX)",
      "level_6": "Image component (contentFit: cover)"
    },
    "absolute_positioning": {
      "none": "All items flow naturally in FlatList",
      "pattern": "Relative positioning with transform animations"
    },
    "centering_strategy": {
      "horizontal": "contentContainerStyle paddingHorizontal",
      "vertical": "Container alignItems: center, justifyContent: center",
      "item_centering": "Transform and scale keep items visually centered"
    }
  },
  "use_cases": {
    "primary": [
      "Image galleries with coverflow effect",
      "Product carousels (e-commerce)",
      "Media browsing (music albums, movie posters)",
      "Feature showcases",
      "Onboarding slides with visual emphasis"
    ],
    "secondary": [
      "Portfolio showcases",
      "Card-based navigation",
      "3D carousel menus",
      "Interactive presentations",
      "Visual content browsers"
    ],
    "design_patterns": [
      "Apple-style carousels",
      "iTunes-inspired coverflow",
      "3D card galleries",
      "Horizontal scroll showcases",
      "Focus-based navigation"
    ],
    "real_world_inspiration": [
      "Apple Music album browser",
      "iTunes coverflow view",
      "App Store featured apps",
      "Netflix horizontal carousels",
      "Google Photos albums"
    ]
  },
  "code_quality": {
    "typescript": {
      "coverage": "Full TypeScript with explicit types",
      "type_definitions": [
        "CoverFlowCarouselProps",
        "CarouselItemProps"
      ],
      "type_imports": [
        "SharedValue"
      ],
      "prop_validation": "Explicit prop types for all components"
    },
    "component_architecture": {
      "separation": "Clear separation between demo, carousel logic, and item rendering",
      "reusability": "CoverFlowCarousel is reusable with images prop",
      "composition": "Clean prop drilling, focused responsibilities"
    },
    "constants": {
      "ItemWidth": 160,
      "Images": "Array of 11 Unsplash image URLs",
      "naming": "Clear, descriptive constant names",
      "organization": "Separate constants.ts file"
    },
    "documentation": {
      "inline_comments": [
        "Detailed explanation of interpolation logic (lines 38-52)",
        "Scale interpolation breakdown (lines 53-58)",
        "Border radius interpolation notes (lines 85-97)",
        "Opacity fade explanation (lines 99-112)",
        "Multi-point interpolation documentation"
      ],
      "interpolation_examples": "Code comments with concrete value examples",
      "educational_value": "Excellent learning resource for interpolation patterns"
    },
    "best_practices": [
      "useCallback for renderItem optimization",
      "Responsive padding calculation",
      "Clean prop typing",
      "Separation of concerns",
      "Descriptive variable names (scaleX, translateX, borderRadius)",
      "Extrapolation.CLAMP for safety"
    ]
  },
  "known_limitations": {
    "fixed_item_width": {
      "issue": "ItemWidth hardcoded to 160px",
      "impact": "Not responsive to screen size variations",
      "improvement": "Could be calculated as percentage of screen width"
    },
    "image_aspect_ratio": {
      "issue": "4:3 aspect ratio hardcoded",
      "limitation": "All images must work with this ratio",
      "improvement": "Could be configurable via props"
    },
    "interpolation_values": {
      "issue": "Scale and translation values are hardcoded",
      "customization": "No props to adjust coverflow intensity",
      "improvement": "Could expose animation intensity props"
    },
    "seven_item_range": {
      "design": "Animations affect Â±3 items from center",
      "limitation": "Fixed visible range",
      "improvement": "Could be dynamic based on screen size"
    },
    "no_vertical_carousel": {
      "limitation": "Only horizontal orientation supported",
      "improvement": "Could create vertical variant"
    },
    "ref_type": {
      "issue": "useAnimatedRef<any>() uses 'any' type",
      "impact": "Loses type safety for ref",
      "improvement": "Could use Animated.FlatList type"
    }
  },
  "potential_improvements": {
    "customization": [
      "Configurable item width (responsive or prop)",
      "Adjustable scale intensity",
      "Custom translation distances",
      "Configurable visible range (Â±3 items)",
      "Adjustable border radius values",
      "Theme/color props"
    ],
    "features": [
      "Vertical carousel variant",
      "Auto-scroll/autoplay mode",
      "Dots/pagination indicators",
      "Current index callback",
      "onItemPress interaction",
      "Custom renderItem for flexible content",
      "Infinite scroll support",
      "Dynamic item sizing"
    ],
    "animations": [
      "Rotation on center item",
      "Color overlay for side items",
      "Parallax effect on images",
      "Elastic bounce on edges",
      "Velocity-based animations",
      "Magnetic snapping threshold"
    ],
    "performance": [
      "Virtualization for large datasets",
      "Lazy image loading",
      "Progressive image loading",
      "Optional quality modes"
    ],
    "accessibility": [
      "Screen reader support",
      "Keyboard navigation (web)",
      "Focus management",
      "Reduced motion support",
      "Alternative list view mode"
    ]
  },
  "key_insights": {
    "seven_point_interpolation": "Seven interpolation points create smooth, professional coverflow effect",
    "scaleX_as_width": "Applying scaleX as width property provides better control than transform scale",
    "asymmetric_translation": "Non-uniform translation values create realistic card stacking",
    "scroll_offset_tracking": "useScrollViewOffset eliminates bridge crossing for 60fps performance",
    "responsive_padding": "Dynamic padding calculation ensures consistent centering across devices",
    "border_radius_detail": "Subtle border radius animation adds polish and focus to center item",
    "opacity_transition_zone": "Extended opacity range (Â±100px) creates smooth fade in/out",
    "continuous_curves": "borderCurve: 'continuous' adds Apple-like premium feel",
    "snap_precision": "snapToInterval matching ItemWidth ensures perfect alignment"
  },
  "learning_opportunities": {
    "for_beginners": [
      "Animated.FlatList basics",
      "Horizontal scrolling implementation",
      "useCallback optimization",
      "Basic interpolation concepts",
      "Image component usage"
    ],
    "for_intermediate": [
      "useScrollViewOffset for scroll tracking",
      "Multi-point interpolation patterns",
      "Transform animations (translateX, scaleY)",
      "Responsive layout calculations",
      "FlatList optimization (snapToInterval, paging)",
      "useAnimatedStyle patterns"
    ],
    "for_advanced": [
      "Seven-point interpolation curves",
      "Performance optimization strategies",
      "Asymmetric value distributions for visual effects",
      "Coordinate coverflow animations",
      "Worklet-based scroll handling",
      "Scale vs width for responsive sizing",
      "Extrapolation control"
    ]
  },
  "related_patterns": {
    "similar_animations": [
      "Apple Music coverflow",
      "iTunes album browser",
      "3D carousel effects",
      "Card stack animations",
      "Focus-based carousels"
    ],
    "interaction_patterns": [
      "Horizontal scrolling galleries",
      "Paging carousels",
      "Snap-to-item scrolling",
      "Focus indicators",
      "Card browsers"
    ],
    "animation_techniques": [
      "Multi-point interpolation",
      "Scroll-based animations",
      "Scale and translation combinations",
      "Depth simulation with transforms",
      "Opacity-based focus"
    ]
  },
  "testing_considerations": {
    "visual_tests": [
      "Cards scale smoothly during scroll",
      "Translation creates proper stacking effect",
      "Border radius animates correctly",
      "Opacity fades at edges",
      "Shadow renders on all items",
      "Images load and display correctly"
    ],
    "interaction_tests": [
      "Scroll gestures work smoothly",
      "Snapping aligns to items precisely",
      "Paging feels natural",
      "Fast flicks work correctly",
      "Edge items are accessible"
    ],
    "performance_tests": [
      "Maintains 60fps during scroll",
      "No frame drops on low-end devices",
      "Memory stable with many images",
      "Smooth on both iOS and Android",
      "Image caching works efficiently"
    ],
    "edge_cases": [
      "Single item in carousel",
      "Two items in carousel",
      "Very small screens",
      "Very large screens (tablets)",
      "Different aspect ratio screens",
      "Rapid scrolling",
      "Network-delayed images"
    ],
    "cross_platform": [
      "iOS continuous border curves",
      "Android shadow rendering",
      "Different screen densities",
      "Various iOS/Android versions"
    ]
  },
  "accessibility_considerations": {
    "current_state": {
      "screen_readers": "Limited support, no labels",
      "keyboard_navigation": "Not applicable (mobile-first)",
      "reduced_motion": "No prefers-reduced-motion support",
      "focus_management": "Not implemented"
    },
    "recommendations": [
      "Add accessibilityLabel to carousel items",
      "Announce current item index to screen readers",
      "Support reduced motion (disable animations, show list view)",
      "Add semantic role information",
      "Announce when scrolling between items",
      "Provide alternative navigation method",
      "Ensure sufficient touch target size (current: 160x120px is good)"
    ]
  },
  "comparison_to_similar_animations": {
    "vs_flat_carousel": {
      "this_approach": "3D coverflow with scale and translation",
      "alternative": "Simple horizontal scroll",
      "benefits": "More engaging, visual hierarchy, focus on center item",
      "tradeoffs": "More complex, subtle performance cost"
    },
    "vs_card_stack": {
      "similarity": "Both use scale and translation",
      "difference": "Coverflow is horizontal scroll, stack is usually vertical swipe",
      "this_benefit": "Better for browsing, shows multiple items"
    },
    "vs_3d_scroll_transition": {
      "similarity": "Both use interpolation and scroll offset tracking",
      "difference": "This is horizontal carousel, that's vertical list with 3D rotation",
      "shared_pattern": "useScrollViewOffset for performance"
    }
  },
  "bundle_size_impact": {
    "code_size": "~210 lines total (main: 30, carousel: 57, item: 100, constants: 13)",
    "dependencies": "Reanimated and expo-image likely already in project",
    "images": "11 Unsplash URLs (no bundle impact, loaded remotely)",
    "runtime_memory": "Minimal - one scrollOffset SharedValue, FlatList optimization",
    "estimated_impact": "< 10KB"
  },
  "performance_metrics": {
    "target_fps": 60,
    "runs_on": "UI thread (useScrollViewOffset worklet)",
    "expected_performance": "Smooth on all modern devices",
    "scroll_update_frequency": "Every frame",
    "animation_complexity": "Low-medium (multiple interpolations per item)",
    "critical_optimizations": [
      "useScrollViewOffset",
      "useCallback on renderItem",
      "Image caching",
      "Native snap scrolling",
      "Extrapolation.CLAMP"
    ]
  },
  "platform_considerations": {
    "ios": {
      "features": "All features supported",
      "performance": "Excellent",
      "border_curve": "continuous curves supported (squircle)",
      "shadows": "Native shadow support"
    },
    "android": {
      "features": "All features supported",
      "performance": "Excellent",
      "border_curve": "Fallback to regular border radius",
      "shadows": "Elevation-based shadows"
    },
    "web": {
      "compatibility": "Should work with react-native-web",
      "testing_needed": "Test scroll behavior and animations",
      "shadows": "CSS box-shadow"
    }
  },
  "tags": [
    "carousel",
    "coverflow",
    "horizontal-scroll",
    "3d-effect",
    "scale-animation",
    "interpolation",
    "flatlist",
    "reanimated",
    "scroll-animation",
    "snap-scrolling",
    "image-gallery",
    "expo-image",
    "paging",
    "translation",
    "apple-style",
    "focus-effect",
    "depth-effect",
    "smooth-scrolling"
  ],
  "content_hash": "180cca2ef0111f6ba8142b34e54f76df258a216c008bbe405e7174a0a1f50927",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.311Z",
  "last_validated": "2025-10-12T09:19:28.311Z"
}
