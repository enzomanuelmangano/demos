{
  "animation_name": "Selectable Grid List",
  "animation_slug": "selectable-grid-list",
  "description": "An advanced image grid selection component featuring gesture-based multi-selection with pan and tap gestures. Users can tap individual items, drag to select ranges, or swipe across the grid to batch-select items. The component supports auto-scrolling when dragging near edges, provides real-time selection feedback with animated borders and checkmarks, and includes a floating action button that displays the selected count. Built with React Native Gesture Handler and Reanimated for smooth 60fps performance on both UI and JS threads.",

  "main_features": [
    "4-column responsive grid layout with dynamic item sizing",
    "Tap gesture for single item selection/deselection",
    "Pan gesture for range selection by dragging across items",
    "Auto-scroll when dragging near top or bottom edges",
    "Animated border and badge indicators for selected items",
    "Floating action button with selection count",
    "Reset functionality to clear all selections",
    "Efficient index tracking with Set data structures",
    "Pending vs committed selection states during gestures",
    "Smooth spring animations for visual feedback",
    "Image loading with expo-image (memory-disk caching)",
    "Optimized FlatList with performance settings"
  ],

  "file_structure": {
    "entries": {
      "index.tsx": "Main container component with grid configuration and floating button"
    },
    "components": {
      "SelectableGridList/index.tsx": "Core grid list with gesture handling and selection logic",
      "SelectableGridList/utils.ts": "Utility functions for grid calculations and range generation",
      "SelectableListItem.tsx": "Individual grid item with image, border, and badge animations"
    },
    "hooks": [],
    "utils": {
      "SelectableGridList/utils.ts": "calculateGridItemIndex, generateNumbersInRange, sameElements"
    },
    "assets": [],
    "types": {
      "GridListRefType": "Ref type with reset method",
      "CustomRenderItemParams<T>": "Extended render item params with activeIndexes",
      "CustomRenderItem<T>": "Custom render function type",
      "GridListProps<T>": "Generic props for SelectableGridList"
    },
    "constants": {
      "constants.ts": "Color palette (primary #55D5FF, background #000)",
      "GridConfig": "Grid configuration (itemsPerRow: 4, internalPadding: 4)"
    }
  },

  "core_technologies": {
    "gestures": "react-native-gesture-handler",
    "animations": "react-native-reanimated",
    "images": "expo-image",
    "layout": "react-native-safe-area-context",
    "icons": "@expo/vector-icons",
    "list_rendering": "Animated.FlatList",
    "interactions": "pressto"
  },

  "packages_and_versions": {
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "usage": "Pan and tap gesture detection for grid selection",
      "components": ["GestureDetector", "Gesture"],
      "gestures": ["Gesture.Pan()", "Gesture.Tap()", "Gesture.Exclusive()"],
      "critical_feature": "Exclusive gesture composition for pan vs tap disambiguation",
      "performance_reason": "Native gesture handling with worklet support"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "usage": "Smooth animations for selection indicators and floating button",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedStyle",
        "useAnimatedRef",
        "useAnimatedReaction",
        "withSpring",
        "withTiming"
      ],
      "components": ["Animated.View", "Animated.FlatList", "Animated.Image"],
      "utilities": ["scrollTo", "scheduleOnRN"],
      "critical_feature": "UI thread gesture handling with worklets and auto-scroll during pan"
    },
    "expo-image": {
      "version": "~3.0.8",
      "component": "Image",
      "usage": "Optimized image loading with caching for grid items",
      "features": [
        "memory-disk cache policy",
        "recyclingKey for list optimization",
        "contentFit='cover'",
        "100ms transition"
      ],
      "critical_feature": "Efficient image recycling in FlatList with memory-disk caching"
    },
    "react-native-redash": {
      "version": "^18.1.4",
      "component": "ReText",
      "usage": "UI thread text updates for selection count display",
      "critical_feature": "Renders derived value text without JS thread crossing"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "component": "PressableOpacity",
      "usage": "Floating action button with opacity animation on press"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "components": ["AntDesign", "MaterialIcons"],
      "icons_used": ["check (AntDesign)", "clear (MaterialIcons)"],
      "usage": "Badge checkmark and reset button icon"
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "hooks": ["useSafeAreaInsets"],
      "usage": "Top padding for notched devices"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "function": "scheduleOnRN",
      "usage": "Schedule JS thread callback from UI thread (onSelectionChange)",
      "critical_feature": "Bridge-free communication between UI and JS threads"
    }
  },

  "animation_techniques": {
    "selection_border_animation": {
      "pattern": "Animated border width and color based on active state",
      "shared_value": "isActive = useDerivedValue(() => activeIndexes.value.includes(index))",
      "border_width": "withTiming(isActive ? 4 : 0)",
      "border_color": "isActive ? Palette.primary : Palette.background",
      "border_radius": "internalBorderRadius = externalBorderRadius + activeBorderWidth.value",
      "effect": "4px cyan border appears smoothly when item selected",
      "key_insight": "Border radius adjusts dynamically to account for border width"
    },
    "badge_scale_animation": {
      "pattern": "Scale + fade animation for checkmark badge",
      "opacity": "withTiming(isActive ? 1 : 0)",
      "scale": "withSpring(isActive ? 1 : 0)",
      "initial_state": "scale: 0, opacity: 0",
      "final_state": "scale: 1, opacity: 1",
      "effect": "Badge pops in with spring physics, fades out with timing",
      "positioning": "Absolute positioned at bottom-left corner"
    },
    "floating_button_animation": {
      "pattern": "Vertical translation based on selection count",
      "translation": "translateY: withSpring(selectedIndexesAmount.value === 0 ? 150 : 0)",
      "trigger": "Shows when count > 0, hides when count === 0",
      "direction": "Slides up from bottom when selections exist",
      "spring_config": "Default spring for smooth entrance/exit"
    },
    "image_border_radius_sync": {
      "pattern": "Dynamic border radius that grows with border width",
      "calculation": "internalBorderRadius = externalBorderRadius + activeBorderWidth.value",
      "purpose": "Maintains visual consistency as border animates",
      "animated_style": "Applied to AnimatedImage component",
      "benefit": "Border and image corners stay aligned during animation"
    }
  },

  "gesture_patterns": {
    "pan_gesture_selection": {
      "gesture": "Gesture.Pan()",
      "onBegin": {
        "action": "Calculate initial selected index from touch position",
        "calculation": "calculateGridItemPosition({ x: event.x, y: event.y + contentOffsetY })"
      },
      "onUpdate": {
        "action": "Calculate range from initial to current index",
        "range_generation": "generateNumbersInRange(initialIndex, currentIndex)",
        "pending_state": "pendingIndexes stores temporary selections",
        "current_adjustment": "Remove pending items from currentActiveIndexes",
        "auto_scroll": "scrollTo when touch near edges (top or bottom)",
        "scroll_threshold": "itemSize from top, 2*itemSize from bottom",
        "scroll_speed": "itemSize * 0.15"
      },
      "onEnd": {
        "action": "Commit pending selections or toggle single item",
        "single_tap_detection": "finalPending.length === 1",
        "toggle_logic": "Add if not in set, remove if already present",
        "batch_commit": "Combine currentActiveIndexes + finalPending"
      },
      "onFinalize": {
        "action": "Clear pending state and initial index",
        "cleanup": "Reset pendingIndexes, pendingIndexesSet, initialSelectedIndex"
      }
    },
    "tap_gesture_selection": {
      "gesture": "Gesture.Tap()",
      "constraints": {
        "maxDeltaX": 5,
        "maxDeltaY": 5
      },
      "purpose": "Disambiguate tap from drag",
      "onStart": "Store initial selected index",
      "onEnd": "Toggle item at tapped index",
      "toggle_function": "Add/remove from Set, update SharedValue array"
    },
    "exclusive_gesture_composition": {
      "pattern": "Gesture.Exclusive(panGesture, tapGesture)",
      "behavior": "Try pan first, fall back to tap if pan fails",
      "disambiguation": "maxDelta constraints determine which gesture activates",
      "benefit": "Single tap works correctly without triggering pan"
    },
    "scroll_sync": {
      "pattern": "Track FlatList scroll offset in SharedValue",
      "onScroll": "contentOffsetY.value = event.nativeEvent.contentOffset.y",
      "usage": "Adjust touch coordinates for scrolled content",
      "calculation": "y + contentOffsetY.value for accurate item detection",
      "critical": "Enables correct item selection when list is scrolled"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "contentOffsetY",
        "type": "number",
        "initial": 0,
        "updates": "onScroll event",
        "purpose": "Track FlatList scroll position for gesture calculations"
      },
      {
        "name": "currentActiveIndexes",
        "type": "number[]",
        "initial": "[]",
        "updates": "On gesture end (commit)",
        "purpose": "Committed selections"
      },
      {
        "name": "pendingIndexes",
        "type": "number[]",
        "initial": "[]",
        "updates": "During pan gesture",
        "purpose": "Temporary selections during drag"
      },
      {
        "name": "currentActiveIndexesSet",
        "type": "Set<number>",
        "initial": "new Set()",
        "purpose": "Fast lookup for committed selections"
      },
      {
        "name": "pendingIndexesSet",
        "type": "Set<number>",
        "initial": "new Set()",
        "purpose": "Fast lookup for pending selections"
      },
      {
        "name": "initialSelectedIndex",
        "type": "number | null",
        "initial": "null",
        "updates": "On gesture begin",
        "purpose": "Starting point for range selection"
      },
      {
        "name": "selectedIndexesAmount",
        "type": "number",
        "scope": "container component",
        "updates": "On selection change callback",
        "purpose": "Drive floating button animation"
      }
    ],
    "derived_values": [
      {
        "name": "totalActiveIndexes",
        "calculation": "Array.from(new Set([...currentActiveIndexes, ...pendingIndexes]))",
        "dependencies": ["currentActiveIndexes", "pendingIndexes"],
        "purpose": "Combined view of all selected items (committed + pending)",
        "used_by": "renderItem for visual feedback"
      },
      {
        "name": "isActive",
        "scope": "SelectableListItem",
        "calculation": "activeIndexes.value.includes(index)",
        "dependencies": ["activeIndexes", "index"],
        "purpose": "Per-item active state for animations"
      },
      {
        "name": "activeBorderWidth",
        "calculation": "withTiming(isActive.value ? 4 : 0)",
        "dependencies": ["isActive"],
        "purpose": "Animated border width"
      },
      {
        "name": "internalBorderRadius",
        "calculation": "externalBorderRadius + activeBorderWidth.value",
        "dependencies": ["activeBorderWidth"],
        "purpose": "Dynamic border radius"
      },
      {
        "name": "selectedIndexesAmountText",
        "scope": "container component",
        "calculation": "selectedIndexesAmount.value.toString()",
        "purpose": "String conversion for ReText display"
      }
    ],
    "animated_reactions": [
      {
        "name": "selection_change_callback",
        "watches": "totalActiveIndexes.value",
        "comparison": "sameElements(updated, previous)",
        "callback": "scheduleOnRN(onSelectionChange, updatedIndexes)",
        "purpose": "Notify parent of selection changes without causing re-renders",
        "optimization": "Deep comparison prevents redundant callbacks"
      }
    ],
    "animated_styles": [
      {
        "name": "rImageStyle",
        "scope": "SelectableListItem",
        "properties": ["borderRadius", "borderWidth", "borderColor"],
        "dependencies": ["internalBorderRadius", "activeBorderWidth", "isActive"],
        "usage": "Animated image border"
      },
      {
        "name": "rBadgeStyle",
        "scope": "SelectableListItem",
        "properties": ["opacity", "transform: [{ scale }]"],
        "dependencies": ["isActive"],
        "usage": "Animated checkmark badge"
      },
      {
        "name": "rFloatingButtonStyle",
        "scope": "container component",
        "properties": ["transform: [{ translateY }]"],
        "dependencies": ["selectedIndexesAmount"],
        "usage": "Floating button visibility"
      }
    ],
    "useAnimatedRef": {
      "name": "flatListRef",
      "type": "Animated.FlatList<T>",
      "usage": "Reference for programmatic scrollTo calls",
      "critical": "Required for auto-scroll during pan gesture"
    }
  },

  "gesture_handler_integration": {
    "worklet_functions": {
      "calculateGridItemPosition": {
        "directive": "'worklet'",
        "purpose": "Calculate grid index from x/y coordinates",
        "runs_on": "UI thread",
        "parameters": ["x", "y"],
        "returns": "number (grid index)"
      },
      "toggleIndex": {
        "directive": "'worklet'",
        "purpose": "Toggle item in selection set",
        "runs_on": "UI thread",
        "logic": "Set add/delete, update SharedValue"
      }
    },
    "gesture_detector": {
      "component": "GestureDetector",
      "wraps": "Animated.FlatList",
      "gesture": "Exclusive(pan, tap)",
      "benefit": "Touch events handled on UI thread"
    },
    "scroll_integration": {
      "pattern": "scrollTo from onUpdate callback",
      "function": "scrollTo(flatListRef, 0, newOffset, false)",
      "animated": false,
      "trigger": "When touch near edges during pan",
      "bounds": {
        "upper": "contentOffsetY + itemSize",
        "lower": "contentOffsetY + containerHeight - 2*itemSize"
      }
    }
  },

  "data_structures_and_algorithms": {
    "set_based_selection": {
      "pattern": "Parallel arrays and Sets",
      "arrays": "currentActiveIndexes, pendingIndexes (for SharedValue)",
      "sets": "currentActiveIndexesSet, pendingIndexesSet (for fast lookup)",
      "benefit": "O(1) lookup, O(n) iteration",
      "synchronization": "Update both array and Set together"
    },
    "range_generation": {
      "function": "generateNumbersInRange(n, m)",
      "algorithm": "Array(max - min + 1).fill(0).map((_, i) => i + min)",
      "purpose": "Generate contiguous range of indexes",
      "example": "generateNumbersInRange(2, 5) → [2, 3, 4, 5]",
      "bidirectional": "Works with min/max in any order"
    },
    "grid_index_calculation": {
      "function": "calculateGridItemIndex({ x, y, itemWidth, itemHeight, itemsPerRow })",
      "algorithm": "row = floor(y / itemHeight), col = floor(x / itemWidth), index = row * itemsPerRow + col",
      "purpose": "Convert screen coordinates to grid index",
      "critical": "Accounts for scroll offset via y + contentOffsetY"
    },
    "array_comparison": {
      "function": "sameElements(arr1, arr2)",
      "algorithm": "Sort unique elements, join as string, compare",
      "purpose": "Deep equality check for arrays",
      "benefit": "Prevents redundant onSelectionChange callbacks"
    }
  },

  "performance_optimizations": {
    "flatlist_optimizations": {
      "removeClippedSubviews": true,
      "windowSize": 10,
      "maxToRenderPerBatch": 10,
      "updateCellsBatchingPeriod": 50,
      "initialNumToRender": 20,
      "getItemLayout": "Pre-calculated for instant scroll",
      "benefit": "Efficient rendering of large lists"
    },
    "image_recycling": {
      "recyclingKey": "index.toString()",
      "cachePolicy": "memory-disk",
      "contentFit": "cover",
      "transition": 100,
      "benefit": "Reuses image components during scroll"
    },
    "memo_optimization": {
      "component": "SelectableListItem",
      "wrapped_with": "memo",
      "benefit": "Prevents re-renders when activeIndexes reference doesn't change",
      "critical": "Important for smooth 60fps with 50+ items"
    },
    "useMemo_for_source": {
      "scope": "SelectableListItem",
      "value": "{ uri: `https://picsum.photos/200/200?key=${index}` }",
      "dependencies": ["index"],
      "benefit": "Stable image source prevents unnecessary reloads"
    },
    "useCallback_for_renderItem": {
      "dependencies": ["itemSize"],
      "benefit": "Stable function reference prevents FlatList re-renders"
    },
    "set_data_structures": {
      "pattern": "Use Sets for O(1) lookup instead of array.includes",
      "benefit": "Fast selection checks in gesture handlers",
      "critical": "Scales to large lists without performance degradation"
    },
    "ui_thread_execution": {
      "pattern": "All gesture calculations run as worklets",
      "functions": ["calculateGridItemPosition", "toggleIndex", "sameElements", "generateNumbersInRange"],
      "benefit": "No JS bridge crossing during gestures",
      "result": "60fps gesture handling"
    },
    "scheduleOnRN_for_callbacks": {
      "pattern": "Use scheduleOnRN for JS thread callbacks from UI thread",
      "usage": "onSelectionChange callback",
      "benefit": "Non-blocking communication between threads"
    }
  },

  "component_architecture": {
    "SelectableGridListContainer": {
      "type": "Demo container component",
      "responsibilities": [
        "Calculate responsive item sizes",
        "Track selection count for floating button",
        "Render SelectableGridList with configuration",
        "Render floating reset button",
        "Handle safe area padding"
      ],
      "state": {
        "selectedIndexesAmount": "SharedValue<number>",
        "gridListRef": "RefObject<GridListRefType>"
      },
      "grid_config": {
        "itemsPerRow": 4,
        "internalPadding": 4
      },
      "calculations": {
        "itemSize": "width / itemsPerRow",
        "selectedIndexesAmountText": "selectedIndexesAmount.value.toString()"
      }
    },
    "SelectableGridList": {
      "type": "Generic reusable component",
      "generic_type": "<T>",
      "responsibilities": [
        "Manage selection state (current + pending)",
        "Handle pan and tap gestures",
        "Auto-scroll during edge dragging",
        "Render FlatList with custom renderItem",
        "Expose reset method via ref",
        "Notify parent of selection changes"
      ],
      "imperative_handle": {
        "methods": ["reset()"],
        "purpose": "Allow parent to clear selections"
      },
      "props": {
        "itemSize": "number - Grid item dimensions",
        "containerHeight": "number - Optional container height",
        "onSelectionChange": "(indexes: number[]) => void",
        "gridListRef": "RefObject<GridListRefType>",
        "...FlatListProps": "Extends FlatList props"
      }
    },
    "SelectableListItem": {
      "type": "Memoized list item component",
      "memo": true,
      "responsibilities": [
        "Render image with caching",
        "Animate border on selection",
        "Show/hide checkmark badge",
        "Calculate dynamic border radius"
      ],
      "props": {
        "index": "number",
        "containerWidth": "number",
        "containerHeight": "number",
        "internalPadding": "number",
        "activeIndexes": "SharedValue<number[]>"
      }
    }
  },

  "layout_calculations": {
    "responsive_grid": {
      "itemSize": "screenWidth / itemsPerRow",
      "itemsPerRow": 4,
      "example": "On 375px screen: 93.75px per item",
      "dynamic": "Recalculates on window dimension changes"
    },
    "padding_structure": {
      "external": "internalPadding: 4px around each item",
      "internal": "No additional padding inside items",
      "border": "Up to 4px when selected",
      "total_spacing": "8px between items (4px + 4px)"
    },
    "border_radius_math": {
      "external": "10px (on container View)",
      "internal": "externalBorderRadius + activeBorderWidth.value",
      "selected_state": "10 + 4 = 14px",
      "unselected_state": "10 + 0 = 10px",
      "purpose": "Smooth border radius animation"
    }
  },

  "visual_design": {
    "color_palette": {
      "primary": "#55D5FF (cyan)",
      "background": "#000 (black)",
      "badge_background": "#55D5FF (cyan)",
      "badge_icon": "black",
      "floating_button_background": "#55D5FF (cyan)",
      "floating_button_icon": "black"
    },
    "selection_indicators": {
      "border": "4px solid cyan (#55D5FF)",
      "badge": "24x24px circle at bottom-left corner",
      "badge_icon": "16px check icon",
      "badge_radius": "12px (50% circle)"
    },
    "floating_button": {
      "dimensions": "96x64px",
      "borderRadius": "20px",
      "position": "absolute, bottom: 20, right: 20",
      "shadow": {
        "shadowColor": "black",
        "shadowOffset": "{ width: 0, height: 0 }",
        "shadowOpacity": 0.5,
        "shadowRadius": 20
      },
      "layout": "flexDirection: row, space-evenly",
      "contents": "Clear icon + count text"
    },
    "grid_layout": {
      "columns": 4,
      "spacing": "8px (4px padding per side)",
      "background": "black (#000)",
      "images": "Cover fit with rounded corners"
    }
  },

  "use_cases": {
    "primary": [
      "Photo gallery multi-select for deletion/sharing",
      "Product selection in e-commerce apps",
      "File manager multi-select operations",
      "Media library batch actions",
      "Contact list multi-select",
      "Email inbox multi-select"
    ],
    "secondary": [
      "Asset selection in design tools",
      "Playlist song selection",
      "Document multi-select",
      "Grid-based game selection",
      "Social media multi-post actions"
    ],
    "real_world_examples": [
      "iOS Photos app multi-select",
      "Google Photos selection",
      "File managers (Files, Dropbox)",
      "Instagram multi-post selection",
      "Pinterest board organization"
    ],
    "design_patterns": [
      "Batch operations on grid items",
      "Range selection with drag",
      "Visual selection feedback",
      "Floating action buttons"
    ]
  },

  "code_quality": {
    "strengths": [
      "Full TypeScript with generic types",
      "Comprehensive gesture handling",
      "Efficient data structures (Sets for lookups)",
      "Well-separated concerns (utils, components, container)",
      "Worklet optimization for UI thread execution",
      "Imperative handle for programmatic control",
      "Memo optimization for list items",
      "Detailed inline comments explaining logic",
      "FlatList performance optimizations",
      "Clean component composition"
    ],
    "areas_for_improvement": [
      "Could extract magic numbers to constants (150 for button offset, 5 for tap delta)",
      "Auto-scroll speed (itemSize * 0.15) could be configurable",
      "Image URLs hardcoded (picsum.photos) - should be data-driven",
      "Missing accessibility labels and roles",
      "No error handling for edge cases (negative indexes, out of bounds)",
      "Could add haptic feedback on selection",
      "GridConfig could be passed as props instead of constant"
    ],
    "typescript_usage": {
      "generic_component": "<T> for type-safe list items",
      "type_definitions": [
        "CustomRenderItemParams<T>",
        "CustomRenderItem<T>",
        "GridListRefType",
        "GridListProps<T>",
        "SelectableListItemProps"
      ],
      "type_imports": "Separate type imports with 'type' keyword",
      "prop_types": "Explicit interface definitions",
      "strictness": "Strong typing throughout"
    },
    "documentation": {
      "inline_comments": "Excellent - explains complex logic",
      "worklet_directives": "All worklets properly marked",
      "type_documentation": "Clear interface definitions",
      "algorithm_explanations": "Utils have descriptive comments"
    }
  },

  "known_limitations": {
    "edge_case_handling": {
      "issue": "No bounds checking for calculated indexes",
      "scenario": "Touch outside grid could calculate negative or out-of-bounds index",
      "impact": "May select invalid indexes",
      "mitigation": "Grid usually fills screen, rare issue"
    },
    "fixed_item_count": {
      "issue": "Demo uses fixed 50 items",
      "limitation": "Component is generic and supports any count",
      "note": "Not actually a component limitation"
    },
    "image_urls": {
      "issue": "Demo uses hardcoded picsum.photos URLs",
      "limitation": "Real app needs data-driven image sources",
      "impact": "Demo only - component supports any source"
    },
    "auto_scroll_complexity": {
      "issue": "Auto-scroll triggers during pan but may be imprecise",
      "edge_case": "Fast dragging near edges may have timing issues",
      "mitigation": "scrollSpeed is conservative (itemSize * 0.15)"
    },
    "accessibility": {
      "missing": "No screen reader support",
      "no_labels": "Items lack accessibility labels",
      "no_announcements": "Selection changes not announced",
      "keyboard": "No keyboard navigation"
    },
    "selection_visualization": {
      "issue": "No visual feedback during range selection",
      "missing": "No preview of pending selections during drag",
      "current": "Only shows final selection on gesture end",
      "improvement": "Could show pending with different style"
    },
    "reset_confirmation": {
      "issue": "Reset button clears selections without confirmation",
      "missing": "No undo functionality",
      "impact": "Accidental resets lose user work"
    }
  },

  "potential_improvements": {
    "gesture_enhancements": [
      "Long press to enter selection mode",
      "Pinch gesture to change grid column count",
      "Swipe gestures on selected items for actions",
      "Double tap to select all in row",
      "Shake to deselect all",
      "Haptic feedback on selection/deselection"
    ],
    "visual_enhancements": [
      "Preview pending selections with different opacity",
      "Selection count badge on each item",
      "Animated selection wave effect across range",
      "Color customization props",
      "Different selection styles (highlight, overlay, scale)",
      "Selection animation variants",
      "Icon morph animations"
    ],
    "functionality_additions": [
      "Select all / deselect all methods",
      "Invert selection method",
      "Select by criteria (filter function)",
      "Undo/redo selection changes",
      "Selection history",
      "Multi-select with Shift+Click pattern",
      "Drag to reorder selected items",
      "Batch actions menu"
    ],
    "accessibility": [
      "VoiceOver/TalkBack support",
      "Accessibility labels for items",
      "Announce selection count changes",
      "Keyboard navigation (arrow keys)",
      "Focus indicators",
      "High contrast mode",
      "Reduce motion support"
    ],
    "performance": [
      "Virtualized rendering for 1000+ items",
      "Web worker for complex calculations",
      "Optimize Set operations",
      "Lazy load images",
      "Progressive image loading",
      "Thumbnail preview during scroll"
    ],
    "customization": [
      "Configurable column count",
      "Configurable item padding",
      "Custom selection indicators",
      "Custom floating button content",
      "Theme support",
      "Animation timing props",
      "Auto-scroll speed props"
    ],
    "edge_case_handling": [
      "Index bounds checking",
      "Empty list state",
      "Single item list",
      "Very long lists (1000+)",
      "Orientation change handling",
      "Network error states for images"
    ]
  },

  "key_insights": {
    "exclusive_gesture_critical": "Gesture.Exclusive with maxDelta constraints perfectly disambiguates tap vs pan",
    "pending_state_pattern": "Separating pending and committed selections enables clean gesture flow",
    "set_dual_structure": "Parallel arrays (for SharedValue) and Sets (for lookup) optimizes both rendering and logic",
    "scroll_offset_sync": "Tracking contentOffsetY in SharedValue enables accurate touch-to-grid mapping",
    "auto_scroll_thresholds": "Smart edge detection (1 itemSize top, 2 itemSize bottom) creates intuitive scroll behavior",
    "border_radius_math": "Dynamic border radius adjustment prevents visual artifacts during border animations",
    "worklet_everything": "Running all gesture logic as worklets achieves 60fps even with complex selection logic",
    "useAnimatedReaction_callbacks": "useAnimatedReaction + scheduleOnRN enables efficient UI-to-JS callbacks without re-renders",
    "image_recycling": "expo-image with recyclingKey and caching crucial for smooth FlatList scrolling",
    "derived_total": "useDerivedValue for totalActiveIndexes provides clean reactive combination of pending + committed"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Basic FlatList rendering",
      "Tap gesture handling",
      "Simple border animations",
      "useSharedValue basics",
      "Conditional rendering based on state"
    ],
    "for_intermediate": [
      "Pan gesture handling",
      "Gesture composition (Exclusive)",
      "useAnimatedRef for component references",
      "ScrollTo for programmatic scrolling",
      "useDerivedValue for computed values",
      "useAnimatedReaction for side effects",
      "Worklet functions and UI thread execution",
      "FlatList performance optimization",
      "expo-image caching strategies"
    ],
    "for_advanced": [
      "Complex gesture coordination (pan + tap + scroll)",
      "Auto-scroll during gesture",
      "Set-based selection algorithms",
      "UI thread to JS thread communication patterns",
      "Custom generic component architecture",
      "Imperative handle patterns with refs",
      "Dual data structure optimization (arrays + Sets)",
      "Grid coordinate to index calculations",
      "Deep equality comparison for arrays",
      "Memory-efficient list rendering strategies"
    ]
  },

  "comparison_to_similar_patterns": {
    "vs_drag_to_sort": {
      "similarity": "Both use pan gestures on grid items",
      "difference": "Selection vs reordering, range selection vs single item drag"
    },
    "vs_animated_grid_list": {
      "similarity": "Both render grid layouts",
      "difference": "Selection interaction vs layout animations"
    },
    "vs_ios_photos_app": {
      "similarity": "Similar multi-select UX pattern",
      "difference": "iOS uses native selection manager, this uses custom implementation"
    }
  },

  "testing_considerations": {
    "gesture_testing": [
      "Tap selects/deselects item",
      "Pan selects range of items",
      "Short pan doesn't trigger range select",
      "Long pan creates correct range",
      "Diagonal pan selects items along path",
      "Gesture near edges triggers auto-scroll",
      "Scroll during gesture calculates correct indexes"
    ],
    "selection_logic": [
      "Toggle adds unselected item",
      "Toggle removes selected item",
      "Range selection includes all items in range",
      "Overlapping ranges merge correctly",
      "Reset clears all selections",
      "onSelectionChange called with correct indexes",
      "Duplicate selections prevented"
    ],
    "animation_testing": [
      "Border animates smoothly on select",
      "Badge scales in on select",
      "Badge fades out on deselect",
      "Floating button slides in when count > 0",
      "Floating button slides out when count === 0",
      "Animations complete without stuttering"
    ],
    "performance_testing": [
      "60fps gesture handling with 50 items",
      "Smooth scrolling with 100+ items",
      "No jank during rapid selection changes",
      "Images load smoothly during scroll",
      "Memory usage stays reasonable with large lists"
    ],
    "edge_cases": [
      "Empty list (0 items)",
      "Single item list",
      "Very large list (500+ items)",
      "Rapid tap/pan gestures",
      "Touch outside grid bounds",
      "Orientation changes during selection",
      "Reset during gesture",
      "List scroll during selection"
    ]
  },

  "state_management": {
    "selection_state": {
      "committed": "currentActiveIndexes + currentActiveIndexesSet",
      "pending": "pendingIndexes + pendingIndexesSet",
      "combined": "totalActiveIndexes (derived)",
      "pattern": "Two-phase commit for smooth gesture UX"
    },
    "scroll_state": {
      "tracker": "contentOffsetY SharedValue",
      "updates": "onScroll callback",
      "usage": "Touch coordinate adjustment"
    },
    "gesture_state": {
      "initial_index": "initialSelectedIndex",
      "lifecycle": "Set onBegin, used in onUpdate, cleared onFinalize"
    },
    "ref_state": {
      "flatListRef": "useAnimatedRef for scrollTo",
      "gridListRef": "useImperativeHandle for reset method"
    }
  },

  "accessibility_considerations": {
    "current_state": "No accessibility features implemented",
    "recommendations": [
      "Add accessibilityLabel to grid items ('Image {index}, {selected ? selected : not selected}')",
      "Add accessibilityRole='checkbox' to items",
      "Add accessibilityState={{checked: isActive}} to items",
      "Announce selection count changes",
      "Add keyboard navigation (Tab, Space to select, Arrow keys to move)",
      "Support VoiceOver/TalkBack gestures",
      "Add accessibilityLabel to floating button ('Reset {count} selections')",
      "Provide alternative selection methods for users who can't use gestures",
      "Add focus indicators",
      "Ensure minimum touch target sizes (44x44pt)",
      "Test with screen readers"
    ]
  },

  "platform_considerations": {
    "ios": {
      "features": "All features fully supported",
      "performance": "Excellent native gesture handling",
      "gestures": "Standard iOS touch behavior",
      "images": "Efficient memory-disk caching"
    },
    "android": {
      "features": "All features fully supported",
      "performance": "Excellent native gesture handling",
      "gestures": "Standard Android touch behavior",
      "images": "Efficient memory-disk caching"
    },
    "web": {
      "compatibility": "Gesture handler supports web with pointer events",
      "performance": "Good but slightly less responsive than native",
      "considerations": "Mouse events vs touch events, no auto-scroll fallback"
    }
  },

  "tags": [
    "grid-list",
    "multi-select",
    "gesture-handler",
    "pan-gesture",
    "tap-gesture",
    "reanimated",
    "selection",
    "range-selection",
    "auto-scroll",
    "floating-button",
    "expo-image",
    "flatlist",
    "worklets",
    "ui-thread",
    "performance-optimized",
    "generic-component",
    "imperative-handle",
    "set-data-structure"
  ]
}
