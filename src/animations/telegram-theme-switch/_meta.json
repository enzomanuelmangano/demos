{
  "animation_name": "Telegram Theme Switch",
  "animation_slug": "telegram-theme-switch",
  "description": "A sophisticated theme switching animation inspired by Telegram's interface that creates a circular reveal transition between light and dark themes. The animation captures a snapshot of the current view using Skia's makeImageFromView, then renders an expanding circular clip path that reveals the new theme underneath. A Lottie animation of a sun/moon icon plays at the theme switch button position, synchronized with the circular reveal transition. Features React Context-based theme management, worklet-based gesture handling, and GPU-accelerated Skia rendering for smooth 60fps transitions.",

  "main_features": [
    "Circular reveal transition between light and dark themes",
    "View snapshot capture using Skia's makeImageFromView API",
    "Animated circular clip path with dynamic radius calculation",
    "Synchronized Lottie animation (sun/moon icon transition)",
    "Context-based theme management with nested providers",
    "React Navigation bottom tab bar integration",
    "Worklet-based gesture handling with react-native-worklets",
    "Dynamic center point calculation from button position",
    "Inverted clip path for bidirectional theme transitions",
    "Pythagorean theorem for maximum circle radius calculation",
    "Color palette system with light and dark color schemes",
    "Theme-aware component styling with useTheme hook",
    "Animation progress tracking with SharedValue",
    "Button opacity management during transition",
    "Safe area support for modern devices"
  ],

  "file_structure": {
    "entries": {
      "index.tsx": "Main component wrapper with theme providers, tab navigation, and screen rendering"
    },
    "components": {
      "theme-provider/index.tsx": "Theme context provider that manages color palettes based on current theme",
      "switch-theme/index.tsx": "Core theme switching provider with snapshot capture, circular reveal, and Lottie animation",
      "switch-theme/switch-theme-button.tsx": "Gesture-handled button that triggers theme transition with position measurement",
      "switch-theme/context.tsx": "Theme switching context with toggleTheme function and animation progress",
      "animated-lottie-view/index.tsx": "Animated wrapper for Lottie animation with Reanimated integration",
      "bottom-tab-bar/index.tsx": "Custom bottom navigation bar with animated opacity and icon rendering"
    },
    "hooks": {},
    "utils": {},
    "assets": {
      "switch-theme.json": "Lottie animation file for sun/moon icon transition (832 lines)"
    },
    "types": {},
    "constants": {
      "palette.ts": "Light and dark color palette definitions using Color library",
      "screens.ts": "Screen names configuration (Home, Search, Notifications, Message)"
    },
    "screens": {
      "home/index.tsx": "Empty home screen with theme-aware background",
      "search/index.tsx": "Search screen containing the SwitchThemeButton component"
    }
  },

  "core_technologies": {
    "rendering": "@shopify/react-native-skia",
    "animations": "react-native-reanimated",
    "lottie": "lottie-react-native",
    "gestures": "react-native-gesture-handler",
    "worklets": "react-native-worklets",
    "navigation": "react-native-safe-area-context",
    "colors": "color",
    "icons": "@expo/vector-icons"
  },

  "packages_and_versions": {
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "usage": "View snapshot capture and circular clip path rendering",
      "components": ["Canvas", "Group", "Image"],
      "utilities": ["Skia", "makeImageFromView"],
      "methods": ["Skia.Path.Make()", "addCircle()"],
      "critical_feature": "makeImageFromView to capture UI snapshot before theme transition",
      "performance_reason": "GPU-accelerated image rendering with clip path for smooth circular reveal"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "usage": "Animation orchestration, clip path radius, button opacity, Lottie progress",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedStyle",
        "useAnimatedProps",
        "useAnimatedRef",
        "withTiming",
        "measure"
      ],
      "components": ["Reanimated.View"],
      "critical_feature": "useDerivedValue with withTiming for reactive circular reveal animation on UI thread"
    },
    "lottie-react-native": {
      "version": "~7.3.1",
      "usage": "Sun/moon icon transition animation synchronized with theme switch",
      "components": ["LottieView"],
      "integration": "Wrapped with Animated.createAnimatedComponent for progress control",
      "animation_file": "switch-theme.json (832 lines)",
      "color_filters": "Dynamic white color filter for icon outline",
      "progress_control": "Synchronized with animationProgress SharedValue (0 to 1)"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "usage": "Tap gesture detection on theme switch button",
      "components": ["GestureDetector", "Gesture"],
      "pattern": "Gesture.Tap().onTouchesUp() for button interaction",
      "critical_feature": "onTouchesUp callback triggers view measurement and theme toggle"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "usage": "Schedule React Native work from UI thread worklet context",
      "functions": ["scheduleOnRN"],
      "critical_feature": "Bridge between UI thread gesture handling and React state updates",
      "pattern": "scheduleOnRN(toggleTheme, { center, style }) to invoke async theme toggle"
    },
    "color": {
      "version": "^4.2.3",
      "usage": "Color manipulation for light/dark palette generation",
      "methods": ["Color().lighten()", "Color().darken()", ".hex()"],
      "pattern": "Color('#17202A').lighten(0.15).hex() for card backgrounds"
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "components": ["SafeAreaProvider"],
      "hooks": ["useSafeAreaInsets"],
      "usage": "Safe area wrapper for notched device support"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "components": ["MaterialIcons"],
      "usage": "Bottom tab bar icons (home, search, notifications, message)",
      "icon_size": "28px",
      "color": "Dynamic based on theme text color"
    }
  },

  "animation_techniques": {
    "view_snapshot_capture": {
      "pattern": "Capture current UI as Skia image before theme change",
      "api": "makeImageFromView(viewRef)",
      "timing": "Called at start of theme toggle, before theme state change",
      "storage": "skImage = useSharedValue<SkImage | null>(null)",
      "cleanup": "Set to null after animation completes",
      "purpose": "Preserve old theme appearance during circular reveal transition",
      "key_insight": "Snapshot taken before theme change allows smooth visual transition"
    },
    "circular_reveal_transition": {
      "pattern": "Expanding circle reveals new theme underneath snapshot",
      "clip_path": "Skia.Path with addCircle() method",
      "radius_animation": "interpolate(clipPathRadiusScale.value, [0, 0.9], [minCircleRadius, maxCircleRadius])",
      "min_radius": "2px (starting point)",
      "max_radius": "Math.sqrt(yPosition ** 2 + xPosition ** 2) - Pythagorean theorem",
      "center": "Button position (pageX, pageY from measure())",
      "duration": "1000ms with linear easing",
      "effect": "Circle expands from button position to cover entire screen"
    },
    "max_radius_calculation": {
      "pattern": "Pythagorean theorem to calculate screen diagonal distance",
      "formula": "Math.sqrt(yPosition ** 2 + xPosition ** 2)",
      "yPosition": "Math.max(windowHeight - center.y, center.y) - distance to farthest vertical edge",
      "xPosition": "Math.max(windowWidth - center.x, center.x) - distance to farthest horizontal edge",
      "purpose": "Ensure circle covers entire screen from any button position",
      "key_insight": "Max of distances to edges ensures complete coverage regardless of button placement"
    },
    "inverted_clip_path": {
      "pattern": "invertClip boolean controls reveal direction",
      "light_to_dark": "invertClip = false (circle reveals dark theme)",
      "dark_to_light": "invertClip = true (circle shows light theme, rest shows dark)",
      "timing": "Set based on current theme before animation starts",
      "calculation": "invertClip.value = theme !== 'light'",
      "effect": "Bidirectional transition support for both theme directions"
    },
    "lottie_progress_sync": {
      "pattern": "Lottie animation progress synchronized with clip path animation",
      "shared_value": "animationProgress = useSharedValue(0)",
      "range": "0 to 1 (full animation range)",
      "animation": "withTiming(toValue, { duration: 1000, easing: Easing.linear })",
      "direction": "theme === 'light' ? 0 to 1 : 1 to 0",
      "animated_props": "useAnimatedProps(() => ({ progress: animationProgress.value }))",
      "effect": "Sun/moon transition synchronized with circular reveal"
    },
    "button_opacity_management": {
      "pattern": "Hide original button during transition, show at completion",
      "calculation": "opacity = isInvisible.value ? 0 : 1",
      "isInvisible": "reanimatedProgressValue.value > 0 && reanimatedProgressValue.value < 1",
      "timing": "Visible at progress 0 and 1, hidden in between",
      "purpose": "Avoid duplicate button appearance during transition",
      "key_insight": "Button hidden while animated copy plays Lottie animation"
    },
    "animated_button_positioning": {
      "pattern": "Floating absolute positioned button with Lottie animation",
      "position": "Absolute at measured button coordinates",
      "properties": {
        "left": "center.x",
        "top": "center.y",
        "width": "center.width (80px)",
        "height": "center.height (80px)"
      },
      "z_index": "1000 (above all content)",
      "opacity": "isAnimating.value ? 1 : 0",
      "pointer_events": "none (non-interactive during animation)"
    },
    "button_scale_animation": {
      "pattern": "Subtle scale animation on button press (prepared but minimal)",
      "shared_value": "scale = useSharedValue(1)",
      "animation": "withTiming(scale.value)",
      "current_implementation": "Always 1 (no scale change)",
      "potential": "Could be extended for press feedback"
    },
    "theme_state_timing": {
      "pattern": "Theme state changes before animation starts",
      "sequence": [
        "1. Capture snapshot of current theme",
        "2. Set invertClip based on current theme",
        "3. Change theme state (triggers re-render with new colors)",
        "4. Start animation (reveals new theme through circular transition)",
        "5. Cleanup snapshot after completion"
      ],
      "key_insight": "State changes immediately, animation provides visual bridge between states"
    },
    "canvas_absolute_overlay": {
      "pattern": "Canvas overlay with snapshot and clip path",
      "positioning": "StyleSheet.absoluteFillObject (covers entire screen)",
      "pointer_events": "none (non-interactive, allows touches to pass through)",
      "z_index": "Default (below animated button at z-index 1000)",
      "size": "Full window dimensions",
      "effect": "Transparent overlay that only shows clipped snapshot during transition"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "theme",
        "scope": "SwitchThemeProvider (React state, not SharedValue)",
        "type": "'light' | 'dark'",
        "initial": "'dark'",
        "updates": "setTheme during toggleTheme execution"
      },
      {
        "name": "animationProgress",
        "scope": "SwitchThemeProvider",
        "type": "SharedValue<number>",
        "initial": "0",
        "range": "0 to 1",
        "updates": "withTiming during theme toggle",
        "purpose": "Controls both Lottie progress and visibility"
      },
      {
        "name": "center",
        "scope": "SwitchThemeProvider",
        "type": "SharedValue<{ x, y, height, width }>",
        "initial": "{ x: 0, y: 0, height: 0, width: 0 }",
        "updates": "Set from measure() result when button pressed",
        "purpose": "Button position for circular reveal center and Lottie placement"
      },
      {
        "name": "skImage",
        "scope": "SwitchThemeProvider",
        "type": "SharedValue<SkImage | null>",
        "initial": "null",
        "updates": "Set from makeImageFromView(), cleared after animation",
        "purpose": "Stores snapshot of old theme during transition"
      },
      {
        "name": "isAnimating",
        "scope": "SwitchThemeProvider",
        "type": "SharedValue<boolean>",
        "initial": "false",
        "purpose": "Prevents multiple simultaneous theme transitions"
      },
      {
        "name": "invertClip",
        "scope": "SwitchThemeProvider",
        "type": "SharedValue<boolean>",
        "initial": "false",
        "calculation": "theme !== 'light' before animation",
        "purpose": "Controls circular reveal direction"
      },
      {
        "name": "switchThemeStyle",
        "scope": "SwitchThemeProvider",
        "type": "SharedValue<object>",
        "initial": "{}",
        "updates": "Flattened button style during toggle",
        "purpose": "Replicate button styling on animated overlay"
      },
      {
        "name": "scale",
        "scope": "SwitchThemeButton",
        "type": "SharedValue<number>",
        "initial": "1",
        "purpose": "Button scale animation (currently unused)"
      }
    ],
    "derived_values": [
      {
        "name": "clipPathRadiusScale",
        "calculation": "withTiming(theme === 'light' ? 1 : 0, { duration: 1000 })",
        "dependencies": ["theme"],
        "type": "SharedValue<number>",
        "range": "0 to 1",
        "purpose": "Drives circular clip path radius expansion",
        "timing": "1000ms linear timing"
      },
      {
        "name": "clipPath",
        "calculation": "Skia.Path with addCircle using interpolated radius",
        "dependencies": ["center", "clipPathRadiusScale"],
        "type": "SkPath",
        "purpose": "Dynamic circular path for theme reveal",
        "radius": "interpolate(clipPathRadiusScale.value, [0, 0.9], [2, maxCircleRadius])"
      },
      {
        "name": "reanimatedProgressValue",
        "scope": "SwitchThemeButton",
        "calculation": "animationProgress.value (pass-through)",
        "purpose": "Access context animationProgress in button component"
      },
      {
        "name": "isInvisible",
        "scope": "SwitchThemeButton",
        "calculation": "reanimatedProgressValue.value > 0 && reanimatedProgressValue.value < 1",
        "type": "boolean",
        "purpose": "Button visibility during transition"
      },
      {
        "name": "isFocused",
        "scope": "BottomTabBar TabBarItem",
        "calculation": "focusedIndex.value === index",
        "type": "boolean",
        "purpose": "Tab bar icon opacity calculation"
      }
    ],
    "animated_styles": [
      {
        "name": "rStyle",
        "scope": "SwitchThemeProvider (animated button overlay)",
        "properties": {
          "left": "center.x",
          "top": "center.y",
          "width": "center.width",
          "height": "center.height",
          "opacity": "isAnimating.value ? 1 : 0",
          "backgroundColor": "transparent",
          "pointerEvents": "none"
        },
        "purpose": "Position and visibility of floating Lottie animation during transition"
      },
      {
        "name": "rAnimatedStyle",
        "scope": "SwitchThemeButton",
        "properties": {
          "opacity": "isInvisible.value ? 0 : 1"
        },
        "purpose": "Hide original button during transition"
      },
      {
        "name": "rContainerStyle",
        "scope": "SwitchThemeButton",
        "properties": {
          "transform": [{ "scale": "withTiming(scale.value)" }]
        },
        "purpose": "Button scale animation (currently always 1)"
      },
      {
        "name": "rStyle",
        "scope": "BottomTabBar TabBarItem",
        "properties": {
          "opacity": "withTiming(isFocused.value ? 1 : 0.3)"
        },
        "purpose": "Tab icon opacity based on focus state"
      }
    ],
    "animated_props": [
      {
        "name": "animatedProps",
        "scope": "SwitchThemeProvider AnimatedLottieView",
        "properties": {
          "progress": "animationProgress.value"
        },
        "purpose": "Control Lottie animation progress for sun/moon transition"
      },
      {
        "name": "animatedProps",
        "scope": "SwitchThemeButton AnimatedLottieView",
        "properties": {
          "progress": "animationProgress.value"
        },
        "purpose": "Control button Lottie progress (synced with provider)"
      }
    ],
    "measure_api": {
      "pattern": "measure(viewRef) to get button position and dimensions",
      "usage": "Inside Gesture.Tap().onTouchesUp() callback",
      "returns": "{ pageX, pageY, width, height }",
      "purpose": "Calculate circular reveal center point",
      "ref_type": "useAnimatedRef<Reanimated.View>()"
    },
    "worklet_scheduling": {
      "pattern": "scheduleOnRN to call async function from UI thread",
      "usage": "scheduleOnRN(toggleTheme, { center, style })",
      "reason": "toggleTheme is async (makeImageFromView returns Promise)",
      "bridge": "Connects UI thread gesture handling to async React operations"
    }
  },

  "performance_optimizations": {
    "animation_locking": {
      "pattern": "isAnimating SharedValue prevents concurrent transitions",
      "check": "if (isAnimating.value) return; at start of toggleTheme",
      "benefit": "Prevents race conditions and visual glitches from multiple simultaneous transitions",
      "cleanup": "Set to false in withTiming completion callback"
    },
    "useMemo_context_value": {
      "scope": "SwitchThemeProvider",
      "dependencies": [
        "center",
        "invertClip",
        "isAnimating",
        "skImage",
        "switchThemeStyle",
        "theme",
        "animationProgress"
      ],
      "benefit": "Context value only recalculated when dependencies change, prevents unnecessary consumer re-renders",
      "critical": "toggleTheme function reference stable due to SharedValue closures"
    },
    "useMemo_theme_colors": {
      "scope": "ThemeProvider",
      "dependencies": ["theme"],
      "calculation": "colors = theme === 'dark' ? DarkPalette : LightPalette",
      "benefit": "Color object reference stable when theme unchanged"
    },
    "snapshot_cleanup": {
      "pattern": "Clear skImage.value after animation completes",
      "timing": "In withTiming completion callback (finished === true)",
      "benefit": "Release memory from stored snapshot image",
      "size_impact": "Skia images can be large (screen width × height × 4 bytes per pixel)"
    },
    "canvas_pointer_events_none": {
      "pattern": "Canvas overlay has pointerEvents='none'",
      "benefit": "Touches pass through to UI below, no interaction blocking",
      "critical": "Prevents Canvas from intercepting touch events during and after animation"
    },
    "linear_easing": {
      "pattern": "Easing.linear for consistent animation speed",
      "benefit": "Predictable animation timing, matches Lottie progress linearly",
      "duration": "1000ms for complete transition"
    },
    "ui_thread_animations": {
      "pattern": "useDerivedValue with withTiming runs on UI thread",
      "benefit": "Smooth 60fps animation without JS thread blocking",
      "critical": "Circular reveal and Lottie progress animated entirely on UI thread"
    },
    "collapsable_false": {
      "pattern": "View with collapsable={false} for makeImageFromView",
      "reason": "Ensures view exists in native view hierarchy for snapshot capture",
      "location": "Main content container in SwitchThemeProvider"
    },
    "memo_TabBarItem": {
      "scope": "BottomTabBar",
      "pattern": "TabBarItem wrapped with React.memo",
      "benefit": "Prevents re-renders when other tabs change focus",
      "optimization": "Only re-renders when own props change"
    },
    "useCallback_onTapIcon": {
      "scope": "BottomTabBar",
      "dependencies": ["onTabPress"],
      "benefit": "Stable function reference prevents child re-renders"
    }
  },

  "use_cases": {
    "primary": [
      "Light/dark theme switching with visual transition",
      "Settings screens with theme toggle buttons",
      "Apps with dramatic theme change animations",
      "User preference panels with theme selection",
      "Onboarding flows demonstrating theme options"
    ],
    "real_world_examples": [
      "Telegram-style theme switching in messaging apps",
      "Social media apps with appearance settings",
      "Productivity apps with light/dark mode toggles",
      "E-commerce apps with display preferences",
      "News/reading apps with comfortable reading modes"
    ],
    "design_patterns": [
      "Circular reveal transitions",
      "Context-based theme management",
      "Snapshot-based UI transitions",
      "Synchronized icon animations",
      "Position-aware reveal animations"
    ],
    "advanced_implementations": [
      "Multi-theme systems (not just light/dark)",
      "Custom color palette selection with transitions",
      "Per-screen theme overrides with transitions",
      "Gesture-driven theme preview (drag to preview)",
      "Scheduled theme changes (auto dark mode at sunset)"
    ]
  },

  "code_quality": {
    "strengths": [
      "Comprehensive TypeScript coverage with explicit types",
      "Clean separation of concerns (ThemeProvider vs SwitchThemeProvider)",
      "Context-based architecture for theme management",
      "Detailed inline comments explaining complex logic",
      "Proper SharedValue usage for animation state",
      "Error handling for context usage outside providers",
      "Clean async/await pattern for snapshot capture",
      "Proper animation completion callbacks with cleanup",
      "Type-safe theme string literals ('light' | 'dark')",
      "Reusable AnimatedLottieView wrapper component",
      "Memoized context values for performance",
      "Well-structured file organization by feature"
    ],
    "typescript": {
      "coverage": "Full TypeScript with explicit types throughout",
      "type_definitions": [
        "Theme = 'light' | 'dark'",
        "ThemeColors = typeof DarkPalette",
        "ThemeContextType interface",
        "SwitchThemeProviderProps",
        "SwitchThemeButtonProps",
        "BottomTabBarProps (from React Navigation)"
      ],
      "type_imports": "Consistent use of 'type' keyword for type-only imports",
      "type_safety": "Strict typing on center object, style props, and context values"
    },
    "component_separation": {
      "theme_management": "Separate ThemeProvider (colors) and SwitchThemeProvider (animation)",
      "button_component": "Isolated SwitchThemeButton with gesture handling",
      "context_logic": "Dedicated context.tsx for type definitions",
      "screen_components": "Separate HomeScreen and SearchScreen",
      "navigation": "Dedicated BottomTabBar component",
      "wrapper": "AnimatedLottieView for Reanimated integration"
    },
    "constants_extraction": {
      "SWITCH_THEME_ANIMATION_DURATION": "1000ms exported constant",
      "MAX_THEME_ANIMATION_SIZE": "65px for Lottie dimensions",
      "DarkPalette": "Centralized dark theme colors",
      "LightPalette": "Centralized light theme colors",
      "ScreenNames": "Screen configuration with type safety"
    },
    "inline_documentation": {
      "comments": "Extensive comments explaining animation logic and sequences",
      "useMemo_explanation": "Comments describe performance benefits",
      "step_by_step": "Numbered sequence comments in toggleTheme function",
      "purpose_comments": "Each major code block has purpose explanation"
    },
    "areas_for_improvement": [
      "Magic numbers (80px, 65px) could be extracted to constants",
      "Color palette could support more than 2 themes (extensibility)",
      "toggleTheme function is quite long (90+ lines) - could be broken down",
      "Screen components are empty (demo limitation)",
      "No error handling for makeImageFromView failure",
      "Scale animation prepared but not used (incomplete feature)",
      "No accessibility labels on theme switch button",
      "Hard-coded animation duration (could be prop)",
      "No TypeScript strict mode evidence",
      "Could add JSDoc comments for exported functions"
    ]
  },

  "known_limitations": {
    "theme_options": {
      "issue": "Only supports light and dark themes",
      "limitation": "Boolean-based theme logic (light vs dark)",
      "scalability": "Adding third theme requires significant refactoring",
      "improvement": "Could use string-based theme system with theme registry"
    },
    "animation_interruption": {
      "issue": "Animation cannot be interrupted once started",
      "limitation": "isAnimating check prevents any interaction during 1000ms transition",
      "user_impact": "Users must wait for full animation completion",
      "improvement": "Could support animation cancellation or queuing"
    },
    "snapshot_memory": {
      "issue": "makeImageFromView creates full-screen image in memory",
      "memory_usage": "~3-12MB depending on screen size and pixel density",
      "limitation": "Could cause memory pressure on low-end devices",
      "duration": "Memory held for 1000ms animation duration",
      "improvement": "Could use lower resolution snapshot or compression"
    },
    "position_dependency": {
      "issue": "Animation center depends on button position measurement",
      "limitation": "Button must be rendered and measurable before transition",
      "failure_case": "measure() returns null if view not mounted - animation fails silently",
      "improvement": "Could add fallback center position (screen center)"
    },
    "lottie_color_filter": {
      "issue": "Color filter hard-coded to white (#fff)",
      "limitation": "Icon always white regardless of theme",
      "customization": "Cannot easily adapt to different color schemes",
      "improvement": "Could accept color prop or derive from theme"
    },
    "empty_screens": {
      "issue": "Home and Search screens are empty placeholders",
      "limitation": "Demo-only implementation showing tab navigation structure",
      "purpose": "Focus on theme switching, not app content"
    },
    "fixed_animation_size": {
      "issue": "MAX_THEME_ANIMATION_SIZE hard-coded to 65px",
      "limitation": "Cannot easily customize animation size",
      "improvement": "Could accept size prop on SwitchThemeButton"
    },
    "no_persistence": {
      "issue": "Theme preference not persisted across app restarts",
      "limitation": "Always starts with dark theme",
      "improvement": "Could integrate AsyncStorage or MMKV for persistence"
    },
    "accessibility": {
      "missing": "No accessibility labels on theme switch button",
      "screen_reader": "Button purpose not announced",
      "keyboard": "No keyboard navigation support",
      "motion_preference": "No respect for prefers-reduced-motion (always animates)"
    },
    "circular_interpolation_range": {
      "issue": "Interpolation uses [0, 0.9] instead of [0, 1]",
      "effect": "Circle reaches max radius at 90% progress, then holds",
      "reason": "Likely intentional for visual effect or timing",
      "documentation": "No comment explaining why 0.9 instead of 1.0"
    },
    "single_button_support": {
      "issue": "Only one theme switch button functional at a time",
      "limitation": "Multiple buttons share same context, last pressed wins",
      "improvement": "Context already supports multiple buttons via position parameter"
    }
  },

  "potential_improvements": {
    "interaction_enhancements": [
      "Haptic feedback on theme toggle",
      "Press scale animation on button (scale value exists but unused)",
      "Long press to preview theme without committing",
      "Swipe gesture for theme change",
      "Double tap for instant theme change (skip animation)",
      "Drag-based theme preview (drag button to reveal percentage)"
    ],
    "visual_refinements": [
      "Customizable reveal shapes (square, star, morph)",
      "Multiple Lottie animation options",
      "Particle effects during transition",
      "Color gradient during circular reveal edge",
      "Ripple effect from reveal center",
      "Button glow effect during animation",
      "Custom easing curves (elastic, bounce)",
      "Spring physics for reveal animation"
    ],
    "theme_system": [
      "Support for 3+ themes (not just light/dark)",
      "Theme persistence with AsyncStorage",
      "System theme preference detection (Appearance API)",
      "Scheduled theme changes (auto dark at night)",
      "Per-screen theme overrides",
      "Custom color palette creation",
      "Theme presets (Ocean, Forest, Sunset, etc.)",
      "Smooth color interpolation between themes"
    ],
    "customization_options": [
      "Configurable animation duration prop",
      "Custom Lottie animation source prop",
      "Reveal shape selection (circle, square, custom path)",
      "Easing function customization",
      "Button size prop",
      "Icon color customization",
      "Disable animation option for instant switching",
      "Custom color palettes as props"
    ],
    "accessibility": [
      "Add accessibilityLabel to SwitchThemeButton",
      "Add accessibilityHint ('Double tap to switch theme')",
      "accessibilityRole='button'",
      "Announce theme change to screen readers",
      "Respect prefers-reduced-motion (instant switch)",
      "Keyboard support (Space/Enter to toggle)",
      "High contrast mode support",
      "Minimum touch target size (44x44pt)"
    ],
    "functionality": [
      "Theme change event callbacks",
      "Animation progress callbacks",
      "Theme preview mode",
      "Undo/redo theme changes",
      "Theme history",
      "Default theme prop",
      "Controlled theme mode (external state)",
      "Theme transition queue (multiple rapid toggles)"
    ],
    "performance": [
      "Snapshot resolution reduction for large screens",
      "Image compression for snapshot",
      "GPU memory management",
      "Lazy load Lottie animation",
      "Memoize expensive calculations",
      "Debounce rapid theme toggles",
      "Cancel ongoing animation on interrupt",
      "Reuse snapshot for same theme direction"
    ],
    "code_improvements": [
      "Extract magic numbers to constants",
      "Break down toggleTheme function (90+ lines)",
      "Add error handling for makeImageFromView",
      "Add fallback center position if measure fails",
      "Add JSDoc comments for public API",
      "Implement scale animation (currently unused)",
      "Type-safe event callbacks",
      "Add prop types documentation",
      "Unit tests for theme logic",
      "E2E tests for animation sequence"
    ],
    "developer_experience": [
      "Export theme switching hook separately",
      "Provide headless theme provider option",
      "Document animation customization patterns",
      "Example with multiple theme buttons",
      "Theme debugging tools",
      "Animation performance metrics",
      "TypeScript strict mode compliance"
    ]
  },

  "key_insights": {
    "snapshot_based_transitions": "makeImageFromView enables smooth visual transitions by preserving old UI state during theme change",
    "pythagorean_radius": "Maximum circle radius calculation using Pythagorean theorem ensures full screen coverage from any button position",
    "theme_state_before_animation": "Changing theme state before animation allows new theme to render underneath snapshot during reveal",
    "inverted_clip_bidirectional": "invertClip boolean enables same animation code to work for both light→dark and dark→light transitions",
    "lottie_progress_sync": "Synchronized Lottie progress with clip radius creates cohesive sun/moon + reveal animation",
    "worklet_async_bridge": "scheduleOnRN bridges UI thread gesture handling with async snapshot capture on React thread",
    "measure_for_position": "measure() API provides exact button position for centered circular reveal effect",
    "context_nested_providers": "Nested providers (SwitchTheme → Theme) separate animation logic from color management",
    "opacity_hide_original": "Hiding original button during transition prevents visual duplication while showing animated overlay",
    "animation_locking": "isAnimating flag prevents race conditions from rapid button presses",
    "cleanup_memory": "Clearing snapshot after animation completion prevents memory leaks from retained images"
  },

  "learning_opportunities": {
    "for_beginners": [
      "React Context basics for theme management",
      "Light and dark color palette design",
      "Basic Reanimated animations with withTiming",
      "Gesture handling with react-native-gesture-handler",
      "Lottie animation integration",
      "Safe area handling for modern devices"
    ],
    "for_intermediate": [
      "View snapshot capture with Skia makeImageFromView",
      "Circular clip paths in Skia",
      "Context-based animation coordination",
      "Position measurement with measure() API",
      "Animated props for Lottie progress control",
      "SharedValue patterns for animation state",
      "Worklet-based async function calls",
      "Component composition with nested providers",
      "Theme switching architecture patterns",
      "Color manipulation with Color library"
    ],
    "for_advanced": [
      "Complex animation orchestration with multiple states",
      "Memory management for large image snapshots",
      "UI thread vs React thread coordination",
      "Performance optimization with animation locking",
      "Advanced clip path techniques",
      "Bidirectional animation with invertClip",
      "useDerivedValue for reactive path calculations",
      "Animation completion callbacks and cleanup",
      "Pythagorean theorem for dynamic radius calculation",
      "Bridge between worklet context and async operations",
      "Context value memoization strategies",
      "Skia Image API integration with Reanimated"
    ]
  },

  "tags": [
    "theme-switching",
    "circular-reveal",
    "skia",
    "snapshot",
    "lottie",
    "reanimated",
    "context",
    "light-dark-mode",
    "gesture-handler",
    "worklets",
    "clip-path",
    "view-capture",
    "telegram",
    "animation-orchestration",
    "pythagorean",
    "inverted-clip",
    "makeImageFromView",
    "measure-api",
    "bottom-navigation",
    "color-palette"
  ]
}
