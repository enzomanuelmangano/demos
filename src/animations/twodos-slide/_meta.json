{
  "animation_name": "Twodos Slide",
  "animation_slug": "twodos-slide",
  "description": "An elegant slide-to-unlock interaction featuring animated rotating squares with a friction-based slider. The animation combines a dual-layered square system with Skia-rendered squircle paths that progressively reveal as the user drags. Features haptic feedback at completion, spring physics with friction effect, and counter-rotating squares that scale dynamically during interaction.",

  "main_features": [
    "Friction-based drag slider with dynamic resistance",
    "Dual rotating square system (counter-rotation)",
    "Skia path animation with progress-based stroke reveal",
    "Squircle (super-ellipse) path rendering for smooth corners",
    "Haptic feedback at completion threshold",
    "Spring physics with overshoot clamping",
    "Dynamic friction calculation based on drag distance",
    "Real-time progress tracking (clamped and real)",
    "3D rotation around corner pivot point",
    "Scale transformation on primary square",
    "Worklet-based gesture handling for 60fps performance",
    "Debounced haptic feedback to prevent over-triggering"
  ],

  "file_structure": {
    "entries": {
      "index.tsx": "Main component orchestrating AnimatedSquares and FrictionSlider with progress synchronization"
    },
    "components": {
      "animated-squares/index.tsx": "Dual square system with Skia canvas, squircle path rendering, and counter-rotation",
      "friction-slider/index.tsx": "Pan gesture handler with friction effect and spring-based reset animation"
    },
    "hooks": {},
    "utils": {
      "haptic.ts": "Haptic feedback wrapper using expo-haptics",
      "draw-squircle.ts": "Mathematical squircle path generation with border smoothing (imported from react-native-squircle)",
      "draw-rrect-with-lines.ts": "Alternative rounded rectangle path builder (line-by-line construction, unused)"
    },
    "assets": {},
    "types": {
      "animated-squares/index.tsx": [
        "AnimatedSquaresProps"
      ],
      "friction-slider/index.tsx": [
        "FrictionSliderProps"
      ],
      "draw-squircle.ts": [
        "SquircleParams",
        "SquirclePathParams",
        "DrawSquirclePathParams"
      ],
      "draw-rrect-with-lines.ts": [
        "DrawRRectWithLinesParams"
      ]
    },
    "constants": {
      "animated-squares/index.tsx": [
        "strokeWidth (9)",
        "internalSquarePathPadding (30)",
        "externalBorderRadius (25)"
      ],
      "friction-slider/index.tsx": [
        "SpringMass (1.1)",
        "MaxTranslationFrictionThreshold (ScreenWidth / 8)",
        "MaxTranslationProgress (MaxTranslationFrictionThreshold * 1.8)",
        "MinFriction (1)",
        "MaxFriction (0.35)"
      ]
    }
  },

  "core_technologies": [
    "react-native-reanimated (animations, gestures)",
    "react-native-gesture-handler (pan gesture)",
    "@shopify/react-native-skia (canvas, path rendering)",
    "expo-haptics (tactile feedback)",
    "react-native-worklets (UI thread scheduling)",
    "lodash.debounce (haptic throttling)"
  ],

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "components": [
        "Animated.View"
      ],
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedStyle",
        "useAnimatedReaction",
        "withSpring",
        "cancelAnimation",
        "interpolate"
      ],
      "functions": [
        "clamp"
      ],
      "types": [
        "SharedValue",
        "Extrapolation"
      ],
      "critical_feature": "useAnimatedReaction for progress change callbacks and gesture-driven animations with friction effect"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": [
        "GestureDetector"
      ],
      "functions": [
        "Gesture.Pan()"
      ],
      "critical_feature": "Pan gesture with onBegin, onUpdate, onFinalize lifecycle for friction slider"
    },
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "components": [
        "Canvas",
        "Group",
        "Path"
      ],
      "functions": [
        "Skia.Path.Make()"
      ],
      "critical_feature": "Path start/end properties for progressive stroke reveal animation"
    },
    "expo-haptics": {
      "version": "~15.0.7",
      "functions": [
        "impactAsync",
        "ImpactFeedbackStyle.Light"
      ],
      "critical_feature": "Haptic feedback on unlock completion"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "functions": [
        "scheduleOnRN"
      ],
      "critical_feature": "Schedule non-worklet functions from UI thread (debounced haptic)"
    },
    "lodash.debounce": {
      "version": "^4.0.8",
      "functions": [
        "debounce"
      ],
      "critical_feature": "Prevent multiple haptic triggers (leading: true, trailing: false, wait: 1000ms)"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "components": [
        "AntDesign",
        "Entypo"
      ],
      "icons_used": [
        "arrow-right",
        "check"
      ]
    },
    "react-native": {
      "version": "0.81.4",
      "components": [
        "View",
        "Text",
        "StyleSheet",
        "Dimensions"
      ],
      "types": [
        "StyleProp",
        "ViewStyle"
      ]
    },
    "react": {
      "version": "19.1.0",
      "hooks": [
        "useMemo",
        "useCallback"
      ]
    }
  },

  "animation_techniques": [
    "Friction-based drag with interpolated resistance",
    "Dual spring animations (clamped and unclamped)",
    "Counter-rotating squares with different rotation multipliers",
    "Pivot point rotation (translate-rotate-translate pattern)",
    "Scale transformation with rotation for depth effect",
    "Progressive path stroke reveal (start/end properties)",
    "Squircle path rendering with mathematical border smoothing",
    "Context-based gesture tracking for continuous interaction",
    "Spring overshoot clamping for path progress",
    "Dynamic friction calculation based on translation distance",
    "Debounced callback execution from worklet context"
  ],

  "reanimated_patterns": [
    "useSharedValue for translateX state tracking",
    "contextX SharedValue for gesture continuity",
    "Dual SharedValues (translateX and progressTranslateX) for different behaviors",
    "useDerivedValue for progress conversion (translation to normalized)",
    "useAnimatedReaction for triggering callbacks on value changes",
    "useAnimatedStyle for rotation with multi-step transform array",
    "withSpring with custom mass and overshootClamping",
    "cancelAnimation on gesture begin for responsive interaction",
    "interpolate with Extrapolation.EXTEND for unbounded friction",
    "interpolate with Extrapolation.CLAMP for friction calculation",
    "clamp() for progress normalization",
    "worklet directive for convertTranslationToProgress",
    "scheduleOnRN for cross-thread debounced function calls"
  ],

  "performance_optimizations": [
    "UI thread gesture handling via worklets",
    "GPU-accelerated transform and opacity animations",
    "Debounced haptic feedback (1000ms) prevents over-triggering",
    "useMemo for baseSquareStyle to prevent recalculation",
    "useMemo for rectPath to cache Skia path generation",
    "useCallback for convertTranslationToProgress worklet",
    "No layout recalculations during animation",
    "Skia canvas GPU rendering for path animations",
    "Single gesture detector for entire slider",
    "Efficient dual SharedValue system avoids redundant calculations",
    "cancelAnimation prevents competing animations",
    "Spring physics calculated on UI thread",
    "worklet directive ensures zero JS thread involvement during drag"
  ],

  "use_cases": [
    "Slide-to-unlock interactions",
    "Confirmation gestures for critical actions",
    "Task completion interactions (todo apps)",
    "Security unlock screens",
    "Payment confirmation sliders",
    "Order confirmation interactions",
    "Progressive disclosure controls",
    "Engagement mechanics in onboarding",
    "Action commitment interfaces",
    "Delete confirmation with drag",
    "Submit form with gesture confirmation",
    "Unlock premium features interaction",
    "Timer start/stop with commitment gesture",
    "Emergency action confirmation",
    "Game level unlock mechanics"
  ],

  "code_quality": {
    "strengths": [
      "Full TypeScript with explicit type annotations",
      "Comprehensive inline comments explaining complex logic",
      "Clear separation of concerns (squares vs slider components)",
      "Well-defined prop interfaces",
      "Proper worklet directives throughout",
      "Named constants for magic numbers (SpringMass, MaxFriction, etc.)",
      "useMemo and useCallback for optimization",
      "Clean component composition pattern",
      "Proper gesture lifecycle handling (onBegin, onUpdate, onFinalize)",
      "Detailed comments explaining transform array logic",
      "Alternative implementations documented (3 approaches for path drawing)",
      "Attribution for borrowed code (draw-squircle from react-native-squircle)",
      "Clear variable naming (clampedProgress vs realProgress)",
      "Proper cleanup with cancelAnimation"
    ],
    "areas_for_improvement": [
      "onProgressChange callback could be optional (currently has ?. but no default)",
      "Hard-coded colors (#DEB986, #f4dbbd, #2a2a2a, gray) could be props",
      "Friction constants could be configurable props",
      "Spring configuration hardcoded (mass: 1.1)",
      "Dimensions.get('window').width called at module level (doesn't update on rotation)",
      "No accessibility considerations (screen readers, reduced motion)",
      "Commented-out Burnt toast code should be removed or properly feature-flagged",
      "draw-rrect-with-lines.ts utility is unused (dead code)",
      "No prop validation or default values",
      "Square size hardcoded in demo (120) could be dynamic",
      "No error boundary around Skia canvas",
      "Debounce options hardcoded (1000ms, leading: true) could be props",
      "No loading state for icon fonts",
      "StyleSheet.absoluteFill used but could be constants.styles pattern"
    ]
  },

  "known_limitations": [
    "Dimensions.get('window').width at module level doesn't respond to screen rotation",
    "Haptic feedback only on iOS/Android (web silently fails)",
    "Skia path rendering requires @shopify/react-native-skia",
    "No accessibility support (VoiceOver, TalkBack, reduced motion)",
    "Friction parameters not configurable without code changes",
    "Spring animation config not customizable via props",
    "Colors are hardcoded, no theming support",
    "No progress indicator besides the path stroke",
    "Single direction only (left-to-right drag)",
    "No completion callback (onUnlock, onComplete)",
    "No reset method exposed via ref",
    "Debounced haptic uses 1000ms fixed delay",
    "No way to programmatically trigger unlock animation",
    "Square rotation formulas are hardcoded (5x, -1.2x multipliers)",
    "No support for RTL layouts",
    "Commented-out Burnt toast feature incomplete"
  ],

  "potential_improvements": [
    "Add configurable friction parameters (min, max, threshold) as props",
    "Add custom spring config props (mass, damping, stiffness)",
    "Add theme/color customization props",
    "Add onUnlock/onComplete callback",
    "Add ref methods (reset, unlock, getProgress)",
    "Support horizontal and vertical orientations",
    "Add RTL layout support",
    "Add accessibility labels and reduced motion support",
    "Use useWindowDimensions instead of Dimensions.get for rotation support",
    "Add loading skeleton for icon fonts",
    "Remove dead code (draw-rrect-with-lines.ts)",
    "Add prop for debounce timing on haptic",
    "Make rotation multipliers configurable",
    "Add success animation state after unlock",
    "Support custom icons instead of hardcoded check/arrow",
    "Add visual feedback for friction threshold",
    "Add sound effects option alongside haptics",
    "Support bidirectional drag (left and right)",
    "Add snap points for partial completion",
    "Add progress percentage text display",
    "Implement complete Burnt toast integration or remove comments",
    "Add error boundaries around Skia rendering",
    "Support custom path shapes (circle, triangle, custom SVG)",
    "Add animation variants (pulse, glow, shimmer on squares)",
    "Make square size responsive to screen size",
    "Add drag velocity threshold for quick unlock"
  ],

  "key_insights": [
    "Dual progress tracking: Separate clamped and real progress enables path animation without overshoot while allowing rotation to rebound",
    "Friction effect math: Interpolating multiplier (not translation) creates natural drag resistance as user pulls further",
    "Context pattern: contextX SharedValue enables seamless gesture continuation if user starts dragging before spring completes",
    "Overshoot clamping: Spring with overshootClamping prevents path from extending beyond 100% while allowing rotation to bounce",
    "Pivot rotation technique: Translate-rotate-translate pattern rotates squares around bottom-right corner, not center",
    "Counter-rotation aesthetic: 1x vs -1.2x rotation multipliers create visually interesting opposing motion",
    "Debounce from worklet: scheduleOnRN bridges UI thread worklet to JS thread debounced function without performance loss",
    "Squircle smoothing: border_smoothing parameter creates iOS-style continuous corners (smoother than standard border-radius)",
    "Path start/end animation: Skia Path component's start and end props enable stroke reveal without custom drawing logic",
    "Spring mass tuning: mass=1.1 creates quick settling with slight weightiness (lower = faster)",
    "Scale + rotation: Scaling first square to 1.04 adds subtle depth perception to counter-rotation effect",
    "Extrapolation strategies: EXTEND for friction allows over-pull, CLAMP for friction multiplier prevents negative resistance",
    "useAnimatedReaction pattern: Cleaner than inline callbacks, centralizes side effects triggered by animation values",
    "cancelAnimation importance: Prevents competing springs when user interrupts reset animation"
  ],

  "learning_opportunities": [
    "For beginners: Pan gesture basics, useSharedValue, useAnimatedStyle, basic transform arrays, spring animations, progress normalization, debounce pattern, haptic feedback integration",
    "For intermediate: Friction effect implementation, dual SharedValue patterns, useAnimatedReaction for callbacks, Skia path rendering, squircle mathematics, gesture context tracking, overshoot clamping, interpolation with extrapolation modes, worklet directives, scheduleOnRN cross-thread calls",
    "For advanced: Complex gesture physics, multi-transform coordination (translate-rotate-translate), dual animation systems (clamped vs unclamped), performance optimization patterns, Skia path construction from mathematical formulas, gesture continuity patterns, spring physics tuning, UI thread optimization, building reusable gesture components with callbacks"
  ],

  "tags": [
    "slide-to-unlock",
    "friction-slider",
    "gesture-interaction",
    "pan-gesture",
    "spring-physics",
    "skia-rendering",
    "squircle",
    "path-animation",
    "counter-rotation",
    "haptic-feedback",
    "reanimated",
    "gesture-handler",
    "progressive-reveal",
    "friction-effect",
    "drag-interaction",
    "worklets",
    "dual-progress",
    "overshoot-clamping",
    "pivot-rotation",
    "border-smoothing",
    "useAnimatedReaction",
    "debounce",
    "todo-app",
    "confirmation-gesture",
    "unlock-interaction"
  ]
}
