{
  "animation_name": "Motion Blur List",
  "animation_slug": "motion-blur",
  "description": "A dynamic list with motion blur effects that smoothly animates items in and out. Features a stacked card layout with blur transitions, spring animations, and dynamic shadow effects. Items enter with a keyframe animation and blur out as they exit the visible area, creating an elegant depth effect.",

  "main_features": [
    "Stacked card layout with limited visible items",
    "Progressive blur effect on items leaving visible area",
    "Smooth spring animations for position changes",
    "Keyframe entrance animations with scale and opacity",
    "FadeOut exit animations",
    "Dynamic shadow effects that adjust for last item",
    "Automatic list repositioning as items are added",
    "Random item generation with emojis and crypto-style data"
  ],

  "file_structure": {
    "index.tsx": "Main export wrapper",
    "src/index.tsx": "Main app component with state management and add button",
    "src/components/blurred-list/": {
      "index.tsx": "Core list component with blur logic and item positioning"
    },
    "src/components/list-item/": {
      "index.tsx": "Individual list item UI with emoji, amount, and address"
    },
    "src/utils/": {
      "generate-random-item.ts": "Utility for generating random item data (emoji, amount, address)"
    }
  },

  "core_technologies": {
    "rendering": "react-native (View, StyleSheet)",
    "animations": "react-native-reanimated",
    "blur_effects": "expo-blur",
    "interactions": "pressto"
  },

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "usage": "Animations, blur transitions, position management",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedStyle",
        "withSpring",
        "withTiming"
      ],
      "components": ["Animated.View", "Animated.createAnimatedComponent"],
      "animations": ["Keyframe", "FadeOut"],
      "critical_feature": "Keyframe for complex entrance animations"
    },
    "expo-blur": {
      "version": "~15.0.7",
      "usage": "BlurView overlay for motion blur effect",
      "components": ["BlurView", "AnimatedBlurView (created)"],
      "tint": "extraLight",
      "dynamic_intensity": "Animated from 50 to 0"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "usage": "Add button with scale press animation",
      "components": ["PressableScale"]
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "usage": "Plus icon for add button",
      "components": ["Entypo"]
    }
  },

  "animation_techniques": {
    "entrance_animation": {
      "type": "Keyframe",
      "duration": 200,
      "keyframes": {
        "0%": {
          "opacity": 0,
          "scale": 0.5,
          "translateY": 100
        },
        "100%": {
          "opacity": 1,
          "scale": 1,
          "translateY": 0
        }
      },
      "effect": "Items scale up and fade in from below"
    },
    "exit_animation": {
      "type": "FadeOut",
      "duration": 180,
      "effect": "Items fade out when removed from visible area"
    },
    "position_animation": {
      "type": "withSpring",
      "property": "top",
      "trigger": "List length changes or index changes",
      "calculation": "index * LIST_ITEM_CONTAINER_HEIGHT - overflow * LIST_ITEM_CONTAINER_HEIGHT",
      "effect": "Smooth spring motion as items reposition"
    },
    "blur_animation": {
      "type": "withTiming",
      "property": "blurIntensity",
      "values": {
        "visible": 0,
        "hidden": 50
      },
      "duration": {
        "to_hidden": 150,
        "to_visible": 500
      },
      "easing": "Easing.linear",
      "effect": "Items blur progressively as they exit visible area"
    },
    "opacity_animation": {
      "type": "withTiming",
      "property": "progress",
      "values": {
        "visible": 1,
        "hidden": 0
      },
      "duration": 350,
      "easing": "Easing.linear",
      "effect": "Coordinated with blur for smooth transitions"
    },
    "shadow_animation": {
      "type": "withTiming (via isLastItemProgress)",
      "properties": [
        "shadowOffset.height: 20 → 10",
        "shadowOpacity: 0.03 → 0.02",
        "shadowRadius: 10 → 5"
      ],
      "trigger": "When item becomes last in list",
      "effect": "Last item has lighter shadow for visual hierarchy"
    }
  },

  "layout_system": {
    "constants": {
      "LIST_ITEM_HEIGHT": 90,
      "LIST_ITEM_MARGIN_BOTTOM": 20,
      "LIST_ITEM_CONTAINER_HEIGHT": 110,
      "LIST_ITEM_WIDTH": "80%"
    },
    "positioning": {
      "strategy": "Absolute positioning with calculated top values",
      "container_height": "maxVisibleItems * LIST_ITEM_CONTAINER_HEIGHT",
      "overflow": "hidden (clips items outside visible area)",
      "z_index": {
        "content": 1,
        "blur_overlay": 100
      }
    },
    "visible_area": {
      "max_visible_items": 3,
      "calculation": "index - (currentListLength - maxVisibleItems) < 0",
      "behavior": "Items outside visible area render null for performance",
      "repositioning": "All visible items shift up as new items added"
    },
    "stacking": {
      "direction": "Bottom to top (newest at bottom)",
      "overlap": "No overlap, items stacked with margin",
      "scroll": "None (fixed visible items)"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "progress",
        "type": "SharedValue<number>",
        "initial": 0,
        "updates": "withTiming based on isOffVisibleArea",
        "purpose": "Controls opacity fade for off-screen items"
      },
      {
        "name": "blurIntensity",
        "type": "SharedValue<number | undefined>",
        "initial": 50,
        "updates": "withTiming 0-50 based on visibility",
        "purpose": "Controls blur overlay intensity"
      },
      {
        "name": "isLastItemProgress",
        "type": "DerivedValue<number>",
        "calculation": "withTiming(index === currentListLength - 1 ? 1 : 0)",
        "purpose": "Detects and animates last item state"
      }
    ],
    "useEffect_pattern": {
      "trigger": "isOffVisibleArea changes",
      "actions": [
        "Update progress (fade animation)",
        "Update blurIntensity (blur animation)"
      ],
      "dependencies": ["isOffVisibleArea", "progress", "blurIntensity"],
      "timing": "Different durations for blur in/out (150ms vs 500ms)"
    },
    "animated_styles": [
      {
        "name": "containerStyle",
        "properties": ["top"],
        "calculation": "withSpring(calculateTop(...))",
        "dependencies": ["top"],
        "effect": "Smooth repositioning"
      },
      {
        "name": "contentStyle",
        "properties": ["shadowColor", "shadowOffset", "shadowOpacity", "shadowRadius"],
        "calculation": "interpolate(isLastItemProgress.value, [0, 1], [...])",
        "effect": "Dynamic shadow for last item"
      }
    ],
    "interpolation": {
      "shadowOffset.height": {
        "input": "[0, 1]",
        "output": "[20, 10]",
        "meaning": "Lighter shadow for last item"
      },
      "shadowOpacity": {
        "input": "[0, 1]",
        "output": "[0.03, 0.02]",
        "meaning": "More transparent shadow for last item"
      },
      "shadowRadius": {
        "input": "[0, 1]",
        "output": "[10, 5]",
        "meaning": "Softer shadow for last item"
      }
    }
  },

  "blur_implementation": {
    "component": "AnimatedBlurView (Animated.createAnimatedComponent(BlurView))",
    "position": "StyleSheet.absoluteFillObject (covers entire item)",
    "adjustments": {
      "top": -5,
      "bottom": -20
    },
    "tint": "extraLight",
    "intensity": "Animated SharedValue (0-50)",
    "z_index": 100,
    "purpose": "Creates motion blur effect as items transition out",
    "performance": "Native blur view, GPU-accelerated"
  },

  "data_management": {
    "state": {
      "items": "useState<Item[]>",
      "initial": "[]",
      "updates": "setItems(prevItems => [...prevItems, newItem])"
    },
    "item_structure": {
      "id": "number (auto-incremented)",
      "amount": "string (formatted as $ XXX.XX)",
      "address": "string (crypto-style 0x... address)",
      "emoji": "string (random from 36 emojis)"
    },
    "generation": {
      "amount": "Math.random() * 10000, fixed to 2 decimals",
      "address": "Math.random().toString(16) shortened and formatted",
      "emoji": "Random selection from predefined array",
      "id": "prevItems.length + 1"
    },
    "emoji_pool": {
      "count": 36,
      "categories": [
        "Emotions (🫠, 💪, 🤔, 😎)",
        "Objects (🚀, 💡, 🎸, 🏆, 📚, 📷)",
        "Nature (🌈, 🍀, 🌺, 🌴, 🦋)",
        "Food (🍕, 🍦)",
        "Animals (🐱, 🐶, 🦄)",
        "Activities (🏄, 🚴, 🏋️, 🧗, 🧘)",
        "Entertainment (🎉, 🎭, 🎬, 🎧, 🎨)",
        "Elements (⚡️, 🔥, ❄️, 🌊, 🌟)"
      ]
    }
  },

  "ui_ux_design": {
    "layout": {
      "container": "Full screen with centered flex layout",
      "list_container": "Fixed height based on maxVisibleItems",
      "item_width": "80% of screen width",
      "item_positioning": "Centered horizontally"
    },
    "visual_hierarchy": {
      "item_content": {
        "background": "white",
        "border_radius": 20,
        "border_curve": "continuous (iOS)",
        "elevation": 5,
        "shadow": "Dynamic based on position"
      },
      "blur_overlay": {
        "z_index": 100,
        "intensity": "Progressive 0-50"
      },
      "add_button": {
        "position": "Below list (top: -50)",
        "shape": "Circular (64x64)",
        "background": "black",
        "icon": "Plus (white, 40px)"
      }
    },
    "color_scheme": {
      "background": "#fff",
      "item_background": "white",
      "emoji_circle": "#F4F4F4 (light gray)",
      "amount_text": "black",
      "address_text": "black (opacity: 0.3)",
      "button_background": "black",
      "button_icon": "white"
    },
    "typography": {
      "amount": {
        "font_family": "Honk-Bold",
        "font_size": 22,
        "font_weight": "bold",
        "letter_spacing": 1,
        "color": "black"
      },
      "address": {
        "font_family": "Honk-Regular",
        "font_size": 14,
        "margin_top": 5,
        "opacity": 0.3,
        "color": "black"
      }
    },
    "spacing": {
      "item_padding": 10,
      "emoji_circle": "60x60 (aspect ratio 1)",
      "details_margin_left": 10,
      "item_margin_bottom": 20,
      "button_offset_top": -50
    },
    "shadows": {
      "default_item": {
        "shadow_offset_height": 20,
        "shadow_opacity": 0.03,
        "shadow_radius": 10,
        "shadow_color": "black"
      },
      "last_item": {
        "shadow_offset_height": 10,
        "shadow_opacity": 0.02,
        "shadow_radius": 5,
        "shadow_color": "black"
      }
    }
  },

  "performance_optimizations": {
    "conditional_rendering": {
      "technique": "Early return null for off-screen items",
      "implementation": "if (isOffVisibleArea) return null",
      "benefit": "Reduces render tree size, improves performance"
    },
    "useCallback": {
      "usage": "renderItemWithBlur function",
      "dependencies": ["data.length", "maxVisibleItems", "renderItem"],
      "benefit": "Prevents unnecessary re-renders of list items"
    },
    "animated_component_creation": {
      "pattern": "Animated.createAnimatedComponent(BlurView)",
      "timing": "Created once at module level",
      "benefit": "Reused across all instances"
    },
    "memoization": {
      "calculated_values": "top position calculated once per render",
      "derived_values": "useDerivedValue for isLastItemProgress",
      "benefit": "Reduces redundant calculations"
    },
    "timing_optimization": {
      "blur_out": "150ms (fast)",
      "blur_in": "500ms (slower, smoother)",
      "opacity": "350ms (medium)",
      "rationale": "Fast exit, smooth entrance for better UX"
    },
    "spring_animation": {
      "usage": "Position changes only",
      "benefit": "Natural feeling motion without configuration",
      "default_config": "Uses Reanimated default spring (good balance)"
    }
  },

  "component_architecture": {
    "component_hierarchy": [
      "App (src/index.tsx)",
      "  ├─ BlurredList (reusable generic list)",
      "  │   └─ BlurredListItemContainer (per item)",
      "  │       ├─ ListItem (custom content)",
      "  │       └─ AnimatedBlurView (overlay)",
      "  └─ AddButton"
    ],
    "separation_of_concerns": {
      "App": "State management and user interactions",
      "BlurredList": "Generic list logic, positioning, blur effects",
      "BlurredListItemContainer": "Individual item animations and blur",
      "ListItem": "Content presentation (emoji, amount, address)",
      "generateRandomItem": "Data generation utility"
    },
    "reusability": {
      "BlurredList": {
        "generic": true,
        "type_parameter": "<T>",
        "customizable": "renderItem prop accepts any component",
        "configurable": "maxVisibleItems prop"
      },
      "BlurredListItemContainer": {
        "generic": "children prop for any content",
        "self_contained": "Manages own animation state"
      }
    },
    "props_interfaces": {
      "BlurredListProps<T>": {
        "maxVisibleItems": "number",
        "data": "T[]",
        "renderItem": "({ item, index }) => ReactNode"
      },
      "BlurredListItemContainerProps": {
        "children": "ReactNode",
        "index": "number",
        "maxVisibleItems": "number",
        "currentListLength": "number"
      }
    }
  },

  "mathematical_calculations": {
    "position_calculation": {
      "function": "calculateTop",
      "formula": "index * LIST_ITEM_CONTAINER_HEIGHT - overflow * LIST_ITEM_CONTAINER_HEIGHT",
      "overflow": "Math.max(currentListLength - maxVisibleItems, 0)",
      "example": {
        "scenario": "4 items, maxVisible 3, index 2",
        "calculation": "2 * 110 - max(4-3, 0) * 110 = 220 - 110 = 110",
        "result": "Item at position 110px from top"
      }
    },
    "visibility_detection": {
      "formula": "index - (currentListLength - maxVisibleItems) < 0",
      "logic": "If item index is before start of visible window, it's off-screen",
      "example": {
        "scenario": "4 items, maxVisible 3, index 0",
        "calculation": "0 - (4-3) = -1 < 0 → true (off-screen)",
        "result": "Item is hidden (blurred and will render null)"
      }
    },
    "interpolation": {
      "type": "Linear interpolation",
      "usage": "Shadow properties based on isLastItemProgress",
      "formula": "output = outputMin + (inputValue - inputMin) * (outputMax - outputMin) / (inputMax - inputMin)"
    }
  },

  "interaction_patterns": {
    "add_item": {
      "trigger": "Press add button",
      "component": "PressableScale",
      "action": "addItem() → setItems([...prevItems, newItem])",
      "animation_sequence": [
        "1. New item added to data array",
        "2. BlurredList re-renders with new length",
        "3. All items recalculate positions (spring animation)",
        "4. New item enters with keyframe animation",
        "5. Top item (if > maxVisible) blurs out and exits"
      ],
      "feedback": "Button scales on press (via pressto)"
    },
    "automatic_cleanup": {
      "pattern": "Items outside visible area render null",
      "trigger": "When list grows beyond maxVisibleItems",
      "animation": "FadeOut before removal",
      "performance": "Old items removed from render tree"
    }
  },

  "code_quality": {
    "typescript": {
      "coverage": "Full TypeScript with explicit types",
      "generic_types": "BlurredListProps<T> for reusability",
      "type_definitions": [
        "Item",
        "BlurredListProps<T>",
        "BlurredListItemContainerProps"
      ],
      "type_safety": "All props and state properly typed"
    },
    "component_design": {
      "patterns": [
        "Functional components with hooks",
        "Component composition (children prop)",
        "Generic components with type parameters",
        "Render prop pattern (renderItem)"
      ]
    },
    "constants": {
      "defined": [
        "LIST_ITEM_HEIGHT",
        "LIST_ITEM_MARGIN_BOTTOM",
        "LIST_ITEM_CONTAINER_HEIGHT"
      ],
      "location": "Top of component file",
      "benefit": "Easy to adjust layout, maintainable"
    },
    "naming_conventions": {
      "components": "PascalCase",
      "functions": "camelCase",
      "constants": "SCREAMING_SNAKE_CASE (for layout)",
      "props": "camelCase",
      "consistent": true
    },
    "documentation": {
      "inline_comments": "Minimal, code is self-documenting",
      "type_annotations": "Types serve as documentation",
      "function_names": "Descriptive (calculateTop, generateRandomItem)"
    },
    "strengths": [
      "Clear separation of concerns",
      "Highly reusable components",
      "Type-safe with generics",
      "Well-organized file structure",
      "Clean, readable code",
      "Proper use of React patterns",
      "Efficient performance optimizations"
    ],
    "areas_for_improvement": [
      "Could add JSDoc comments for complex functions",
      "calculateTop could be documented inline",
      "Type for Item could include better field descriptions",
      "Could extract magic numbers (blur values, timing) to constants"
    ]
  },

  "configuration": {
    "adjustable_parameters": {
      "maxVisibleItems": {
        "current": 3,
        "type": "number",
        "effect": "Number of items visible in stack",
        "recommended_range": "2-5"
      },
      "LIST_ITEM_HEIGHT": {
        "current": 90,
        "type": "number",
        "effect": "Height of each item card",
        "considerations": "Must accommodate content"
      },
      "LIST_ITEM_MARGIN_BOTTOM": {
        "current": 20,
        "type": "number",
        "effect": "Spacing between stacked items"
      },
      "blur_intensity": {
        "visible": 0,
        "hidden": 50,
        "type": "number",
        "effect": "Amount of blur on exiting items",
        "range": "0-100"
      },
      "animation_durations": {
        "entrance": 200,
        "exit": 180,
        "blur_to_hidden": 150,
        "blur_to_visible": 500,
        "opacity": 350,
        "configurable": true
      },
      "emoji_pool": {
        "current": 36,
        "customizable": true,
        "location": "generate-random-item.ts"
      }
    }
  },

  "use_cases": {
    "primary": [
      "Transaction history lists",
      "Notification feeds",
      "Activity streams",
      "Recent items displays",
      "Wallet transaction views",
      "Chat message previews",
      "Shopping cart items"
    ],
    "design_patterns": [
      "Stacked card interfaces",
      "Limited visible items with depth",
      "Progressive disclosure",
      "Focus on most recent items"
    ],
    "industries": [
      "Fintech (crypto wallets, transactions)",
      "Social media (activity feeds)",
      "E-commerce (order history)",
      "Productivity (task lists)",
      "Communication (message threads)"
    ],
    "adaptability": {
      "content": "Completely customizable via renderItem prop",
      "styling": "Easy to theme by modifying item component",
      "data": "Works with any data type (generic)",
      "behavior": "Configurable visible items and animations"
    }
  },

  "known_limitations": {
    "no_manual_scroll": {
      "issue": "Cannot manually scroll through items",
      "impact": "Can only see maxVisibleItems at a time",
      "workaround": "Items automatically cycle as new ones added"
    },
    "no_item_removal": {
      "issue": "No UI for removing individual items",
      "impact": "Items only disappear when pushed off by new ones",
      "enhancement": "Could add swipe-to-delete"
    },
    "no_item_reordering": {
      "issue": "Items always stack bottom-to-top",
      "impact": "Cannot manually reorder items",
      "enhancement": "Could add drag-to-reorder"
    },
    "font_dependency": {
      "issue": "Hardcoded 'Honk-Bold' and 'Honk-Regular' fonts",
      "location": "list-item/index.tsx",
      "impact": "Requires custom fonts in project",
      "workaround": "Could fallback to system fonts"
    },
    "blur_platform": {
      "issue": "BlurView may have platform differences",
      "platforms": "iOS (native), Android (may use fallback)",
      "impact": "Visual consistency across platforms"
    },
    "fixed_width": {
      "issue": "Item width fixed at 80%",
      "impact": "Not configurable without code change",
      "enhancement": "Could accept width prop"
    }
  },

  "potential_improvements": {
    "interactivity": [
      "Swipe to delete items",
      "Tap to expand item details",
      "Drag to reorder items",
      "Pull down to add new item",
      "Long press for item actions"
    ],
    "features": [
      "Manual scroll through all items",
      "Search/filter items",
      "Item categories/grouping",
      "Infinite scroll/pagination",
      "Item selection mode"
    ],
    "animations": [
      "More entrance animation variants",
      "Configurable spring settings",
      "Stagger animation for multiple adds",
      "Shake animation on duplicate",
      "Celebrate animation on milestone"
    ],
    "customization": [
      "Configurable blur tint and intensity",
      "Adjustable shadow properties",
      "Themeable color scheme",
      "Custom item width",
      "Vertical spacing configuration"
    ],
    "accessibility": [
      "VoiceOver/TalkBack support",
      "Screen reader announcements",
      "Reduced motion mode",
      "High contrast mode",
      "Focus management"
    ],
    "performance": [
      "Virtualization for large lists",
      "Memoize list items",
      "Optimize blur rendering",
      "Lazy load item content"
    ]
  },

  "key_insights": {
    "blur_progression": "Asymmetric timing (fast out, slow in) creates better UX than symmetric timing",
    "shadow_hierarchy": "Dynamic shadows help establish visual hierarchy, lighter shadows for top items",
    "conditional_rendering": "Rendering null for off-screen items dramatically improves performance",
    "generic_components": "Type parameters make BlurredList reusable across different data types",
    "spring_positioning": "Spring animations for position changes feel more natural than timing",
    "blur_overlay": "Absolute positioned blur with slight offset creates better visual effect",
    "separation": "Separating list logic from item content makes component highly reusable",
    "animation_coordination": "Multiple coordinated animations (blur + opacity + position) create rich effects"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Basic Reanimated animations (withSpring, withTiming)",
      "useSharedValue and useAnimatedStyle",
      "Conditional rendering optimization",
      "TypeScript generic components",
      "Component composition patterns"
    ],
    "for_intermediate": [
      "Keyframe animations in Reanimated",
      "useDerivedValue for computed animations",
      "AnimatedBlurView creation pattern",
      "Interpolation for dynamic properties",
      "useCallback optimization",
      "Coordinating multiple animations"
    ],
    "for_advanced": [
      "Building reusable animated list components",
      "Performance optimization strategies",
      "Animation timing coordination",
      "Generic component architecture",
      "Custom render prop patterns",
      "Mathematical position calculations"
    ]
  },

  "related_concepts": {
    "ui_patterns": [
      "Stacked cards (like Tinder)",
      "Activity feeds",
      "Notification centers",
      "Card carousels",
      "Focus + context pattern"
    ],
    "animation_techniques": [
      "Motion blur",
      "Progressive disclosure",
      "Depth through shadows",
      "Entrance/exit choreography",
      "Spring physics"
    ],
    "react_patterns": [
      "Render props",
      "Generic components",
      "Component composition",
      "Controlled components",
      "Container/Presentational split"
    ]
  },

  "testing_considerations": {
    "visual_testing": [
      "Verify blur effect transitions smoothly",
      "Check shadow changes for last item",
      "Confirm entrance animation plays correctly",
      "Validate exit animation and cleanup",
      "Test on various screen sizes"
    ],
    "interaction_testing": [
      "Add button creates new items",
      "Items reposition correctly",
      "Blur activates for off-screen items",
      "Performance with rapid additions",
      "Memory management with many items"
    ],
    "unit_testing": {
      "calculateTop": [
        "Test with various index and length combinations",
        "Verify overflow calculation",
        "Edge cases (0 items, 1 item, maxVisible items)"
      ],
      "visibility_detection": [
        "Test isOffVisibleArea calculation",
        "Verify correct items marked as off-screen"
      ],
      "data_generation": [
        "Test generateRandomItem produces valid data",
        "Verify all fields populated",
        "Check emoji randomness"
      ]
    },
    "edge_cases": [
      "Empty list state",
      "Single item",
      "Exactly maxVisibleItems",
      "Many items (performance)",
      "Rapid successive additions",
      "Item with very long text"
    ]
  },

  "platform_considerations": {
    "ios": {
      "features": ["Full BlurView support", "Continuous border curves", "All animations"],
      "performance": "Excellent",
      "specific_props": "borderCurve: 'continuous'"
    },
    "android": {
      "features": ["All core features", "Elevation shadows"],
      "blur_support": "May use different blur implementation",
      "performance": "Excellent",
      "specific_props": "elevation: 5"
    },
    "web": {
      "compatibility": "Should work with react-native-web",
      "limitations": ["BlurView may not render perfectly", "No continuous curves"],
      "fallback": "Could use CSS blur filter"
    }
  },

  "accessibility_considerations": {
    "current_state": "No explicit accessibility features",
    "needed_improvements": [
      "accessibilityLabel for items",
      "accessibilityRole='button' for AddButton",
      "accessibilityHint for add action",
      "Screen reader announcements when items added",
      "Reduced motion support (disable animations)",
      "Focus management for keyboard navigation",
      "Minimum touch target size (44x44 - button is 64x64 ✓)"
    ],
    "motion_sensitivity": {
      "concern": "Multiple simultaneous animations may cause discomfort",
      "recommendation": "Detect prefers-reduced-motion and simplify/disable animations"
    }
  },

  "bundle_size_impact": {
    "code_size": "Small (~200 lines total)",
    "dependencies": [
      "react-native-reanimated (likely already in project)",
      "expo-blur (light)",
      "pressto (very light)",
      "@expo/vector-icons (likely already in project)"
    ],
    "runtime_memory": "Minimal (only visible items rendered)",
    "estimated_impact": "< 50KB additional"
  },

  "tags": [
    "list",
    "blur",
    "reanimated",
    "motion-blur",
    "stacked-cards",
    "keyframe",
    "spring-animation",
    "depth-effect",
    "expo-blur",
    "generic-component",
    "activity-feed",
    "transaction-list",
    "pressto",
    "dynamic-shadows"
  ]
}
