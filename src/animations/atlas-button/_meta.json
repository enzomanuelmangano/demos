{
  "animation_name": "Atlas Button",
  "animation_slug": "atlas-button",
  "description": "An interactive button component featuring animated pixel/grid squares that dynamically respond to user interaction. Utilizes Skia's Atlas API for high-performance rendering of hundreds of animated squares that scale outward from the center when pressed, revealing an icon and label with smooth position and opacity transitions.",
  "main_features": [
    "High-performance grid animation using Skia Atlas API",
    "Hundreds of squares animated simultaneously (50x vertical grid)",
    "Radial scale effect from center on button press",
    "Randomized square colors from color palette",
    "Probabilistic square visibility based on distance from center",
    "Icon and label reveal animations with position interpolation",
    "SVG icon support with automatic scaling/fitting",
    "Tap gesture with scale feedback",
    "Float32Array color format for GPU optimization",
    "Worklet-based rendering for 60fps performance"
  ],
  "file_structure": {
    "index.tsx": "Demo screen with example configuration and color palette",
    "atlas-button/index.tsx": "Main AtlasButton component with gesture handling and UI",
    "atlas-button/animated-squares.tsx": "AnimatedSquares component using Skia Atlas API",
    "assets/header_logo.svg": "React Native logo SVG used in demo"
  },
  "core_technologies": {
    "rendering": "@shopify/react-native-skia",
    "animations": "react-native-reanimated",
    "gestures": "react-native-gesture-handler",
    "threading": "react-native-worklets"
  },
  "packages_and_versions": {
    "@shopify/react-native-skia": {
      "version": "2.2.12",
      "usage": "Canvas rendering with Atlas API for efficient sprite rendering",
      "components": [
        "Canvas",
        "Atlas",
        "Fill",
        "Group",
        "ImageSVG"
      ],
      "hooks": [
        "useRSXformBuffer",
        "useRectBuffer",
        "useTexture",
        "useSVG"
      ],
      "utilities": [
        "fitbox",
        "rect"
      ],
      "critical_feature": "Atlas component for rendering hundreds of sprites with single draw call",
      "performance_reason": "GPU-accelerated sprite batching, optimal for many identical shapes with different transforms"
    },
    "react-native-reanimated": {
      "version": "~4.1.1",
      "usage": "Animations, gesture state, derived values",
      "hooks": [
        "useSharedValue",
        "useDerivedValue",
        "useAnimatedStyle",
        "withTiming",
        "interpolate"
      ],
      "utilities": [
        "Easing",
        "Extrapolation"
      ],
      "critical_feature": "useDerivedValue for worklet-based calculations driving Atlas transforms"
    },
    "react-native-gesture-handler": {
      "version": "~2.28.0",
      "components": [
        "GestureDetector",
        "Gesture"
      ],
      "gestures": [
        "Gesture.Tap()"
      ],
      "methods": [
        "onTouchesDown",
        "onTouchesUp",
        "onFinalize",
        "maxDuration"
      ],
      "usage": "Tap gesture with press/release state management"
    },
    "react-native-worklets": {
      "version": "0.5.1",
      "imports": [
        "scheduleOnRN"
      ],
      "usage": "Bridge onPress callback from UI thread to JS thread"
    }
  },
  "animation_techniques": {
    "atlas_rendering": {
      "pattern": "Skia Atlas API for sprite batching",
      "implementation": "Single Atlas component renders all squares in one draw call",
      "sprites": "useRectBuffer defines source rectangles from texture",
      "transforms": "useRSXformBuffer defines position/scale for each sprite",
      "colors": "Float32Array colors per sprite for tinting",
      "texture": "White Fill texture generated with useTexture",
      "benefit": "Renders hundreds of sprites with GPU acceleration, single draw call"
    },
    "radial_scale_effect": {
      "pattern": "Distance-based scale calculation from center",
      "formula": "scale = max(0, 1.5 - distance / activeRadius)",
      "activeRadius": "progress * maxRadius (where maxRadius = sqrt(width^2 + height^2) / 2)",
      "visibility_threshold": "Hide square if scale >= 0.9 + randomValue * 0.5",
      "effect": "Squares near center scale up and disappear, creating expanding wave effect",
      "randomization": "Random threshold per square creates organic, non-uniform pattern",
      "key_insight": "Center squares (high scale) hidden first due to narrow threshold range"
    },
    "square_visibility_logic": {
      "pattern": "Probabilistic visibility based on scale",
      "calculation": "if (scale >= 0.9 + randomValues[i] * 0.5) hide square",
      "center_squares": "Scale range [0.9, 1.4] - high probability of hiding",
      "edge_squares": "Scale < 0.9 - remain visible",
      "randomValues": "Pre-generated array of Math.random() per square",
      "effect": "Creates hole expanding from center with irregular organic edges"
    },
    "button_press_animation": {
      "gesture": "Gesture.Tap() with maxDuration: 10000",
      "onTouchesDown": "isActive.value = true",
      "onTouchesUp": "Calls onPress via scheduleOnRN",
      "onFinalize": "isActive.value = false",
      "progress": "withTiming(isActive ? 1 : 0, { duration: 1000, easing: bezier(0.25, 0.1, 0.25, 1) })"
    },
    "button_scale_feedback": {
      "animation": "interpolate(progress, [0, 1], [1, 0.95])",
      "property": "transform: [{ scale }]",
      "effect": "Entire button shrinks slightly on press",
      "duration": "1000ms with cubic bezier easing"
    },
    "icon_reveal": {
      "pattern": "Vertical position interpolation",
      "animation": "interpolate(progress * 3, [0, 1], [0, -25], CLAMP)",
      "effect": "Icon moves upward by 25px as animation progresses",
      "multiplier": "progress * 3 accelerates icon movement",
      "extrapolation": "CLAMP prevents over-animation"
    },
    "label_reveal": {
      "opacity_animation": "opacity: progress * 3",
      "position_animation": "interpolate(progress * 3, [0, 1], [50, 25], CLAMP)",
      "effect": "Label fades in and moves up from bottom",
      "initial_offset": "50px below center",
      "final_offset": "25px below center",
      "multiplier": "progress * 3 for synchronized reveal with icon"
    },
    "svg_icon_fitting": {
      "pattern": "Skia fitbox for SVG scaling",
      "calculation": "fitbox('contain', rect(svg size), rect(icon size))",
      "mode": "contain (maintains aspect ratio)",
      "transform": "Matrix transform applied to ImageSVG",
      "canvas_size": "iconSize x iconSize (20% of button width)",
      "benefit": "SVG automatically scaled to fit canvas while preserving aspect ratio"
    }
  },
  "atlas_api_deep_dive": {
    "atlas_component": {
      "purpose": "Efficiently render many identical sprites with different transforms",
      "props": {
        "image": "Texture to sample from (white Fill in this case)",
        "sprites": "Array of source rectangles from texture",
        "transforms": "Array of RSXform transformations (rotation, scale, translation)",
        "colors": "Optional array of Float32Array colors to tint each sprite"
      },
      "performance": "Single draw call regardless of sprite count",
      "use_case": "Ideal for particle systems, grids, tilemaps"
    },
    "useRectBuffer": {
      "purpose": "Define source rectangles from texture for each sprite",
      "callback": "worklet function (val, index) => val.setXYWH(x, y, w, h)",
      "calculation": "Grid position based on index: x = (index % HSquares) * containerSize",
      "runs_on": "UI thread (worklet)",
      "updates": "Automatically when dependencies change"
    },
    "useRSXformBuffer": {
      "purpose": "Define transformations for each sprite",
      "callback": "worklet function (val, index) => val.set(scale, rotation, tx, ty)",
      "parameters": [
        "scale: sprite scale factor",
        "rotation: rotation angle (0 in this case)",
        "tx: x translation",
        "ty: y translation"
      ],
      "reactive": "Recalculates when activeRadius changes",
      "performance": "Runs on UI thread, no bridge crossing"
    },
    "useTexture": {
      "purpose": "Generate texture from Skia drawing",
      "input": "<Fill color={'white'} />",
      "dimensions": "{ width, height }",
      "output": "SkImage texture",
      "usage": "Sprites sample from this white texture, tinted by colors array"
    },
    "float32array_colors": {
      "format": "new Float32Array([r, g, b, a])",
      "range": "[0, 1] for each channel",
      "example": "new Float32Array([0, 0.2, 1, 0.8]) = blue with 80% alpha",
      "gpu_optimization": "Float32Array is GPU-friendly format",
      "pre_generated": "Colors randomly selected once, stored in staticColors array"
    }
  },
  "grid_calculation": {
    "horizontal_squares": {
      "configurable": "horizontalSquaresAmount prop (default 50)",
      "demo_value": 50
    },
    "square_container_size": {
      "formula": "Math.floor(width / HSquares)",
      "demo_example": "Math.floor(250 / 50) = 5px"
    },
    "square_size": {
      "formula": "SquareContainerSize - 2.5",
      "demo_example": "5 - 2.5 = 2.5px",
      "purpose": "Gap between squares for visual separation"
    },
    "vertical_squares": {
      "formula": "Math.floor(height / SquareContainerSize)",
      "demo_example": "Math.floor(200 / 5) = 40 squares"
    },
    "total_squares": {
      "formula": "HSquares * VSquares",
      "demo_example": "50 * 40 = 2000 squares"
    },
    "max_radius": {
      "formula": "Math.sqrt(width^2 + height^2) / 2",
      "demo_example": "Math.sqrt(250^2 + 200^2) / 2 = 160.5px",
      "purpose": "Maximum distance from center for scale interpolation"
    }
  },
  "color_system": {
    "color_format": {
      "type": "Float32Array",
      "structure": "[red, green, blue, alpha]",
      "range": "0.0 to 1.0 per channel"
    },
    "demo_palette": [
      {
        "name": "TRANSPARENT",
        "value": "[0, 0, 0, 1]",
        "appearance": "Transparent (alpha 1 but used for transparent squares)",
        "weight": 3,
        "note": "Repeated 3 times for higher probability"
      },
      {
        "name": "BLUE",
        "value": "[0, 0.2, 1, 0.8]",
        "appearance": "Bright blue with 80% opacity",
        "weight": 1
      },
      {
        "name": "LIGHT_BLUE",
        "value": "[0, 0.5, 1, 0.8]",
        "appearance": "Cyan/light blue with 80% opacity",
        "weight": 2,
        "note": "Repeated 2 times for medium probability"
      },
      {
        "name": "BLUE_VARIANT",
        "value": "[0.3, 0.2, 1, 0.8]",
        "appearance": "Purple-blue with 80% opacity",
        "weight": 1
      }
    ],
    "probability_weighting": {
      "pattern": "Repeat colors in array to adjust probability",
      "total_colors": 7,
      "transparent_probability": "3/7 = 42.9%",
      "light_blue_probability": "2/7 = 28.6%",
      "blue_probability": "1/7 = 14.3%",
      "blue_variant_probability": "1/7 = 14.3%",
      "customization": "Add/remove array elements to change color distribution"
    },
    "static_color_generation": {
      "pattern": "useMemo to generate colors once on mount",
      "algorithm": "For each square, pick random index from colors array",
      "benefit": "Colors don't change during animation, stable appearance"
    }
  },
  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "isActive",
        "type": "boolean",
        "initial": false,
        "updates": "Toggle on gesture touch down/finalize"
      }
    ],
    "derived_values": [
      {
        "name": "progress",
        "type": "number (0 to 1)",
        "calculation": "withTiming(isActive ? 1 : 0, { duration: 1000, easing })",
        "drives": "All animations (squares, icon, label, button scale)"
      },
      {
        "name": "activeRadius",
        "calculation": "progress * maxRadius",
        "purpose": "Expanding radius for scale calculation",
        "used_in": "AnimatedSquares transform buffer"
      }
    ],
    "animated_styles": [
      {
        "name": "rStyle",
        "properties": [
          "transform: [{ scale }]"
        ],
        "usage": "Button container scale feedback"
      },
      {
        "name": "textStyle",
        "properties": [
          "opacity",
          "top"
        ],
        "usage": "Label reveal animation"
      },
      {
        "name": "iconStyle",
        "properties": [
          "top"
        ],
        "usage": "Icon upward movement"
      }
    ]
  },
  "performance_optimizations": {
    "atlas_batching": {
      "benefit": "2000 squares rendered in single draw call",
      "vs_views": "Would be 2000 View components = unacceptable performance",
      "gpu_acceleration": "All transforms computed on GPU"
    },
    "worklet_calculations": {
      "pattern": "All square transform calculations in worklets",
      "runs_on": "UI thread",
      "benefit": "No JS thread blocking, 60fps smooth"
    },
    "useMemo_optimizations": [
      {
        "name": "staticColors",
        "dependencies": [
          "SquaresAmount",
          "_colors"
        ],
        "prevents": "Regenerating 2000 random colors every render"
      },
      {
        "name": "randomValues",
        "dependencies": [
          "SquaresAmount"
        ],
        "prevents": "Regenerating 2000 random thresholds every render"
      },
      {
        "name": "iconCanvasSize",
        "dependencies": [
          "iconSize"
        ],
        "prevents": "Recreating size object every render"
      },
      {
        "name": "iconTransform",
        "dependencies": [
          "iconSize",
          "imageSvg"
        ],
        "prevents": "Recalculating fitbox transform every render"
      }
    ],
    "memo_component": {
      "component": "AnimatedSquares",
      "benefit": "Prevents re-render when parent re-renders with same props",
      "critical": "Avoids rebuilding 2000-sprite Atlas unnecessarily"
    },
    "texture_reuse": {
      "pattern": "Single white texture used for all squares",
      "colored_via": "Float32Array colors array",
      "benefit": "Minimal texture memory usage"
    }
  },
  "gesture_handling": {
    "tap_gesture": {
      "type": "Gesture.Tap()",
      "configuration": {
        "maxDuration": 10000,
        "note": "Long duration allows holding button to see animation"
      },
      "lifecycle": {
        "onTouchesDown": "Set isActive.value = true, start animation",
        "onTouchesUp": "Call onPress callback via scheduleOnRN",
        "onFinalize": "Set isActive.value = false, reverse animation"
      }
    },
    "press_callback": {
      "pattern": "scheduleOnRN for thread bridging",
      "reason": "onPress prop is JS function, gesture runs on UI thread",
      "timing": "Called on onTouchesUp (before release)",
      "demo_callback": "console.log('Button pressed')"
    }
  },
  "component_architecture": {
    "atlas_button": {
      "type": "Reusable component",
      "props": {
        "width": {
          "type": "number",
          "required": true,
          "description": "Button width in pixels"
        },
        "height": {
          "type": "number",
          "required": true,
          "description": "Button height in pixels"
        },
        "onPress": {
          "type": "() => void",
          "required": false,
          "description": "Callback when button is tapped"
        },
        "label": {
          "type": "string",
          "required": true,
          "description": "Text label displayed below icon"
        },
        "labelStyle": {
          "type": "StyleProp<TextStyle>",
          "required": false,
          "description": "Custom style for label text"
        },
        "svgIcon": {
          "type": "DataSourceParam",
          "required": true,
          "description": "SVG icon source (require() or URL)"
        },
        "iconSize": {
          "type": "number",
          "required": false,
          "description": "Icon size (defaults to width * 0.2)"
        },
        "colors": {
          "type": "Array<Float32Array>",
          "required": true,
          "description": "Color palette for squares (weighted by repetition)"
        },
        "horizontalSquaresAmount": {
          "type": "number",
          "required": false,
          "default": 50,
          "description": "Number of squares horizontally"
        }
      }
    },
    "animated_squares": {
      "type": "Internal component (memoized)",
      "props": {
        "width": "Canvas width",
        "height": "Canvas height",
        "progress": "Animation progress SharedValue",
        "colors": "Color palette array",
        "horizontalSquaresAmount": "Grid density"
      },
      "responsibility": "Render animated grid using Atlas API"
    }
  },
  "visual_design": {
    "demo_styling": {
      "background": "#000 (black)",
      "button_size": "250x200px",
      "icon": "React Native logo (SVG)",
      "label": "React Native",
      "label_style": "20px, bold, white, centered"
    },
    "animation_aesthetics": {
      "initial_state": "Grid of colored squares, icon and label hidden",
      "pressed_state": "Expanding hole from center, icon moves up, label fades in",
      "release_state": "Reverse animation, grid reforms, icon/label hide",
      "duration": "1000ms for full animation cycle",
      "easing": "cubic-bezier(0.25, 0.1, 0.25, 1) - ease-in-out feel"
    },
    "square_appearance": {
      "size": "2.5px (in demo with 250px width)",
      "gap": "2.5px spacing",
      "colors": "Mix of transparent, blue, light blue, purple-blue",
      "opacity": "80% for colored squares"
    }
  },
  "mathematical_algorithms": {
    "distance_calculation": {
      "formula": "Math.sqrt((tx - width/2)^2 + (ty - height/2)^2)",
      "tx_ty": "Square center position",
      "center": "(width/2, height/2)",
      "units": "Pixels"
    },
    "scale_interpolation": {
      "formula": "max(0, 1.5 - distance / activeRadius)",
      "at_center": "distance = 0, scale = 1.5",
      "at_active_radius": "distance = activeRadius, scale = 0.5",
      "beyond_radius": "scale < 0, clamped to 0 by max()",
      "effect": "Linear falloff from center"
    },
    "visibility_threshold": {
      "formula": "scale >= 0.9 + randomValue * 0.5",
      "range": "[0.9, 1.4]",
      "at_center": "scale = 1.5, exceeds max threshold (1.4), always hidden",
      "near_center": "scale in [1.0, 1.5], high probability of hiding",
      "far_from_center": "scale < 0.9, never hidden"
    },
    "grid_indexing": {
      "x_position": "(index % HSquares) * SquareContainerSize",
      "y_position": "Math.floor(index / HSquares) * SquareContainerSize",
      "example": "Square 75 in 50-wide grid: x = 25 * 5, y = 1 * 5 = (125, 5)"
    }
  },
  "use_cases": {
    "primary": [
      "Hero buttons with visual flair",
      "Call-to-action buttons in onboarding",
      "Featured action buttons in apps",
      "Interactive brand elements",
      "Gamification rewards/achievements"
    ],
    "real_world_examples": [
      "App store feature buttons",
      "Game start/play buttons",
      "Premium feature unlocks",
      "Social media action buttons",
      "E-commerce featured product CTAs"
    ],
    "educational": [
      "Learning Skia Atlas API",
      "Understanding sprite batching",
      "GPU optimization techniques",
      "Float32Array color formats",
      "Radial distance calculations"
    ]
  },
  "code_quality": {
    "typescript": "Full TypeScript with explicit types",
    "type_definitions": [
      "AtlasButtonProps",
      "AnimatedSquaresProps"
    ],
    "imports": {
      "skia_types": [
        "DataSourceParam"
      ],
      "reanimated_types": [
        "SharedValue"
      ],
      "react_types": [
        "FC",
        "StyleProp",
        "TextStyle"
      ]
    },
    "component_patterns": {
      "functional_components": "Uses FC type for both components",
      "memo": "AnimatedSquares wrapped in memo for performance",
      "hooks": "Proper hook usage with dependencies"
    },
    "constants": {
      "canvas_dimensions": "250x200 (demo)",
      "color_palette": "Defined with descriptive names",
      "grid_density": "50 horizontal squares"
    },
    "documentation": {
      "inline_comments": "Excellent - explains Float32Array, color probability, icon fitting",
      "code_clarity": "Clear separation of concerns",
      "example_usage": "Comprehensive demo with all features"
    }
  },
  "inspiration": {
    "source": "https://x.com/i/status/1734891084826952094",
    "platform": "Twitter/X",
    "note": "Original inspiration from social media post"
  },
  "known_limitations": {
    "fixed_square_grid": {
      "issue": "Grid density calculated from horizontalSquaresAmount",
      "limitation": "Square size adjusts to button size, may be too small/large",
      "mitigation": "Choose appropriate grid density for button size"
    },
    "svg_requirement": {
      "issue": "Requires SVG icon source",
      "limitation": "No support for PNG/JPG icons without conversion",
      "workaround": "Convert raster images to SVG or use different icon component"
    },
    "color_format": {
      "issue": "Float32Array required for colors",
      "limitation": "Can't use hex colors directly",
      "learning_curve": "Requires understanding Float32Array format"
    },
    "performance_scaling": {
      "issue": "Performance depends on grid density",
      "recommendation": "Keep horizontalSquaresAmount reasonable (30-100)",
      "high_density_impact": "More squares = more calculations per frame"
    },
    "no_accessibility": {
      "issue": "No accessibility labels or hints",
      "impact": "Screen readers won't describe button properly",
      "recommendation": "Add accessibilityLabel and accessibilityHint"
    }
  },
  "potential_improvements": {
    "features": [
      "Support for raster images (PNG/JPG) via different rendering",
      "Hex color input with automatic Float32Array conversion",
      "Multiple animation patterns (spiral, wave, random)",
      "Configurable easing curves",
      "Custom animation durations per element",
      "Ripple effect from touch point (not just center)",
      "Particle burst on press",
      "Sound effects integration"
    ],
    "accessibility": [
      "Add accessibilityLabel prop",
      "Add accessibilityHint prop",
      "accessibilityRole='button'",
      "Respect prefers-reduced-motion",
      "Haptic feedback option"
    ],
    "customization": [
      "Configurable square gap size",
      "Different visibility patterns (fade vs hide)",
      "Custom icon reveal animations",
      "Label position options (top/bottom)",
      "Border/outline options"
    ],
    "performance": [
      "Dynamic grid density based on device performance",
      "Option to reduce particle count on low-end devices",
      "Cached texture generation"
    ]
  },
  "key_insights": {
    "atlas_efficiency": "Atlas API enables rendering thousands of sprites that would be impossible with View components",
    "worklet_power": "All square calculations in worklets = 60fps even with 2000 squares",
    "float32array_format": "GPU-friendly color format essential for Atlas performance",
    "probabilistic_visibility": "Randomized thresholds create organic, non-uniform animation patterns",
    "distance_based_animation": "Radial calculations create expanding wave effect naturally",
    "texture_reuse": "Single white texture + colors array = minimal memory",
    "useMemo_critical": "Pre-generating random values prevents animation jitter"
  },
  "learning_opportunities": {
    "for_beginners": [
      "Basic Skia Canvas usage",
      "Understanding sprite rendering concepts",
      "SharedValue and derived values",
      "Gesture handling basics"
    ],
    "for_intermediate": [
      "Skia Atlas API for sprite batching",
      "useRSXformBuffer and useRectBuffer",
      "Float32Array color formats",
      "SVG rendering and fitting with Skia",
      "Worklet-based calculations",
      "Distance-based animations"
    ],
    "for_advanced": [
      "GPU optimization with Atlas",
      "Performance profiling with many sprites",
      "Custom texture generation",
      "Complex transform calculations in worklets",
      "Building reusable animation components",
      "Color probability weighting patterns"
    ]
  },
  "testing_considerations": {
    "visual_tests": [
      "Squares render correctly in grid pattern",
      "Animation expands smoothly from center",
      "Icon and label reveal at correct timing",
      "Colors distributed according to probability",
      "Button scale feedback visible"
    ],
    "interaction_tests": [
      "Tap triggers animation",
      "Release reverses animation",
      "onPress callback fires",
      "Long press maintains animation"
    ],
    "performance_tests": [
      "60fps maintained during animation",
      "No frame drops with 2000 squares",
      "Memory usage stable across multiple presses",
      "Animation smooth on low-end devices"
    ],
    "edge_cases": [
      "Very small button sizes (< 100px)",
      "Very large button sizes (> 500px)",
      "Rapid tap/release cycles",
      "Invalid color arrays",
      "Missing SVG icon",
      "Zero or negative dimensions"
    ]
  },
  "comparison_to_alternatives": {
    "vs_view_based_grid": {
      "atlas_button": "2000 squares in one draw call",
      "view_grid": "2000 View components = severe performance issues",
      "benefit": "100x+ performance improvement"
    },
    "vs_lottie_animation": {
      "atlas_button": "Dynamic, responds to gesture, GPU-accelerated",
      "lottie": "Pre-rendered, fixed animation, CPU decoding",
      "trade_off": "Atlas is real-time and interactive, Lottie easier to design"
    },
    "vs_canvas_drawing": {
      "atlas_api": "Sprites batched, single draw call",
      "manual_canvas": "Would need to draw each square individually",
      "benefit": "Atlas is more declarative and performant"
    }
  },
  "related_patterns": {
    "particle_systems": "Similar sprite rendering for particles",
    "tile_maps": "Atlas used for game tile rendering",
    "confetti_effects": "Sprite-based celebration animations",
    "pixelation_effects": "Grid-based visual effects",
    "loading_animations": "Animated grid loaders"
  },
  "accessibility_considerations": {
    "current_state": {
      "accessible": false,
      "issues": [
        "No accessibility labels",
        "No screen reader support",
        "No reduced motion support",
        "No keyboard navigation"
      ]
    },
    "recommendations": [
      "Add accessibilityLabel={label}",
      "Add accessibilityRole='button'",
      "Add accessibilityHint='Tap to {action}'",
      "Respect AccessibilityInfo.isReduceMotionEnabled",
      "Consider haptic feedback on press",
      "Ensure sufficient color contrast for squares",
      "Test with VoiceOver and TalkBack"
    ]
  },
  "bundle_size_impact": {
    "code_size": "~250 lines total (main + animated squares)",
    "dependencies": "Skia and Reanimated (likely already in project)",
    "runtime_memory": "Low - single texture, pre-generated arrays",
    "estimated_memory": "~100KB for 2000 squares (buffers + colors)",
    "texture_memory": "Minimal - single white texture"
  },
  "platform_considerations": {
    "ios": {
      "features": "All features fully supported",
      "performance": "Excellent GPU acceleration"
    },
    "android": {
      "features": "All features fully supported",
      "performance": "Excellent GPU acceleration"
    },
    "web": {
      "compatibility": "Skia has CanvasKit backend for web",
      "performance": "Good, but may be slightly slower than native",
      "note": "Requires react-native-web configuration"
    }
  },
  "tags": [
    "atlas",
    "skia",
    "sprites",
    "grid-animation",
    "particle-effect",
    "button",
    "interactive",
    "gpu-rendering",
    "float32array",
    "svg-icons",
    "gesture-handler",
    "reanimated",
    "worklets",
    "high-performance",
    "radial-animation",
    "distance-based",
    "batching"
  ],
  "content_hash": "3626aba252f026ea343c550d034428bd289aa3c0a7ed70fbb401070805b2ec2a",
  "hash_algorithm": "sha256",
  "hash_generated_at": "2025-10-12T09:19:28.279Z",
  "last_validated": "2025-10-12T09:19:28.279Z"
}
