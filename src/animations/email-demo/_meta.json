{
  "animation_name": "Email Demo",
  "animation_slug": "email-demo",
  "description": "An interactive email inbox list with swipe-to-delete animation featuring smooth list item shifting, dynamic highlighting, and shake feedback. Items shift upward to fill deleted positions with spring-based translateY animations, background color transitions, and shadow effects. Includes restore/delete floating action buttons with shake animations to indicate invalid operations.",

  "main_features": [
    "Swipe-up list item shifting animation",
    "Dynamic item highlighting with background color fade",
    "Spring-based translateY animations for smooth item movement",
    "Opacity fade for erased items",
    "Dynamic shadow effects for active item",
    "Restore and delete floating action buttons",
    "Shake animation feedback for invalid actions",
    "Gradient overlays at top and bottom",
    "Safe area handling for notch/status bar",
    "Reusable animated shake hook",
    "List item elevation and shadow transitions"
  ],

  "file_structure": {
    "index.tsx": "Main demo component with floating action buttons and list container",
    "components/interactive-list/index.tsx": "Custom list wrapper handling animation logic per item",
    "components/list-item/index.tsx": "Individual list item component with avatar and text",
    "hooks/use-animated-shake.ts": "Reusable custom hook for shake animation effect",
    "constants.ts": "Mock email data with 10 items (imageUrl, title, subtitle)"
  },

  "core_technologies": {
    "animations": "react-native-reanimated",
    "interactions": "pressto",
    "images": "expo-image",
    "gradients": "expo-linear-gradient",
    "safe_area": "react-native-safe-area-context",
    "icons": "@expo/vector-icons"
  },

  "packages_and_versions": {
    "react-native-reanimated": {
      "version": "~4.1.1",
      "hooks": [
        "useSharedValue",
        "useAnimatedStyle"
      ],
      "functions": [
        "withSpring",
        "withRepeat",
        "withTiming",
        "cancelAnimation"
      ],
      "types": ["SharedValue"],
      "critical_feature": "useAnimatedStyle for dynamic translateY, opacity, background, and shadow animations"
    },
    "pressto": {
      "version": "0.3.5-beta.1",
      "component": "PressableScale",
      "usage": "Restore and delete floating action buttons with scale press feedback"
    },
    "expo-image": {
      "version": "~3.0.8",
      "components": ["Image"],
      "props": ["contentFit", "source"],
      "usage": "Avatar images in list items with optimized loading"
    },
    "expo-linear-gradient": {
      "version": "~14.0.1",
      "component": "LinearGradient",
      "usage": "Top and bottom gradients for fade effect at screen edges",
      "colors": ["rgba(248,250,252,1) to rgba(248,250,252,0)", "rgba(248,250,252,0) to rgba(248,250,252,1)"]
    },
    "react-native-safe-area-context": {
      "version": "~5.6.0",
      "hooks": ["useSafeAreaInsets"],
      "usage": "Top and bottom padding to avoid notch/status bar and bottom safe area"
    },
    "@expo/vector-icons": {
      "version": "^15.0.2",
      "components": ["MaterialIcons"],
      "icons_used": ["restore", "delete"],
      "size": 24,
      "usage": "Icons for floating action buttons"
    }
  },

  "animation_techniques": {
    "list_item_shifting": {
      "pattern": "TranslateY interpolation based on erased count",
      "formula": "translateY: -shiftedAmount * itemHeight",
      "spring_config": {
        "damping": 30,
        "stiffness": 180,
        "mass": 1.5
      },
      "effect": "Items smoothly shift upward to fill space of deleted items",
      "trigger": "erasedItems.value increments/decrements",
      "applies_to": "All list items in InteractiveList"
    },
    "item_opacity_fade": {
      "pattern": "Conditional opacity based on item index vs erased count",
      "formula": "opacity: withSpring(index >= shiftedAmount ? 1 : 0, springConfig)",
      "spring_config": {
        "damping": 26,
        "stiffness": 190,
        "mass": 1.4
      },
      "effect": "Items below erased threshold fade out, items above remain visible",
      "purpose": "Hides items that have been 'deleted' from view"
    },
    "active_item_highlighting": {
      "background_color": {
        "active": "rgba(59, 130, 246, 0.06) (blue with 6% alpha)",
        "inactive": "transparent",
        "condition": "index === shiftedAmount (current item to be erased)",
        "spring_config": {
          "damping": 25,
          "stiffness": 200,
          "mass": 1.2
        }
      },
      "shadow_effects": {
        "shadowOpacity": {
          "active": 0.15,
          "inactive": 0,
          "spring_config": "damping: 25, stiffness: 200, mass: 1.2"
        },
        "shadowRadius": {
          "active": 12,
          "inactive": 4,
          "spring_config": "damping: 25, stiffness: 200, mass: 1.2"
        },
        "shadowColor": "rgba(59, 130, 246, 0.4) (blue shadow)",
        "shadowOffset_height": {
          "active": 6,
          "inactive": 1,
          "spring_config": "damping: 25, stiffness: 200, mass: 1.2"
        }
      },
      "elevation": {
        "active": 12,
        "inactive": 2,
        "spring_config": "damping: 25, stiffness: 200, mass: 1.2"
      },
      "effect": "Highlighted item has blue background tint and enhanced shadow"
    },
    "shake_animation": {
      "pattern": "Horizontal oscillation using withRepeat and withTiming",
      "implementation": "useAnimatedShake custom hook",
      "translateX_amplitude": 10,
      "duration_per_cycle": 120,
      "repeat_count": 6,
      "reverse": true,
      "easing": "Easing.bezier(0.35, 0.7, 0.5, 0.7)",
      "trigger": "When invalid action attempted (restore when nothing to restore, delete when all deleted)",
      "effect": "Button shakes horizontally to indicate invalid operation",
      "reset": "cancelAnimation before starting new shake"
    },
    "gradient_overlays": {
      "top_gradient": {
        "colors": ["rgba(248,250,252,1)", "rgba(248,250,252,0)"],
        "start": "[0, 0]",
        "end": "[0, 1]",
        "height": "safeTop * 1.5",
        "position": "absolute top",
        "purpose": "Fades content near status bar/notch"
      },
      "bottom_gradient": {
        "colors": ["rgba(248,250,252,0)", "rgba(248,250,252,1)"],
        "start": "[0, 0]",
        "end": "[0, 1]",
        "height": 150,
        "position": "absolute bottom",
        "purpose": "Fades content near floating action buttons"
      },
      "pointer_events": "none (allows interaction through gradients)"
    }
  },

  "reanimated_patterns": {
    "shared_values": [
      {
        "name": "erasedItems",
        "type": "SharedValue<number>",
        "initial": 0,
        "range": "0 to INITIAL_ITEMS.length (10)",
        "updates": "Incremented by onDelete, decremented by onRestore",
        "scope": "Main component",
        "purpose": "Tracks how many items have been erased from top of list",
        "drives": "All list item animations via amountToShift prop"
      },
      {
        "name": "shakeTranslateX",
        "type": "SharedValue<number>",
        "initial": 0,
        "scope": "useAnimatedShake hook (two instances: restore and delete buttons)",
        "updates": "Animated with withRepeat when shake() is called",
        "purpose": "Controls horizontal shake animation for buttons"
      }
    ],
    "useAnimatedStyle_instances": [
      {
        "name": "rStyle",
        "location": "AnimatedListItem component",
        "animated_properties": [
          "transform: [{ translateY }] (shifts item upward)",
          "opacity (fades out erased items)",
          "backgroundColor (highlights active item)",
          "shadowOpacity (enhances shadow for active item)",
          "shadowRadius (increases blur for active item)",
          "shadowColor (blue shadow for active item)",
          "shadowOffset.height (lifts shadow for active item)",
          "elevation (Android elevation for active item)"
        ],
        "dependencies": ["index", "amountToShift", "itemHeight"],
        "complexity": "High - coordinates 8 animated properties based on item position"
      },
      {
        "name": "rShakeStyle",
        "location": "useAnimatedShake hook",
        "animated_properties": [
          "transform: [{ translateX }] (horizontal shake)"
        ],
        "dependencies": ["shakeTranslateX"],
        "purpose": "Returns animated style object for shake effect"
      }
    ],
    "spring_configurations": {
      "list_shift_spring": {
        "damping": 30,
        "stiffness": 180,
        "mass": 1.5,
        "characteristic": "Moderate damping, medium stiffness, slightly heavier mass",
        "feel": "Smooth, deliberate shifting motion with slight weight"
      },
      "opacity_spring": {
        "damping": 26,
        "stiffness": 190,
        "mass": 1.4,
        "characteristic": "Similar to shift but slightly snappier",
        "feel": "Quick fade with minimal overshoot"
      },
      "highlight_spring": {
        "damping": 25,
        "stiffness": 200,
        "mass": 1.2,
        "characteristic": "Lower damping, higher stiffness, lighter mass",
        "feel": "Snappy, responsive highlighting with subtle bounce"
      }
    },
    "useCallback_optimization": {
      "onDelete": {
        "dependencies": ["erasedItems", "shakeDelete"],
        "logic": "Increment erasedItems if not all deleted, else shake delete button",
        "benefit": "Stable reference prevents unnecessary re-renders"
      },
      "onRestore": {
        "dependencies": ["erasedItems", "shakeRestore"],
        "logic": "Decrement erasedItems if any erased, else shake restore button",
        "benefit": "Stable reference prevents unnecessary re-renders"
      }
    }
  },

  "custom_hooks": {
    "useAnimatedShake": {
      "file": "hooks/use-animated-shake.ts",
      "returns": {
        "shake": "() => void - Function to trigger shake animation",
        "rShakeStyle": "AnimatedStyle - Style object with translateX animation"
      },
      "implementation": {
        "shared_value": "shakeTranslateX: useSharedValue(0)",
        "shake_function": "Cancels existing animation, resets to 0, then animates",
        "animation": "withRepeat(withTiming(10, {...}), 6, true)",
        "style": "useAnimatedStyle(() => ({ transform: [{ translateX: shakeTranslateX.value }] }))"
      },
      "reusability": "Fully reusable for any component needing shake feedback",
      "instances": "Used twice in index.tsx (restore and delete buttons)",
      "note": "Mentioned as 'EXTREMELY useful (and reusable)' in code comments"
    }
  },

  "component_architecture": {
    "EmailDemo": {
      "type": "Main component",
      "structure": [
        "Fragment wrapper",
        "Container View with background color",
        "Top LinearGradient overlay",
        "InteractiveList with data and animation logic",
        "Bottom LinearGradient overlay",
        "Floating buttons container with restore and delete buttons"
      ],
      "state": {
        "erasedItems": "SharedValue tracking erased count"
      },
      "hooks": [
        "useSafeAreaInsets() for top and bottom padding",
        "useAnimatedShake() twice for button shake animations"
      ],
      "callbacks": ["onDelete", "onRestore"]
    },
    "InteractiveList": {
      "type": "Generic list wrapper component",
      "extends": "FlatListProps<T>",
      "custom_props": {
        "amountToShift": "SharedValue<number> (optional) - controls item shift amount",
        "itemHeight": "number (required) - height of each item for shift calculation",
        "itemContainerStyle": "StyleProp<ViewStyle> (optional) - styling for item wrapper"
      },
      "structure": "FlatList with custom renderItem wrapping in AnimatedListItem",
      "pattern": "Higher-order component wrapping FlatList items with animation logic",
      "benefit": "Encapsulates animation logic, reusable for any list needing shift animations"
    },
    "AnimatedListItem": {
      "type": "Internal wrapper component",
      "props": {
        "children": "React.ReactNode - actual list item content",
        "index": "number - item index in list",
        "amountToShift": "SharedValue<number> (optional)",
        "itemHeight": "number",
        "itemContainerStyle": "StyleProp<ViewStyle> (optional)"
      },
      "responsibility": "Applies animations based on index and amountToShift",
      "structure": "Animated.View with rStyle wrapping children"
    },
    "ListItem": {
      "type": "Presentational component",
      "props": {
        "item": "typeof INITIAL_ITEMS[number] - item data",
        "itemHeight": "number - height for responsive sizing"
      },
      "structure": [
        "Container View",
        "Avatar container with Image (circular, dynamic sizing based on itemHeight)",
        "Labels container with title and subtitle Text components"
      ],
      "styling": "White background, border, shadow, rounded corners"
    }
  },

  "state_management": {
    "erased_items_tracking": {
      "storage": "erasedItems SharedValue",
      "initial": 0,
      "operations": {
        "delete": "erasedItems.value = erasedItems.value + 1",
        "restore": "erasedItems.value = erasedItems.value - 1"
      },
      "validation": {
        "delete": "Check if erasedItems.value >= INITIAL_ITEMS.length",
        "restore": "Check if erasedItems.value <= 0"
      },
      "on_invalid": "Trigger shake animation on respective button"
    },
    "animation_lifecycle": {
      "on_delete": [
        "1. Check if all items erased (erasedItems >= 10)",
        "2. If yes: trigger shakeDelete(), return early",
        "3. If no: increment erasedItems.value",
        "4. All list items re-animate based on new erasedItems value",
        "5. Items shift up, next item gets highlighted, previous item fades out"
      ],
      "on_restore": [
        "1. Check if no items erased (erasedItems <= 0)",
        "2. If yes: trigger shakeRestore(), return early",
        "3. If no: decrement erasedItems.value",
        "4. All list items re-animate based on new erasedItems value",
        "5. Items shift down, previously hidden item fades in, highlight moves down"
      ]
    },
    "shared_value_choice": {
      "rationale": "Comment in code: 'At the beginning I was thinking to use a state, but the shared value is a better option to handle the animation since we're going to avoid useless re-renders'",
      "benefit": "SharedValue changes don't trigger React re-renders, only animation updates",
      "performance": "Critical for smooth 60fps animations without JS thread bottleneck"
    }
  },

  "visual_design": {
    "color_scheme": {
      "background": "#f8fafc (very light blue-gray)",
      "list_item_background": "white",
      "list_item_border": "rgba(229, 231, 235, 0.3) (very light gray with transparency)",
      "active_item_background": "rgba(59, 130, 246, 0.06) (blue with 6% alpha)",
      "active_item_shadow": "rgba(59, 130, 246, 0.4) (blue with 40% alpha)",
      "restore_button": "#10b981 (green)",
      "delete_button": "#ef4444 (red)",
      "title_text": "#111827 (dark gray, nearly black)",
      "subtitle_text": "#6b7280 (medium gray)"
    },
    "dimensions": {
      "item_height": 100,
      "item_margin": 10,
      "floating_button": {
        "height": 64,
        "aspectRatio": 1,
        "borderRadius": 32
      },
      "avatar": {
        "size": "itemHeight * 0.45 (45px)",
        "borderRadius": "itemHeight * 0.225 (22.5px - circular)"
      }
    },
    "typography": {
      "title": {
        "color": "#111827",
        "fontSize": 17,
        "fontWeight": "600",
        "letterSpacing": -0.2,
        "marginBottom": 4,
        "numberOfLines": 1
      },
      "subtitle": {
        "color": "#6b7280",
        "fontSize": 15,
        "letterSpacing": -0.1,
        "lineHeight": 20,
        "numberOfLines": 2
      }
    },
    "spacing_and_layout": {
      "list_padding": {
        "top": "safeTop (safe area inset)",
        "bottom": "ITEM_HEIGHT + ITEM_MARGIN (110px)",
        "horizontal": 12
      },
      "item_padding": {
        "horizontal": 16,
        "vertical": 12
      },
      "floating_buttons": {
        "position": "absolute bottom",
        "bottom": "safeBottom + 10",
        "horizontal_margin": "20% (centers buttons)",
        "flexDirection": "row",
        "justifyContent": "space-evenly"
      },
      "avatar_margin_right": 12
    },
    "shadows_and_elevation": {
      "list_item_default": {
        "ios": {
          "shadowColor": "#000",
          "shadowOffset": "{ width: 0, height: 1 }",
          "shadowOpacity": 0.05,
          "shadowRadius": 4
        },
        "android": {
          "elevation": 2
        }
      },
      "list_item_active": {
        "ios": {
          "shadowColor": "rgba(59, 130, 246, 0.4)",
          "shadowOffset": "{ width: 0, height: 6 }",
          "shadowOpacity": 0.15,
          "shadowRadius": 12
        },
        "android": {
          "elevation": 12
        }
      },
      "floating_buttons": {
        "ios": {
          "shadowColor": "#000",
          "shadowOffset": "{ width: 0, height: 4 }",
          "shadowOpacity": 0.15,
          "shadowRadius": 8
        },
        "android": {
          "elevation": 8
        }
      },
      "avatar": {
        "ios": {
          "shadowColor": "#000",
          "shadowOffset": "{ width: 0, height: 2 }",
          "shadowOpacity": 0.1,
          "shadowRadius": 4
        },
        "android": {
          "elevation": 3
        }
      }
    },
    "border_styling": {
      "list_item": {
        "borderRadius": 20,
        "borderWidth": 0.5,
        "borderColor": "rgba(229, 231, 235, 0.3)"
      },
      "floating_button": {
        "borderRadius": 32
      },
      "avatar": {
        "borderRadius": "dynamic (circular)"
      }
    }
  },

  "interaction_patterns": {
    "delete_action": {
      "trigger": "Press delete (red) button",
      "validation": "Check if erasedItems < total items",
      "on_valid": "Increment erasedItems, trigger list shift animations",
      "on_invalid": "Shake delete button",
      "visual_feedback": [
        "Top item fades out",
        "All items shift up by one item height",
        "Next item gets highlighted with blue background and enhanced shadow"
      ],
      "effect": "Simulates deleting email from top of inbox"
    },
    "restore_action": {
      "trigger": "Press restore (green) button",
      "validation": "Check if erasedItems > 0",
      "on_valid": "Decrement erasedItems, trigger list shift animations",
      "on_invalid": "Shake restore button",
      "visual_feedback": [
        "Top erased item fades in",
        "All items shift down by one item height",
        "Highlight moves to new top item"
      ],
      "effect": "Simulates undoing delete operation"
    },
    "pressable_scale": {
      "component": "PressableScale from pressto",
      "applied_to": ["Restore button", "Delete button"],
      "effect": "Scale press animation for tactile feedback",
      "benefit": "Natural, iOS-like press interaction"
    },
    "no_list_item_interaction": {
      "note": "List items themselves are not interactive",
      "pattern": "All interactions through floating action buttons",
      "purpose": "Demo focuses on list animation, not item selection"
    }
  },

  "data_structure": {
    "INITIAL_ITEMS": {
      "type": "Array of objects",
      "count": 10,
      "properties": {
        "imageUrl": "string - Unsplash image URL with face crop (400x400)",
        "title": "string - Email subject/sender name",
        "subtitle": "string - Email preview text"
      },
      "examples": [
        "Welcome to our community",
        "Security verification required",
        "Your order has been confirmed",
        "Team meeting reminder",
        "Payment successful",
        "New message from Sarah",
        "Weekly newsletter",
        "Password reset request",
        "Event invitation",
        "App update available"
      ],
      "sourcing": "Unsplash API with face crop and specific dimensions"
    },
    "item_dimensions": {
      "ITEM_HEIGHT": 100,
      "ITEM_MARGIN": 10,
      "total_item_space": "ITEM_HEIGHT + ITEM_MARGIN (110px)"
    }
  },

  "performance_optimizations": {
    "shared_value_over_state": {
      "pattern": "erasedItems is SharedValue instead of useState",
      "benefit": "Animation-driven updates don't trigger React re-renders",
      "impact": "All 10 list items can animate simultaneously without JS thread involvement",
      "fps": "Maintains 60fps even with complex multi-property animations"
    },
    "useCallback": {
      "functions": ["onDelete", "onRestore"],
      "dependencies": ["erasedItems", "shakeDelete", "shakeRestore"],
      "benefit": "Stable function references prevent unnecessary re-renders",
      "critical_for": "Performance with list of 10 items"
    },
    "flatlist_efficiency": {
      "component": "FlatList (not ScrollView)",
      "benefit": "Built-in virtualization (though not critical with only 10 items)",
      "note": "For larger lists, would provide significant performance benefit"
    },
    "expo_image": {
      "component": "expo-image instead of react-native Image",
      "benefit": "Better caching, loading performance, memory management",
      "contentFit": "cover - optimized rendering"
    },
    "gradient_pointer_events": {
      "property": "pointerEvents='none'",
      "benefit": "Gradients don't block touches to list items",
      "performance": "Avoids unnecessary touch event handling"
    },
    "spring_animation_efficiency": {
      "native_springs": "Reanimated's native spring implementation",
      "runs_on": "UI thread",
      "benefit": "No bridge crossing during animations",
      "smooth": "Consistent 60fps even with 8 animated properties per item"
    }
  },

  "use_cases": {
    "primary": [
      "Email inbox interfaces",
      "Todo list with delete/undo",
      "Notification lists with dismiss",
      "Shopping cart item removal",
      "Message threads with archive"
    ],
    "secondary": [
      "Photo gallery with delete/restore",
      "File management interfaces",
      "Playlist track removal",
      "History/recent items lists",
      "Queue management systems"
    ],
    "educational": [
      "Teaching list animations",
      "Demonstrating SharedValue benefits over state",
      "Showing multi-property coordinated animations",
      "Custom hook patterns for animations",
      "Spring physics tuning examples"
    ],
    "design_patterns": [
      "Undo/redo interactions",
      "Stack-based item management",
      "Visual feedback for invalid actions",
      "Floating action button patterns",
      "Gradient overlay techniques"
    ]
  },

  "code_quality": {
    "typescript": {
      "coverage": "Full TypeScript with explicit types",
      "generics": "InteractiveList<T> - generic list component",
      "type_imports": "type keyword for type-only imports",
      "prop_types": "Explicit types for all component props"
    },
    "component_separation": {
      "pattern": "Clear separation of concerns",
      "main": "index.tsx - orchestration and state",
      "list_logic": "interactive-list/index.tsx - animation wrapper",
      "presentation": "list-item/index.tsx - item rendering",
      "hooks": "use-animated-shake.ts - reusable animation logic",
      "data": "constants.ts - mock data"
    },
    "reusability": {
      "InteractiveList": "Fully reusable generic list component with animation",
      "useAnimatedShake": "Fully reusable shake animation hook",
      "ListItem": "Reusable presentational component",
      "pattern": "Components designed for portability"
    },
    "constants": {
      "ITEM_HEIGHT": 100,
      "ITEM_MARGIN": 10,
      "INITIAL_ITEMS": "Mock data array",
      "organization": "Well-organized constants for easy tweaking"
    },
    "inline_comments": {
      "quality": "Excellent inline comments explaining key decisions",
      "examples": [
        "Explanation of SharedValue choice over state",
        "Note about useAnimatedShake reusability",
        "Clear component structure comments"
      ]
    },
    "best_practices": [
      "Generic components with proper type constraints",
      "Custom hooks for reusable logic",
      "Explicit prop spreading control (rest props)",
      "Type-safe component composition",
      "Clear naming conventions"
    ]
  },

  "known_limitations": {
    "fixed_erase_direction": {
      "limitation": "Items only erase from top of list",
      "alternative": "Could extend to support erasing from any position",
      "current_pattern": "Stack-based (LIFO) deletion"
    },
    "no_swipe_gesture": {
      "limitation": "No swipe-to-delete on individual items",
      "interaction": "Only button-based deletion",
      "enhancement": "Could add pan gesture on items for swipe-to-delete"
    },
    "fixed_item_height": {
      "limitation": "All items must have same height (100px)",
      "reason": "TranslateY calculation assumes uniform height",
      "enhancement": "Could track individual item heights for variable sizing"
    },
    "no_data_persistence": {
      "limitation": "Erased items tracked by count, not removed from array",
      "effect": "Data array unchanged, only visual state changes",
      "enhancement": "Could actually mutate data array for real deletion"
    },
    "max_erase_limitation": {
      "limitation": "Can erase all 10 items but can't add new ones",
      "pattern": "Fixed dataset demonstration",
      "real_world": "Would need data refresh/pagination"
    },
    "accessibility": {
      "screen_readers": "Limited accessibility labels",
      "keyboard_navigation": "Not implemented",
      "reduced_motion": "No prefers-reduced-motion support"
    }
  },

  "potential_improvements": {
    "interaction_enhancements": [
      "Swipe-to-delete gesture on individual items",
      "Haptic feedback on delete/restore",
      "Long press for batch selection",
      "Pull-to-refresh for resetting list",
      "Double-tap to restore specific item"
    ],
    "animation_enhancements": [
      "Staggered item shifting (cascade effect)",
      "Blur effect on items being erased",
      "Particle effects on delete",
      "Elastic spring for more playful feel",
      "Color transition on delete (fade to red)"
    ],
    "functionality": [
      "Actual data mutation (remove from array)",
      "Multiple selection mode",
      "Swipe on specific item to delete that item",
      "Archive vs delete distinction",
      "Undo stack with history",
      "Batch delete/restore operations"
    ],
    "visual_enhancements": [
      "Item preview on restore",
      "Animated notification count badge",
      "Time-based auto-dismiss",
      "Category grouping with headers",
      "Read/unread visual distinction"
    ],
    "accessibility": [
      "Screen reader announcements",
      "Accessibility labels and hints",
      "Keyboard navigation support",
      "Focus management",
      "Reduced motion support",
      "High contrast mode support"
    ]
  },

  "key_insights": {
    "shared_value_power": "Using SharedValue instead of state avoids re-renders and enables smooth multi-item animations",
    "index_based_animation": "Animating based on index comparison (index >= shiftedAmount) creates clean show/hide logic",
    "spring_coordination": "Different spring configs for different properties create natural, layered motion",
    "custom_hook_reusability": "useAnimatedShake demonstrates perfect custom hook pattern for reusable animations",
    "generic_list_wrapper": "InteractiveList<T> pattern enables reusable animated list logic for any data type",
    "conditional_highlighting": "Single item highlighting (index === shiftedAmount) provides clear visual focus",
    "gradient_overlay": "Pointer events none on gradients allows interaction through visual effects",
    "validation_feedback": "Shake animations provide clear, non-intrusive feedback for invalid operations"
  },

  "learning_opportunities": {
    "for_beginners": [
      "Basic FlatList usage",
      "Safe area insets handling",
      "Gradient overlays",
      "Button interactions",
      "Component composition"
    ],
    "for_intermediate": [
      "SharedValue vs useState decision-making",
      "useAnimatedStyle with multiple properties",
      "Spring physics configuration",
      "Custom hooks for animations",
      "Generic TypeScript components",
      "Conditional animation logic"
    ],
    "for_advanced": [
      "Multi-property coordinated animations",
      "Performance optimization with SharedValues",
      "Complex spring physics tuning",
      "Reusable animation component patterns",
      "Index-based animation logic",
      "Generic list wrapper components",
      "Animation lifecycle management"
    ]
  },

  "comparison_to_similar_animations": {
    "vs_swipe_to_delete": {
      "traditional": "Swipe individual items to delete them",
      "this": "Button-based deletion of top item with list shifting",
      "benefit": "Simpler interaction, clear visual focus on next-to-delete item"
    },
    "vs_fade_out_in_place": {
      "traditional": "Item fades out and leaves gap",
      "this": "Items shift up to fill space immediately",
      "benefit": "More efficient use of space, continuous list appearance"
    },
    "vs_slide_to_remove": {
      "traditional": "Item slides off screen horizontally",
      "this": "Item fades out while others shift up vertically",
      "benefit": "More natural for vertical lists, shows consequence of action"
    }
  },

  "testing_considerations": {
    "visual_regression": [
      "Items shift smoothly upward",
      "Opacity fades correctly for erased items",
      "Highlighting appears on correct item",
      "Shadow effects transition smoothly",
      "Gradients render at correct positions"
    ],
    "interaction_testing": [
      "Delete button increments erasedItems",
      "Restore button decrements erasedItems",
      "Delete at max limit triggers shake",
      "Restore at zero triggers shake",
      "Rapid button presses handled correctly"
    ],
    "animation_testing": [
      "Spring animations complete smoothly",
      "No animation conflicts",
      "Shake animation returns to original position",
      "Multiple properties animate in sync",
      "60fps maintained during animations"
    ],
    "edge_cases": [
      "Delete all items",
      "Restore all items",
      "Rapid delete-restore cycles",
      "Very fast button spamming",
      "List with single item",
      "Empty list state"
    ],
    "state_testing": [
      "erasedItems never exceeds total items",
      "erasedItems never goes below 0",
      "State correctly reflects visual appearance",
      "Restore undoes delete correctly"
    ]
  },

  "accessibility_considerations": {
    "current_state": {
      "labels": "No accessibility labels on buttons or list items",
      "announcements": "No screen reader announcements",
      "keyboard": "No keyboard navigation",
      "reduced_motion": "No motion reduction support"
    },
    "recommendations": [
      "Add accessibilityLabel to buttons ('Delete email', 'Restore email')",
      "Add accessibilityHint for context",
      "Announce item deletion/restoration to screen reader",
      "Add accessibilityRole='button' to floating buttons",
      "Support keyboard navigation (Arrow keys, Enter, Delete)",
      "Respect prefers-reduced-motion (instant transitions)",
      "Add accessible item count ('5 emails remaining')",
      "Focus management on delete/restore",
      "High contrast mode support"
    ]
  },

  "related_patterns": {
    "similar_animations": [
      "Email inbox swipe-to-delete",
      "Todo list item removal",
      "Notification dismiss animations",
      "Stack/queue visualizations",
      "Undo/redo animations"
    ],
    "interaction_patterns": [
      "Floating action buttons",
      "Undo/redo controls",
      "List item management",
      "Batch operations",
      "Visual validation feedback"
    ],
    "animation_techniques": [
      "List item shifting",
      "Index-based animations",
      "Shake feedback",
      "Spring physics",
      "Multi-property coordination"
    ]
  },

  "bundle_size_impact": {
    "code_size": "~320 lines total (index: 192, interactive-list: 116, list-item: 81, hook: 40, constants: 63)",
    "dependencies": {
      "pressto": "~5KB (if not already in project)",
      "expo-linear-gradient": "~2KB (if not already in project)",
      "others": "Likely already in project (reanimated, expo-image, safe-area-context)"
    },
    "runtime_memory": "Minimal - small dataset, efficient SharedValues",
    "estimated_impact": "< 10KB additional"
  },

  "tags": [
    "email-list",
    "inbox-animation",
    "swipe-delete",
    "undo-redo",
    "list-shifting",
    "spring-animation",
    "shake-feedback",
    "floating-action-button",
    "gradient-overlay",
    "reanimated",
    "shared-value",
    "custom-hook",
    "generic-components",
    "item-highlighting",
    "opacity-fade"
  ]
}
